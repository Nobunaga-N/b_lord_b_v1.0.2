"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ loguru
–° –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∂—É—Ä–Ω–∞–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
"""

import os
import sys
import subprocess
from loguru import logger


def setup_logger():
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç loguru –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞

    –§–æ—Ä–º–∞—Ç: [HH:MM:SS] LEVEL | –°–æ–æ–±—â–µ–Ω–∏–µ
    –¶–≤–µ—Ç–∞:
    - INFO: –±–µ–ª—ã–π/—Å–µ—Ä—ã–π
    - SUCCESS: –∑–µ–ª—ë–Ω—ã–π
    - WARNING: –∂—ë–ª—Ç—ã–π
    - ERROR: –∫—Ä–∞—Å–Ω—ã–π
    - CRITICAL: –∫—Ä–∞—Å–Ω—ã–π
    - DEBUG: —Å–∏–Ω–∏–π
    """

    # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UTF-8 –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
    if sys.platform == 'win32':
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
            import os
            os.system('chcp 65001 > nul 2>&1')

            # –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å stdout/stderr –Ω–∞ UTF-8
            if hasattr(sys.stdout, 'reconfigure'):
                sys.stdout.reconfigure(encoding='utf-8')
            if hasattr(sys.stderr, 'reconfigure'):
                sys.stderr.reconfigure(encoding='utf-8')
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å UTF-8: {e}")

    # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    logger.remove()

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("data/logs", exist_ok=True)

    # –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    log_format = (
        "<green>[{time:HH:mm:ss}]</green> "
        "<level>{level: <8}</level> | "
        "<level>{message}</level>"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Ñ–∞–π–ª (—Å ANSI —Ü–≤–µ—Ç–∞–º–∏)
    logger.add(
        "data/logs/bot.log",
        format=log_format,
        level="DEBUG",
        rotation="10 MB",  # –†–æ—Ç–∞—Ü–∏—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 10 –ú–ë
        retention="7 days",  # –•—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏ 7 –¥–Ω–µ–π
        compression="zip",  # –°–∂–∏–º–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
        colorize=True,  # ANSI –∫–æ–¥—ã —Ü–≤–µ—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
        backtrace=True,  # –ü–æ–ª–Ω—ã–π traceback –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        diagnose=True,  # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        enqueue=True,  # –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    logger.add(
        sys.stdout,
        format=log_format,
        level="DEBUG",
        colorize=True,
    )

    # === –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ ===
    logger.add(
        _error_log_sink,
        format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
        level="ERROR",  # –õ–æ–≤–∏–º ERROR –∏ CRITICAL
        colorize=False,
        backtrace=True,
        diagnose=True,
    )

    logger.info("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    logger.debug(f"–§–∞–π–ª –ª–æ–≥–æ–≤: data/logs/bot.log")


def _error_log_sink(message):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π sink –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ ERROR –∏ CRITICAL –ª–æ–≥–æ–≤
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ ErrorLogManager

    Args:
        message: –æ–±—ä–µ–∫—Ç Record –∏–∑ loguru
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from utils.error_log_manager import error_log_manager

        record = message.record

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        level = record["level"].name
        text = record["message"]
        formatted_line = f"[{record['time'].strftime('%H:%M:%S')}] {level: <8} | {text}"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∂—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫
        error_log_manager.add_error(
            log_line=formatted_line,
            level=level,
            message=text
        )

    except Exception:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        pass


def _log_line_sink(message):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π sink –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)

    Args:
        message: –æ–±—ä–µ–∫—Ç Record –∏–∑ loguru
    """
    try:
        from utils.error_log_manager import error_log_manager

        record = message.record
        formatted_line = f"[{record['time'].strftime('%H:%M:%S')}] {record['level'].name: <8} | {record['message']}"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –±—É—Ñ–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        error_log_manager.add_log_line(formatted_line)

    except Exception:
        pass


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º sink –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
def add_context_collector():
    """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    logger.add(
        _log_line_sink,
        format="{message}",
        level="DEBUG",
        colorize=False,
    )


def open_log_terminal():
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç Windows Terminal —Å –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∂–∏–º–µ tail -f

    –û–ë–ù–û–í–õ–ï–ù–û: –°–æ–∑–¥–∞—ë—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é tail_logs.ps1 —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏

    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
    1. Windows Terminal + PowerShell 7+ (pwsh)
    2. Windows Terminal + PowerShell 5 (powershell)
    3. PowerShell 7+ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ (pwsh)
    4. PowerShell 5 –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ (fallback)
    """

    # –ü—É—Ç—å –∫ PowerShell —Å–∫—Ä–∏–ø—Ç—É
    script_path = os.path.abspath("data/logs/tail_logs.ps1")

    # –°–æ–∑–¥–∞–µ–º PowerShell —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(script_path):
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ PowerShell —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤...")
        os.makedirs(os.path.dirname(script_path), exist_ok=True)

        # ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write("""# –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –Ω–æ–≤–æ–º—É —Ñ–∞–π–ª—É –ø—Ä–∏ —Ä–æ—Ç–∞—Ü–∏–∏

$logPath = "bot.log"

Write-Host "==================================" -ForegroundColor Cyan
Write-Host "Beast Lord Bot - –õ–æ–≥–∏" -ForegroundColor Cyan
Write-Host "==================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üí° –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –ø—Ä–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤" -ForegroundColor Yellow
Write-Host "‚ö†Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏" -ForegroundColor Gray
Write-Host ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
function Start-LogTail {
    param([string]$Path)

    $lastPosition = 0
    $reconnectAttempts = 0
    $maxReconnectAttempts = 3

    while ($true) {
        try {
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if (-not (Test-Path $Path)) {
                Write-Host "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤..." -ForegroundColor Yellow
                Start-Sleep -Seconds 2
                continue
            }

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            $fileInfo = Get-Item $Path
            $currentSize = $fileInfo.Length

            # –ï—Å–ª–∏ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏ - –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ä–æ—Ç–∞—Ü–∏—è
            if ($currentSize -lt $lastPosition) {
                Write-Host ""
                Write-Host "üîÑ [$(Get-Date -Format 'HH:mm:ss')] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..." -ForegroundColor Magenta
                Write-Host ""
                $lastPosition = 0
                $reconnectAttempts = 0
            }

            # –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
            if ($currentSize -gt $lastPosition) {
                $content = Get-Content -Path $Path -Encoding UTF8 -ErrorAction Stop

                # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
                $newLines = $content | Select-Object -Skip ([Math]::Max(0, $lastPosition))
                foreach ($line in $newLines) {
                    Write-Host $line
                }

                $lastPosition = $content.Count
                $reconnectAttempts = 0
            }

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            Start-Sleep -Milliseconds 500

        }
        catch [System.IO.FileNotFoundException] {
            # –§–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω/–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω - —Ä–æ—Ç–∞—Ü–∏—è
            Write-Host ""
            Write-Host "üîÑ [$(Get-Date -Format 'HH:mm:ss')] –§–∞–π–ª –ª–æ–≥–æ–≤ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω (—Ä–æ—Ç–∞—Ü–∏—è), –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..." -ForegroundColor Magenta
            Write-Host ""

            $lastPosition = 0
            $reconnectAttempts++

            if ($reconnectAttempts -gt $maxReconnectAttempts) {
                Write-Host "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" -ForegroundColor Red
                break
            }

            Start-Sleep -Seconds 2
        }
        catch {
            Write-Host "‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: $($_.Exception.Message)" -ForegroundColor Red
            $reconnectAttempts++

            if ($reconnectAttempts -gt $maxReconnectAttempts) {
                Write-Host "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" -ForegroundColor Red
                break
            }

            Start-Sleep -Seconds 2
        }
    }
}

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–∂–µ–Ω–∏–µ
try {
    Start-LogTail -Path $logPath
}
catch {
    Write-Host "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $($_.Exception.Message)" -ForegroundColor Red
    Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    exit 1
}
""")

    # ===== –ü–û–ü–´–¢–ö–ê 1: Windows Terminal + PowerShell 7+ =====
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Windows Terminal
        wt_path = os.path.expandvars(r"%LOCALAPPDATA%\Microsoft\WindowsApps\wt.exe")

        if os.path.exists(wt_path):
            # –ü—Ä–æ–±—É–µ–º —Å pwsh
            command = f'start wt.exe -d data/logs pwsh -NoExit -ExecutionPolicy Bypass -File "{script_path}"'

            subprocess.Popen(command, shell=True)
            logger.success("Windows Terminal + PowerShell 7+ –æ—Ç–∫—Ä—ã—Ç")
            return True

    except FileNotFoundError:
        logger.debug("Windows Terminal –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å wt.exe + pwsh: {e}")

    # ===== –ü–û–ü–´–¢–ö–ê 2: Windows Terminal + PowerShell 5 =====
    try:
        wt_path = os.path.expandvars(r"%LOCALAPPDATA%\Microsoft\WindowsApps\wt.exe")

        if os.path.exists(wt_path):
            command = f'start wt.exe -d data/logs powershell -NoExit -ExecutionPolicy Bypass -File "{script_path}"'

            subprocess.Popen(command, shell=True)
            logger.success("Windows Terminal + PowerShell 5 –æ—Ç–∫—Ä—ã—Ç")
            logger.warning("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PowerShell 7+ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            return True

    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å wt.exe + powershell: {e}")

    # ===== –ü–û–ü–´–¢–ö–ê 3: PowerShell 7+ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ =====
    try:
        command = f'start pwsh -NoExit -ExecutionPolicy Bypass -File "{script_path}"'

        subprocess.Popen(command, shell=True)
        logger.success("PowerShell 7+ –æ—Ç–∫—Ä—ã—Ç (–æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ)")
        return True

    except FileNotFoundError:
        logger.debug("PowerShell 7+ (pwsh) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å pwsh: {e}")

    # ===== –ü–û–ü–´–¢–ö–ê 4: PowerShell 5 –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ (fallback) =====
    try:
        command = f'start powershell -NoExit -ExecutionPolicy Bypass -File "{script_path}"'

        subprocess.Popen(command, shell=True)
        logger.success("PowerShell 5 –æ—Ç–∫—Ä—ã—Ç (–æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ)")
        logger.warning(
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PowerShell 5 (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PowerShell 7+ –∏ Windows Terminal –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)")
        return True

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª —Å –ª–æ–≥–∞–º–∏ (–≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å): {e}")
        return False


def get_logger():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä

    Returns:
        logger: –û–±—ä–µ–∫—Ç loguru logger
    """
    return logger


# –ü—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–≥–µ—Ä
setup_logger()
add_context_collector()