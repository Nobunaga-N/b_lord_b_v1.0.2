"""
OCR –¥–≤–∏–∂–æ–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∏–≥—Ä–µ Beast Lord

–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ PaddleOCR 3.x —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π GPU
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∏–≥—Ä—ã
"""

import re
import os
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple
import numpy as np
import cv2
from loguru import logger

try:
    from paddleocr import PaddleOCR
    import paddle
    PADDLE_AVAILABLE = True
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ PaddleOCR: {e}")
    PADDLE_AVAILABLE = False


class OCREngine:
    """
    OCR –¥–≤–∏–∂–æ–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (PaddleOCR 3.x)

    Features:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ GPU/CPU
    - –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ + –ª–∞—Ç–∏–Ω–∏—Ü–∞)
    - –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω–µ–π –∑–¥–∞–Ω–∏–π (Lv.X)
    - –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–π–º–µ—Ä–æ–≤ (HH:MM:SS)
    - –ü–æ—Å—Ç—Ä–æ—á–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    - Debug —Ä–µ–∂–∏–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º bbox
    """

    def __init__(self, lang: str = 'ru', force_cpu: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR –¥–≤–∏–∂–∫–∞

        Args:
            lang: –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ('ru', 'en', 'ch')
            force_cpu: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CPU

        Note:
            –î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            —Å–ª–∞–≤—è–Ω—Å–∫–∞—è –º–æ–¥–µ–ª—å 'eslav_PP-OCRv5_mobile_rec'.
        """
        if not PADDLE_AVAILABLE:
            raise RuntimeError("PaddleOCR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install paddleocr paddlepaddle-gpu")

        self.lang = lang
        self.debug_mode = False
        self.debug_dir = Path("data/screenshots/debug/ocr")
        self.debug_dir.mkdir(parents=True, exist_ok=True)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
        use_gpu = False
        if not force_cpu:
            try:
                use_gpu = paddle.device.is_compiled_with_cuda()
                if use_gpu:
                    gpu_count = paddle.device.cuda.device_count()
                    logger.info(f"üéÆ GPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {gpu_count}")
                else:
                    logger.warning("‚ö†Ô∏è GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
                use_gpu = False
        else:
            logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR 3.x —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–ª–∞–≤—è–Ω—Å–∫–æ–π –º–æ–¥–µ–ª—å—é
        try:
            device = 'gpu:0' if use_gpu else 'cpu'

            if lang == 'ru':
                logger.info("üîß –ó–∞–≥—Ä—É–∂–∞—é —Å–ª–∞–≤—è–Ω—Å–∫—É—é –º–æ–¥–µ–ª—å —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π...")

                # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ PaddleOCR 3.x
                self.ocr = PaddleOCR(
                    text_recognition_model_name="eslav_PP-OCRv5_mobile_rec",  # –°–ª–∞–≤—è–Ω—Å–∫–∞—è –º–æ–¥–µ–ª—å
                    use_doc_orientation_classify=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    use_doc_unwarping=False,
                    use_textline_orientation=True,  # –í–∫–ª—é—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫
                    device=device,
                )
                logger.success(f"‚úÖ OCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–º–æ–¥–µ–ª—å: eslav, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device})")
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
                self.ocr = PaddleOCR(
                    lang=lang,
                    device=device,
                    use_doc_orientation_classify=False,
                    use_doc_unwarping=False,
                    use_textline_orientation=True,
                )
                logger.success(f"‚úÖ OCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—è–∑—ã–∫: {lang}, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device})")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OCR: {e}")
            import traceback
            logger.error(traceback.format_exc())
            raise

    def set_debug_mode(self, enabled: bool):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å debug —Ä–µ–∂–∏–º (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å bbox)"""
        self.debug_mode = enabled
        logger.info(f"üêõ Debug —Ä–µ–∂–∏–º: {'–í–ö–õ' if enabled else '–í–´–ö–õ'}")

    def recognize_text(
        self,
        image: np.ndarray,
        region: Optional[Tuple[int, int, int, int]] = None,
        min_confidence: float = 0.3
    ) -> List[Dict[str, Any]]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞

        Args:
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (BGR —Ñ–æ—Ä–º–∞—Ç)
            region: –†–µ–≥–∏–æ–Ω –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (x1, y1, x2, y2)
            min_confidence: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0.3 –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Ü–∏—Ñ—Ä)

        Returns:
            –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º, bbox –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        """
        # –ò–∑–≤–ª–µ—á—å —Ä–µ–≥–∏–æ–Ω –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if region:
            x1, y1, x2, y2 = region
            crop = image[y1:y2, x1:x2]
        else:
            crop = image
            x1, y1 = 0, 0

        # –ó–∞–ø—É—Å–∫ OCR (PaddleOCR 3.x API)
        try:
            # –í PaddleOCR 3.x –º–µ—Ç–æ–¥ predict –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result = self.ocr.predict(crop)

            logger.debug(f"üîç OCR result type: {type(result)}")

            # result - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ OCRResult –æ–±—ä–µ–∫—Ç–æ–≤ (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)
            if hasattr(result, '__iter__') and not isinstance(result, (list, dict)):
                result = list(result)
                logger.debug(f"üîç Converted generator to list, length: {len(result)}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OCR: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return []

        # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (PaddleOCR 3.x)
        elements = []

        try:
            if isinstance(result, list) and len(result) > 0:
                ocr_result = result[0]

                logger.debug(f"üîç OCRResult type: {type(ocr_result)}")

                # OCRResult —ç—Ç–æ dict-like –æ–±—ä–µ–∫—Ç
                boxes = None
                texts = None
                scores = None

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if hasattr(ocr_result, 'keys'):
                    logger.debug(f"üîç OCRResult keys: {list(ocr_result.keys())}")

                    # dt_polys - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bbox
                    if 'dt_polys' in ocr_result:
                        boxes = ocr_result['dt_polys']
                        logger.debug(f"üîç Found dt_polys: type={type(boxes)}, len={len(boxes)}")

                    # rec_texts - —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
                    if 'rec_texts' in ocr_result:
                        texts = ocr_result['rec_texts']
                        logger.debug(f"üîç Found rec_texts: type={type(texts)}, len={len(texts)}")

                    # rec_scores - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                    if 'rec_scores' in ocr_result:
                        scores = ocr_result['rec_scores']
                        logger.debug(f"üîç Found rec_scores: type={type(scores)}, len={len(scores)}")

                logger.debug(f"üì¶ Final data - boxes: {boxes is not None}, texts: {texts is not None}, scores: {scores is not None}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                if texts is not None and boxes is not None and scores is not None:
                    try:
                        logger.debug(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(texts)}")

                        for idx, (text, box, score) in enumerate(zip(texts, boxes, scores)):
                            # –§–∏–ª—å—Ç—Ä –ø–æ confidence
                            if score < min_confidence:
                                continue

                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º box –≤ —Ñ–æ—Ä–º–∞—Ç [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]
                            if isinstance(box, np.ndarray):
                                # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                                xs = box[:, 0]
                                ys = box[:, 1]
                                x_min, x_max = int(np.min(xs)), int(np.max(xs))
                                y_min, y_max = int(np.min(ys)), int(np.max(ys))
                            else:
                                # –ï—Å–ª–∏ box —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                                x_min = min(p[0] for p in box)
                                x_max = max(p[0] for p in box)
                                y_min = min(p[1] for p in box)
                                y_max = max(p[1] for p in box)

                            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            center_x = x1 + (x_min + x_max) // 2
                            center_y = y1 + (y_min + y_max) // 2

                            elements.append({
                                'text': text,
                                'confidence': float(score),
                                'bbox': box.tolist() if isinstance(box, np.ndarray) else box,
                                'x': center_x,
                                'y': center_y,
                                'x_min': x1 + x_min,
                                'y_min': y1 + y_min,
                                'x_max': x1 + x_max,
                                'y_max': y1 + y_max,
                            })

                        logger.info(f"üìä OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                        import traceback
                        logger.error(traceback.format_exc())

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            import traceback
            logger.error(traceback.format_exc())

        # Debug —Ä–µ–∂–∏–º - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å bbox
        if self.debug_mode and elements:
            self._save_debug_screenshot(crop, elements, region)

        return elements

    def parse_level(self, text: str) -> Optional[int]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –∑–¥–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª–µ—Ä–∞–Ω—Ç–µ–Ω –∫ –æ—à–∏–±–∫–∞–º OCR)

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞

        Returns:
            –£—Ä–æ–≤–µ–Ω—å –∑–¥–∞–Ω–∏—è –∏–ª–∏ None

        Examples:
            >>> parse_level("Lv.10")
            10
            >>> parse_level("Ly.5")  # OCR –æ—à–∏–±–∫–∞: v ‚Üí y
            5
            >>> parse_level("L—É.7")  # OCR –æ—à–∏–±–∫–∞: v ‚Üí —É (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞)
            7
            >>> parse_level("Level 3")
            3
        """
        # –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (—É—á–∏—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ OCR)
        patterns = [
            r'[Ll–õ–ª][vV—É–£yY–≤–í]\.?\s*(\d+)',  # Lv, Ly, L—É, L–£ –∏ —Ç.–¥.
            r'Level\s*(\d+)',                 # Level 10
            r'–£—Ä\.?\s*(\d+)',                 # –£—Ä. 10
            r'—É—Ä–æ–≤–µ–Ω—å\s*(\d+)',               # —É—Ä–æ–≤–µ–Ω—å 10
        ]

        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return int(match.group(1))

        return None

    def parse_timer(self, text: str) -> Optional[Dict[str, int]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–π–º–µ—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —á–∞—Å–∞–º–∏, –º–∏–Ω—É—Ç–∞–º–∏, —Å–µ–∫—É–Ω–¥–∞–º–∏ –∏–ª–∏ None

        Examples:
            >>> parse_timer("10:41:48")
            {'hours': 10, 'minutes': 41, 'seconds': 48, 'total_seconds': 38508}
            >>> parse_timer("05:30")
            {'hours': 0, 'minutes': 5, 'seconds': 30, 'total_seconds': 330}
        """
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
        patterns = [
            r'(\d{1,2}):(\d{2}):(\d{2})',  # HH:MM:SS
            r'(\d{1,2}):(\d{2})',          # MM:SS
        ]

        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                groups = match.groups()

                if len(groups) == 3:
                    # HH:MM:SS
                    hours, minutes, seconds = map(int, groups)
                else:
                    # MM:SS
                    hours = 0
                    minutes, seconds = map(int, groups)

                total_seconds = hours * 3600 + minutes * 60 + seconds

                return {
                    'hours': hours,
                    'minutes': minutes,
                    'seconds': seconds,
                    'total_seconds': total_seconds
                }

        return None

    def parse_building_name(self, text: str) -> str:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏—è (—É–±–∏—Ä–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ –∏ –∫–Ω–æ–ø–∫–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã)

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞

        Returns:
            –û—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è

        Examples:
            >>> parse_building_name("–ñ–∏–ª–∏—â–µ –õ–µ–º—É—Ä–æ–≤ I Lv.10 –ü–µ—Ä–µ–π—Ç–∏")
            "–ñ–∏–ª–∏—â–µ –õ–µ–º—É—Ä–æ–≤ I"
            >>> parse_building_name("–õ–æ–≥–æ–≤–æ –•–∏—â–Ω–∏–∫–æ–≤ II Ly.5 –ü–µ—Ä–µ–π—Ç–∏")
            "–õ–æ–≥–æ–≤–æ –•–∏—â–Ω–∏–∫–æ–≤ II"
        """
        # –£–±–∏—Ä–∞–µ–º —É—Ä–æ–≤–Ω–∏ (Lv.X, Ly.X –∏ —Ç.–¥.)
        text = re.sub(r'[Ll–õ–ª][vV—É–£yY–≤–í]\.?\s*\d+', '', text, flags=re.IGNORECASE)

        # –£–±–∏—Ä–∞–µ–º "–ü–µ—Ä–µ–π—Ç–∏" –∏ –µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        text = re.sub(r'[–ü–øPp][–µe–ïE][—Äp–†P][–µe–ïE][–π–∏ƒ≠–Ü—ñ][—Çt–¢T][–∏i–Ü—ñ]', '', text, flags=re.IGNORECASE)

        # –ù–ï —É–±–∏—Ä–∞–µ–º —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã - –æ–Ω–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏—è!
        # –û–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ (–ñ–∏–ª–∏—â–µ I, –ñ–∏–ª–∏—â–µ II, –∏ —Ç.–¥.)

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = ' '.join(text.split())

        return text.strip()

    def group_by_rows(self, elements: List[Dict[str, Any]], y_threshold: int = 20) -> List[List[Dict[str, Any]]]:
        """
        –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç

        Args:
            elements: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            y_threshold: –ü–æ—Ä–æ–≥ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (–ø–∏–∫—Å–µ–ª–∏)

        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
        """
        if not elements:
            return []

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ Y
        sorted_elements = sorted(elements, key=lambda e: e['y'])

        rows = []
        current_row = [sorted_elements[0]]

        for elem in sorted_elements[1:]:
            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –±–ª–∏–∑–∫–æ –ø–æ Y –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ - –¥–æ–±–∞–≤–ª—è–µ–º
            if abs(elem['y'] - current_row[0]['y']) <= y_threshold:
                current_row.append(elem)
            else:
                # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ X
                current_row.sort(key=lambda e: e['x'])
                rows.append(current_row)
                current_row = [elem]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
        if current_row:
            current_row.sort(key=lambda e: e['x'])
            rows.append(current_row)

        logger.info(f"üìä –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ {len(rows)} —Å—Ç—Ä–æ–∫")
        return rows

    def parse_navigation_panel(
        self,
        screenshot: np.ndarray,
        emulator_id: Optional[str] = None
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Å–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π)

        Args:
            screenshot: –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞ (–¥–ª—è debug)

        Returns:
            –°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏"
        """
        # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        elements = self.recognize_text(screenshot, min_confidence=0.3)

        if not elements:
            logger.warning("‚ö†Ô∏è OCR –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞")
            return []

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        rows = self.group_by_rows(elements, y_threshold=20)

        buildings = []

        for row in rows:
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏
            row_text = ' '.join([elem['text'] for elem in row])
            logger.debug(f"üìù –°—Ç—Ä–æ–∫–∞: {row_text}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—Ä–æ–≤–Ω—è
            level = self.parse_level(row_text)
            if level is None:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏"
            has_button = any(
                re.search(r'[–ü–øPp][–µe–ïE][—Äp–†P][–µe–ïE][–π–∏ƒ≠–Ü—ñ][—Çt–¢T][–∏i–Ü—ñ]', elem['text'], re.IGNORECASE)
                for elem in row
            )

            if not has_button:
                continue

            # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
            building_name = self.parse_building_name(row_text)

            if not building_name:
                continue

            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏" (–æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—Ç—Ä–æ–∫–µ)
            button_elem = row[-1]
            button_y = button_elem['y']

            buildings.append({
                'name': building_name,
                'level': level,
                'y': button_y,
                'raw_text': row_text
            })

            logger.info(f"‚úÖ –ó–¥–∞–Ω–∏–µ: {building_name} Lv.{level} (Y: {button_y})")

        return buildings

    def _save_debug_screenshot(
        self,
        image: np.ndarray,
        elements: List[Dict],
        region: Optional[Tuple] = None
    ):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å debug —Å–∫—Ä–∏–Ω—à–æ—Ç —Å bbox"""
        try:
            debug_img = image.copy()

            for elem in elements:
                # –†–∏—Å—É–µ–º bbox
                box = elem['bbox']
                if isinstance(box, np.ndarray):
                    box = box.astype(int)
                else:
                    box = np.array(box, dtype=int)

                cv2.polylines(debug_img, [box], True, (0, 255, 0), 2)

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                text = elem['text']
                confidence = elem['confidence']
                label = f"{text} ({confidence:.2f})"

                # –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
                if len(box) > 0:
                    x, y = int(box[0][0]), int(box[0][1]) - 5
                    cv2.putText(debug_img, label, (x, y), cv2.FONT_HERSHEY_SIMPLEX,
                              0.5, (0, 255, 0), 1, cv2.LINE_AA)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            timestamp = datetime.now().strftime("%H%M%S")
            filename = f"emu1_navigation_{timestamp}.png"
            filepath = self.debug_dir / filename
            cv2.imwrite(str(filepath), debug_img)
            logger.info(f"üêõ Debug —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filepath}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è debug —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")