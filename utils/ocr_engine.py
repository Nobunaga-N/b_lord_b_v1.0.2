"""
OCR –¥–≤–∏–∂–æ–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∏–≥—Ä–µ Beast Lord

–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ PaddleOCR 3.2.0 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π GPU
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∏–≥—Ä—ã
"""

import re
import os
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple
import numpy as np
import cv2
from loguru import logger

try:
    from paddleocr import PaddleOCR
    import paddle
    PADDLE_AVAILABLE = True
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ PaddleOCR: {e}")
    PADDLE_AVAILABLE = False


class OCREngine:
    """
    OCR –¥–≤–∏–∂–æ–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

    Features:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ GPU/CPU
    - –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ + –ª–∞—Ç–∏–Ω–∏—Ü–∞)
    - –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω–µ–π –∑–¥–∞–Ω–∏–π (Lv.X)
    - –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–π–º–µ—Ä–æ–≤ (HH:MM:SS)
    - –ü–æ—Å—Ç—Ä–æ—á–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    - Debug —Ä–µ–∂–∏–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º bbox
    """

    def __init__(self, lang: str = 'ru', force_cpu: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR –¥–≤–∏–∂–∫–∞

        Args:
            lang: –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ('ru', 'en', 'ch')
            force_cpu: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CPU
        """
        if not PADDLE_AVAILABLE:
            raise RuntimeError("PaddleOCR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install paddleocr paddlepaddle-gpu")

        self.lang = lang
        self.debug_mode = False
        self.debug_dir = Path("data/screenshots/debug/ocr")
        self.debug_dir.mkdir(parents=True, exist_ok=True)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
        use_gpu = False
        if not force_cpu:
            try:
                use_gpu = paddle.device.is_compiled_with_cuda()
                if use_gpu:
                    gpu_count = paddle.device.cuda.device_count()
                    logger.info(f"üéÆ GPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {gpu_count}")
                else:
                    logger.warning("‚ö†Ô∏è GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
                use_gpu = False
        else:
            logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR 3.2.0
        # –í –≤–µ—Ä—Å–∏–∏ 3.x –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å: use_gpu -> device
        try:
            device = 'gpu' if use_gpu else 'cpu'
            self.ocr = PaddleOCR(
                lang=lang,
                device=device  # 'gpu' –∏–ª–∏ 'cpu'
            )
            logger.success(f"‚úÖ OCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—è–∑—ã–∫: {lang}, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OCR: {e}")
            raise

    def set_debug_mode(self, enabled: bool):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å debug —Ä–µ–∂–∏–º (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å bbox)"""
        self.debug_mode = enabled
        logger.info(f"üêõ Debug —Ä–µ–∂–∏–º: {'–í–ö–õ' if enabled else '–í–´–ö–õ'}")

    def recognize_text(
        self,
        image: np.ndarray,
        region: Optional[Tuple[int, int, int, int]] = None,
        min_confidence: float = 0.3
    ) -> List[Dict[str, Any]]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞

        Args:
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (BGR —Ñ–æ—Ä–º–∞—Ç)
            region: –†–µ–≥–∏–æ–Ω –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (x1, y1, x2, y2)
            min_confidence: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0.3 –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Ü–∏—Ñ—Ä)

        Returns:
            –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º, bbox –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        """
        # –ò–∑–≤–ª–µ—á—å —Ä–µ–≥–∏–æ–Ω –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if region:
            x1, y1, x2, y2 = region
            crop = image[y1:y2, x1:x2]
        else:
            crop = image
            x1, y1 = 0, 0

        # –ó–∞–ø—É—Å–∫ OCR (PaddleX 3.2.0 API)
        try:
            result = self.ocr.predict(crop)

            # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"üîç OCR result type: {type(result)}")

            if isinstance(result, list) and len(result) > 0:
                logger.debug(f"üîç OCR result list length: {len(result)}")
                first_elem = result[0]
                logger.debug(f"üîç First element type: {type(first_elem)}")

                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç OCRResult, –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç—ã
                if hasattr(first_elem, '__dict__'):
                    logger.debug(f"üîç OCRResult attributes: {list(first_elem.__dict__.keys())}")
                    # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    for attr in ['boxes', 'dt_polys', 'rec_text', 'texts', 'rec_score', 'scores']:
                        if hasattr(first_elem, attr):
                            value = getattr(first_elem, attr)
                            logger.debug(f"üîç OCRResult.{attr}: {type(value)} = {str(value)[:200]}")

                # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ json() –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(first_elem, 'json'):
                    try:
                        json_data = first_elem.json()
                        logger.debug(f"üîç OCRResult.json(): {str(json_data)[:300]}")
                    except:
                        pass

                # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ dict
                if hasattr(first_elem, 'to_dict'):
                    try:
                        dict_data = first_elem.to_dict()
                        logger.debug(f"üîç OCRResult.to_dict(): {str(dict_data)[:300]}")
                    except:
                        pass

            elif isinstance(result, dict):
                logger.debug(f"üîç OCR result keys: {list(result.keys())}")
                for key, value in result.items():
                    value_str = str(value)[:200]
                    logger.debug(f"üîç result['{key}']: {value_str}...")
            else:
                logger.debug(f"üîç OCR result: {str(result)[:200]}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OCR: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return []

        # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (PaddleX 3.2.0)
        elements = []

        # –í–∞—Ä–∏–∞–Ω—Ç 1: –†–µ–∑—É–ª—å—Ç–∞—Ç - —Å–ø–∏—Å–æ–∫ —Å –æ–±—ä–µ–∫—Ç–æ–º OCRResult
        if isinstance(result, list) and len(result) > 0:
            ocr_result = result[0]

            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ OCRResult –æ–±—ä–µ–∫—Ç–∞
            boxes = None
            texts = None
            scores = None

            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            for box_attr in ['boxes', 'dt_polys', 'bbox', 'bboxes']:
                if hasattr(ocr_result, box_attr):
                    boxes = getattr(ocr_result, box_attr)
                    break

            for text_attr in ['texts', 'rec_text', 'text', 'rec_texts']:
                if hasattr(ocr_result, text_attr):
                    texts = getattr(ocr_result, text_attr)
                    break

            for score_attr in ['scores', 'rec_score', 'score', 'confidences']:
                if hasattr(ocr_result, score_attr):
                    scores = getattr(ocr_result, score_attr)
                    break

            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω—ã–µ, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            if boxes is not None and texts is not None:
                logger.debug(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ: boxes={len(boxes)}, texts={len(texts)}")

                # –ï—Å–ª–∏ scores –Ω–µ—Ç, —Å–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –µ–¥–∏–Ω–∏—Ü
                if scores is None:
                    scores = [1.0] * len(texts)

                # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
                for i, (bbox, text) in enumerate(zip(boxes, texts)):
                    confidence = scores[i] if i < len(scores) else 1.0

                    # –§–∏–ª—å—Ç—Ä –ø–æ confidence
                    if confidence < min_confidence:
                        continue

                    # bbox –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                    if isinstance(bbox, (list, tuple)) and len(bbox) >= 4:
                        # –§–æ—Ä–º–∞—Ç: [[x1,y1], [x2,y2], [x3,y3], [x4,y4]]
                        if isinstance(bbox[0], (list, tuple)) and len(bbox[0]) >= 2:
                            x_coords = [p[0] for p in bbox]
                            y_coords = [p[1] for p in bbox]
                            center_x = int(sum(x_coords) / len(x_coords)) + x1
                            center_y = int(sum(y_coords) / len(y_coords)) + y1

                            elements.append({
                                'text': str(text),
                                'confidence': float(confidence),
                                'x': center_x,
                                'y': center_y,
                                'bbox': [[p[0] + x1, p[1] + y1] for p in bbox]
                            })
                        # –§–æ—Ä–º–∞—Ç: [x1, y1, x2, y2]
                        elif all(isinstance(x, (int, float)) for x in bbox):
                            center_x = int((bbox[0] + bbox[2]) / 2) + x1
                            center_y = int((bbox[1] + bbox[3]) / 2) + y1

                            elements.append({
                                'text': str(text),
                                'confidence': float(confidence),
                                'x': center_x,
                                'y': center_y,
                                'bbox': [
                                    [bbox[0] + x1, bbox[1] + y1],
                                    [bbox[2] + x1, bbox[1] + y1],
                                    [bbox[2] + x1, bbox[3] + y1],
                                    [bbox[0] + x1, bbox[3] + y1]
                                ]
                            })

        # –í–∞—Ä–∏–∞–Ω—Ç 2: –†–µ–∑—É–ª—å—Ç–∞—Ç - dict (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
        elif isinstance(result, dict):
            # ... (–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            pass

        logger.debug(f"üìä OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        return elements

    def parse_level(self, text: str) -> Optional[int]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –∑–¥–∞–Ω–∏—è (—Ç–æ–ª–µ—Ä–∞–Ω—Ç–µ–Ω –∫ –æ—à–∏–±–∫–∞–º OCR)

        –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç:
        - Lv.10, Ly.5, L—É.7 (OCR –∏–Ω–æ–≥–¥–∞ –ø—É—Ç–∞–µ—Ç v/y/—É)
        - Level 10
        - –£—Ä.10

        Returns:
            –£—Ä–æ–≤–µ–Ω—å –∑–¥–∞–Ω–∏—è –∏–ª–∏ None
        """
        patterns = [
            r'[Ll–õ–ª][vV—É–£yY–≤–í]\.?\s*(\d+)',  # Lv, Ly, L—É, L–£
            r'Level\s*(\d+)',
            r'–£—Ä\.?\s*(\d+)',
        ]

        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return int(match.group(1))

        return None

    def parse_timer(self, text: str) -> Optional[Dict[str, int]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–π–º–µ—Ä–∞ (HH:MM:SS –∏–ª–∏ MM:SS)

        Args:
            text: –°—Ç—Ä–æ–∫–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º

        Returns:
            {'hours': int, 'minutes': int, 'seconds': int, 'total_seconds': int}
        """
        # –§–æ—Ä–º–∞—Ç: HH:MM:SS –∏–ª–∏ MM:SS
        pattern = r'(\d+):(\d+):(\d+)'
        match = re.search(pattern, text)

        if match:
            parts = [int(x) for x in match.groups()]

            if len(parts) == 3:
                if parts[0] < 24:  # HH:MM:SS
                    hours, minutes, seconds = parts
                else:  # MM:SS (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ - –º–∏–Ω—É—Ç—ã)
                    hours = 0
                    minutes, seconds = parts[0], parts[1]
            else:
                return None

            total_seconds = hours * 3600 + minutes * 60 + seconds

            return {
                'hours': hours,
                'minutes': minutes,
                'seconds': seconds,
                'total_seconds': total_seconds
            }

        return None

    def parse_building_name(self, text: str) -> str:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏—è (–æ—á–∏—Å—Ç–∫–∞ –æ—Ç –º—É—Å–æ—Ä–∞)

        –£–¥–∞–ª—è–µ—Ç:
        - –£—Ä–æ–≤–Ω–∏ (Lv.X, Ly.X)
        - –ö–Ω–æ–ø–∫–∏ (–ü–µ—Ä–µ–π—Ç–∏)
        - –†–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã (I, II, III, IV)

        Examples:
            "–ñ–∏–ª–∏—â–µ –õ–µ–º—É—Ä–æ–≤ I Lv.10" -> "–ñ–∏–ª–∏—â–µ –õ–µ–º—É—Ä–æ–≤"
            "–§–µ—Ä–º–∞ –ü–µ—Å–∫–∞ –ü–µ—Ä–µ–π—Ç–∏" -> "–§–µ—Ä–º–∞ –ü–µ—Å–∫–∞"
        """
        # –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–≤–Ω–∏
        text = re.sub(r'[Ll–õ–ª][vV—É–£yY–≤–í]\.?\s*\d+', '', text, flags=re.IGNORECASE)

        # –£–¥–∞–ª–∏—Ç—å "–ü–µ—Ä–µ–π—Ç–∏"
        text = re.sub(r'–ü–µ—Ä–µ–π—Ç–∏|–µ—Ä–µ—õ—Ç–∏|–ü–µ—Ä–µ–∏—Ç–∏', '', text, flags=re.IGNORECASE)

        # –£–¥–∞–ª–∏—Ç—å —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ
        text = re.sub(r'\s+[IVX]+\s*$', '', text)

        # –£–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = ' '.join(text.split())

        return text.strip()

    def group_by_rows(
        self,
        elements: List[Dict[str, Any]],
        y_threshold: int = 20
    ) -> List[List[Dict[str, Any]]]:
        """
        –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç

        Args:
            elements: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            y_threshold: –ü–æ—Ä–æ–≥ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É (px)

        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
        """
        if not elements:
            return []

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ Y
        sorted_elements = sorted(elements, key=lambda x: x['y'])

        rows = []
        current_row = [sorted_elements[0]]

        for elem in sorted_elements[1:]:
            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –±–ª–∏–∑–∫–æ –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
            if abs(elem['y'] - current_row[0]['y']) <= y_threshold:
                current_row.append(elem)
            else:
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ X
                current_row.sort(key=lambda x: x['x'])
                rows.append(current_row)
                current_row = [elem]

        # –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
        if current_row:
            current_row.sort(key=lambda x: x['x'])
            rows.append(current_row)

        return rows

    def parse_navigation_panel(
        self,
        screenshot: np.ndarray,
        emulator_id: Optional[int] = None
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π —Å —É—Ä–æ–≤–Ω—è–º–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏"

        Args:
            screenshot: –°–∫—Ä–∏–Ω—à–æ—Ç –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞ (–¥–ª—è debug)

        Returns:
            [
                {
                    'name': '–ñ–∏–ª–∏—â–µ –î–µ—Ç–µ–Ω—ã—à–µ–π',
                    'level': 7,
                    'y_coord': 582,
                    'button_coord': (330, 582)
                },
                ...
            ]
        """
        # –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        elements = self.recognize_text(screenshot, min_confidence=0.3)

        logger.info(f"üìä OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        # Debug —Ä–µ–∂–∏–º: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å RAW —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if self.debug_mode and emulator_id is not None:
            self._save_debug_screenshot(screenshot, elements, [], emulator_id)

        if not elements:
            logger.warning("‚ö†Ô∏è OCR –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞")
            return []

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        rows = self.group_by_rows(elements, y_threshold=20)

        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
        buildings = []
        for row in rows:
            building_name = None
            building_level = None
            row_y = row[0]['y']  # Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Å—Ç—Ä–æ–∫–∏

            for elem in row:
                # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å
                level = self.parse_level(elem['text'])
                if level:
                    building_level = level
                # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
                elif len(elem['text']) > 3 and '–ü–µ—Ä–µ–π—Ç–∏' not in elem['text']:
                    building_name = self.parse_building_name(elem['text'])

            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —É—Ä–æ–≤–µ–Ω—å
            if building_name and building_level:
                buildings.append({
                    'name': building_name,
                    'level': building_level,
                    'y_coord': row_y,
                    'button_coord': (330, row_y)  # –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏" –≤—Å–µ–≥–¥–∞ –Ω–∞ X=330
                })

        # Debug —Ä–µ–∂–∏–º: –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∑–¥–∞–Ω–∏—è–º–∏
        if self.debug_mode and emulator_id is not None and buildings:
            self._save_debug_screenshot(screenshot, elements, buildings, emulator_id)

        logger.info(f"üè¢ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∑–¥–∞–Ω–∏–π: {len(buildings)}")
        return buildings

    def _save_debug_screenshot(
        self,
        screenshot: np.ndarray,
        elements: List[Dict[str, Any]],
        buildings: List[Dict[str, Any]],
        emulator_id: int
    ):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å debug —Å–∫—Ä–∏–Ω—à–æ—Ç —Å bbox –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
        try:
            debug_img = screenshot.copy()

            # –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å bbox –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            for elem in elements:
                bbox = elem['bbox']
                pts = np.array(bbox, dtype=np.int32)
                cv2.polylines(debug_img, [pts], True, (0, 255, 0), 2)

                # –ü–æ–¥–ø–∏—Å—å —Å —Ç–µ–∫—Å—Ç–æ–º
                text = f"{elem['text']} ({elem['confidence']:.2f})"
                cv2.putText(
                    debug_img, text,
                    (int(bbox[0][0]), int(bbox[0][1]) - 5),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1
                )

            # –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è
            for i, building in enumerate(buildings):
                y = building['y_coord']
                # –õ–∏–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Å—é —Å—Ç—Ä–æ–∫—É
                cv2.line(debug_img, (0, y), (540, y), (255, 0, 0), 2)
                # –¢–æ—á–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏"
                cv2.circle(debug_img, building['button_coord'], 5, (0, 0, 255), -1)

            # –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            info_text = f"Elements: {len(elements)}, Buildings: {len(buildings)}"
            cv2.putText(
                debug_img, info_text,
                (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2
            )

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            timestamp = datetime.now().strftime("%H%M%S")
            filename = f"emu{emulator_id}_navigation_{timestamp}.png"
            filepath = self.debug_dir / filename
            cv2.imwrite(str(filepath), debug_img)
            logger.success(f"üêõ Debug —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filepath}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è debug —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())