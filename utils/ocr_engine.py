"""
OCR –¥–≤–∏–∂–æ–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∏–≥—Ä–µ Beast Lord

–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ PaddleX 3.2.x —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π GPU
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∏–≥—Ä—ã
"""

import re
import os
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple
import numpy as np
import cv2
from loguru import logger

try:
    from paddlex import create_pipeline
    import paddle
    PADDLE_AVAILABLE = True
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ PaddleX: {e}")
    PADDLE_AVAILABLE = False


class OCREngine:
    """
    OCR –¥–≤–∏–∂–æ–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (PaddleX 3.2.x)

    Features:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ GPU/CPU
    - –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ + –ª–∞—Ç–∏–Ω–∏—Ü–∞)
    - –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω–µ–π –∑–¥–∞–Ω–∏–π (Lv.X)
    - –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–π–º–µ—Ä–æ–≤ (HH:MM:SS)
    - –ü–æ—Å—Ç—Ä–æ—á–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    - Debug —Ä–µ–∂–∏–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º bbox
    """

    def __init__(self, lang: str = 'ru', force_cpu: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR –¥–≤–∏–∂–∫–∞

        Args:
            lang: –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ('ru', 'en', 'ch')
            force_cpu: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CPU

        Note:
            –î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            —Å–ª–∞–≤—è–Ω—Å–∫–∞—è –º–æ–¥–µ–ª—å 'eslav_PP-OCRv5_mobile_rec'.

            –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:
            pip install paddlex-eslav

            –ò–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å:
            https://paddleocr.bj.bcebos.com/dygraph_v2.0/multilingual/
        """
        if not PADDLE_AVAILABLE:
            raise RuntimeError("PaddleX –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install paddlex paddlepaddle-gpu")

        self.lang = lang
        self.debug_mode = False
        self.debug_dir = Path("data/screenshots/debug/ocr")
        self.debug_dir.mkdir(parents=True, exist_ok=True)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
        use_gpu = False
        if not force_cpu:
            try:
                use_gpu = paddle.device.is_compiled_with_cuda()
                if use_gpu:
                    gpu_count = paddle.device.cuda.device_count()
                    logger.info(f"üéÆ GPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {gpu_count}")
                else:
                    logger.warning("‚ö†Ô∏è GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
                use_gpu = False
        else:
            logger.info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleX 3.2.x pipeline
        try:
            device = 'gpu:0' if use_gpu else 'cpu'

            if lang == 'ru':
                # –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π + –ª–∞—Ç–∏–Ω–∏—Ü–µ–π + —Ü–∏—Ñ—Ä–∞–º–∏
                cyrillic_chars = (
                    "0123456789"
                    "abcdefghijklmnopqrstuvwxyz"
                    "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                    "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
                    "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
                    ".:,-()!?/\\ "
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                dict_path = self.debug_dir / "cyrillic_dict.txt"
                with open(dict_path, 'w', encoding='utf-8') as f:
                    for char in cyrillic_chars:
                        f.write(char + '\n')

                logger.info(f"üìù –°–æ–∑–¥–∞–Ω –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å: {dict_path}")

                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å pipeline —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
                try:
                    # –í–ê–†–ò–ê–ù–¢ 1: –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º rec_char_dict_path
                    self.pipeline = create_pipeline(
                        pipeline="OCR",
                        device=device,
                        det_model="PP-OCRv5_server_det",
                        rec_model="PP-OCRv5_server_rec",
                        rec_char_dict_path=str(dict_path)  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
                    )
                    logger.success(f"‚úÖ OCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º —Å–ª–æ–≤–∞—Ä—ë–º (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device})")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Å–ª–æ–≤–∞—Ä—ë–º: {e}")

                    # –í–ê–†–ò–ê–ù–¢ 2: Fallback –Ω–∞ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—É—é –º–æ–¥–µ–ª—å
                    try:
                        logger.info("üîÑ –ü—Ä–æ–±—É—é –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—É—é –º–æ–¥–µ–ª—å...")
                        self.pipeline = create_pipeline(
                            pipeline="OCR",
                            device=device,
                            language="cyrillic"  # –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
                        )
                        logger.success(f"‚úÖ OCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–º–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –º–æ–¥–µ–ª—å, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device})")
                    except Exception as e2:
                        logger.error(f"‚ùå –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –º–æ–¥–µ–ª—å —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e2}")

                        # –í–ê–†–ò–ê–ù–¢ 3: –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
                        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –º–æ–¥–µ–ª—å (–±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)")
                        self.pipeline = create_pipeline(
                            pipeline="OCR",
                            device=device
                        )
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
                self.pipeline = create_pipeline(
                    pipeline="OCR",
                    device=device
                )
                logger.success(f"‚úÖ OCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—è–∑—ã–∫: {lang}, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device})")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OCR: {e}")
            import traceback
            logger.error(traceback.format_exc())
            raise

    def set_debug_mode(self, enabled: bool):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å debug —Ä–µ–∂–∏–º (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å bbox)"""
        self.debug_mode = enabled
        logger.info(f"üêõ Debug —Ä–µ–∂–∏–º: {'–í–ö–õ' if enabled else '–í–´–ö–õ'}")

    def recognize_text(
        self,
        image: np.ndarray,
        region: Optional[Tuple[int, int, int, int]] = None,
        min_confidence: float = 0.3
    ) -> List[Dict[str, Any]]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞

        Args:
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (BGR —Ñ–æ—Ä–º–∞—Ç)
            region: –†–µ–≥–∏–æ–Ω –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (x1, y1, x2, y2)
            min_confidence: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0.3 –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Ü–∏—Ñ—Ä)

        Returns:
            –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º, bbox –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        """
        # –ò–∑–≤–ª–µ—á—å —Ä–µ–≥–∏–æ–Ω –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if region:
            x1, y1, x2, y2 = region
            crop = image[y1:y2, x1:x2]
        else:
            crop = image
            x1, y1 = 0, 0

        # –ó–∞–ø—É—Å–∫ OCR (PaddleX 3.2.x API)
        try:
            # PaddleX 3.x –ø—Ä–∏–Ω–∏–º–∞–µ—Ç numpy array –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            result = self.pipeline.predict(crop)

            logger.debug(f"üîç OCR result type: {type(result)}")

            # –í PaddleX 3.2.x —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
            if hasattr(result, '__iter__') and not isinstance(result, (list, dict)):
                result = list(result)
                logger.debug(f"üîç Converted generator to list, length: {len(result)}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OCR: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return []

        # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (PaddleX 3.2.x)
        elements = []

        try:
            # –í PaddleX 3.x —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ —Å–ø–∏—Å–æ–∫ OCRResult –æ–±—ä–µ–∫—Ç–æ–≤
            if isinstance(result, list) and len(result) > 0:
                ocr_result = result[0]

                # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.debug(f"üîç OCRResult type: {type(ocr_result)}")

                # OCRResult —ç—Ç–æ dict-like –æ–±—ä–µ–∫—Ç, —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ —Å–æ —Å–ª–æ–≤–∞—Ä—ë–º
                if hasattr(ocr_result, 'keys'):
                    logger.debug(f"üîç OCRResult keys: {list(ocr_result.keys())}")

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                boxes = None
                texts = None
                scores = None

                # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                # PaddleX 3.x –∏—Å–ø–æ–ª—å–∑—É–µ—Ç dict-like —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if hasattr(ocr_result, 'keys'):
                    # –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç bbox
                    for box_key in ['dt_polys', 'rec_polys', 'boxes', 'bbox', 'dt_boxes', 'bboxes']:
                        if box_key in ocr_result:
                            boxes = ocr_result[box_key]
                            logger.debug(f"üîç Found {box_key}: type={type(boxes)}, len={len(boxes) if hasattr(boxes, '__len__') else 'N/A'}")
                            break

                    # –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤
                    for text_key in ['rec_texts', 'rec_text', 'texts', 'text', 'ocr_text']:
                        if text_key in ocr_result:
                            texts = ocr_result[text_key]
                            logger.debug(f"üîç Found {text_key}: type={type(texts)}, len={len(texts) if hasattr(texts, '__len__') else 'N/A'}")
                            break

                    # –ü–æ–∏—Å–∫ scores
                    for score_key in ['rec_scores', 'rec_score', 'scores', 'score', 'confidence']:
                        if score_key in ocr_result:
                            scores = ocr_result[score_key]
                            logger.debug(f"üîç Found {score_key}: type={type(scores)}, len={len(scores) if hasattr(scores, '__len__') else 'N/A'}")
                            break

                logger.debug(f"üì¶ Final data - boxes: {boxes is not None}, texts: {texts is not None}, scores: {scores is not None}")

                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                if texts is not None and boxes is not None and scores is not None:
                    logger.debug(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(texts)}")

                    for bbox, text, score in zip(boxes, texts, scores):
                        if score < min_confidence:
                            continue

                        # bbox –º–æ–∂–µ—Ç –±—ã—Ç—å numpy array - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
                        if hasattr(bbox, 'tolist'):
                            bbox = bbox.tolist()

                        # –í—ã—á–∏—Å–ª–∏—Ç—å —Ü–µ–Ω—Ç—Ä bbox
                        if isinstance(bbox, list) and len(bbox) >= 4:
                            # –§–æ—Ä–º–∞—Ç: [[x1,y1], [x2,y2], [x3,y3], [x4,y4]]
                            # –ò–ª–∏: [(x1,y1), (x2,y2), (x3,y3), (x4,y4)]
                            try:
                                # –ò–∑–≤–ª–µ—á—å –≤—Å–µ X –∏ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                                xs = [p[0] for p in bbox]
                                ys = [p[1] for p in bbox]
                                center_x = int(sum(xs) / len(xs)) + x1
                                center_y = int(sum(ys) / len(ys)) + y1

                                elements.append({
                                    'text': str(text),
                                    'confidence': float(score),
                                    'x': center_x,
                                    'y': center_y,
                                    'bbox': [[int(p[0]) + x1, int(p[1]) + y1] for p in bbox]
                                })
                            except Exception as e:
                                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ bbox: {e}, bbox={bbox}")
                                continue

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR: {e}")
            import traceback
            logger.error(traceback.format_exc())

        logger.debug(f"üìä OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        return elements

    def parse_level(self, text: str) -> Optional[int]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –∑–¥–∞–Ω–∏—è (—Ç–æ–ª–µ—Ä–∞–Ω—Ç–µ–Ω –∫ –æ—à–∏–±–∫–∞–º OCR)

        –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç:
        - Lv.10, Ly.5, L—É.7 (OCR –∏–Ω–æ–≥–¥–∞ –ø—É—Ç–∞–µ—Ç v/y/—É)
        - Level 10
        - –£—Ä.10

        Returns:
            –£—Ä–æ–≤–µ–Ω—å –∑–¥–∞–Ω–∏—è –∏–ª–∏ None
        """
        patterns = [
            r'[Ll–õ–ª][vV—É–£yY–≤–í]\.?\s*(\d+)',  # Lv, Ly, L—É, L–£
            r'Level\s*(\d+)',
            r'–£—Ä\.?\s*(\d+)',
        ]

        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return int(match.group(1))

        return None

    def parse_timer(self, text: str) -> Optional[Dict[str, int]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–π–º–µ—Ä–∞ (HH:MM:SS –∏–ª–∏ MM:SS)

        Returns:
            {'hours': 10, 'minutes': 41, 'seconds': 48, 'total_seconds': 38508}
            –∏–ª–∏ None
        """
        # –§–æ—Ä–º–∞—Ç: HH:MM:SS
        match = re.search(r'(\d{1,2}):(\d{2}):(\d{2})', text)
        if match:
            hours = int(match.group(1))
            minutes = int(match.group(2))
            seconds = int(match.group(3))
            total_seconds = hours * 3600 + minutes * 60 + seconds
            return {
                'hours': hours,
                'minutes': minutes,
                'seconds': seconds,
                'total_seconds': total_seconds
            }

        # –§–æ—Ä–º–∞—Ç: MM:SS
        match = re.search(r'(\d{1,2}):(\d{2})', text)
        if match:
            minutes = int(match.group(1))
            seconds = int(match.group(2))
            total_seconds = minutes * 60 + seconds
            return {
                'hours': 0,
                'minutes': minutes,
                'seconds': seconds,
                'total_seconds': total_seconds
            }

        return None

    def parse_building_name(self, text: str) -> str:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏—è

        –£–¥–∞–ª—è–µ—Ç:
        - –£—Ä–æ–≤–Ω–∏ (Lv.X, Ly.X)
        - –ö–Ω–æ–ø–∫–∏ (–ü–µ—Ä–µ–π—Ç–∏)
        - –†–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã (I, II, III, IV)

        Example:
            "–ñ–∏–ª–∏—â–µ –õ–µ–º—É—Ä–æ–≤ I Lv.10 –ü–µ—Ä–µ–π—Ç–∏" -> "–ñ–∏–ª–∏—â–µ –õ–µ–º—É—Ä–æ–≤"
        """
        # –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–≤–Ω–∏
        text = re.sub(r'[Ll–õ–ª][vV—É–£yY–≤–í]\.?\s*\d+', '', text, flags=re.IGNORECASE)
        text = re.sub(r'Level\s*\d+', '', text, flags=re.IGNORECASE)
        text = re.sub(r'–£—Ä\.?\s*\d+', '', text, flags=re.IGNORECASE)

        # –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏" –∏ –µ—ë –∏—Å–∫–∞–∂–µ–Ω–∏—è
        text = re.sub(r'–ü–µ—Ä–µ–π—Ç–∏|–µ—Ä–µ—õ—Ç–∏|–ü–µ—Ä–µ–∏—Ç–∏|ereyti', '', text, flags=re.IGNORECASE)

        # –£–¥–∞–ª–∏—Ç—å —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ (I, II, III, IV, V)
        text = re.sub(r'\s+[IVX]+$', '', text)

        # –£–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = ' '.join(text.split())

        return text.strip()

    def group_by_rows(self, elements: List[Dict], y_threshold: int = 20) -> List[List[Dict]]:
        """
        –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç

        Args:
            elements: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            y_threshold: –ü–æ—Ä–æ–≥ –ø–æ Y –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (–ø–∏–∫—Å–µ–ª–µ–π)

        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
        """
        if not elements:
            return []

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ Y
        sorted_elements = sorted(elements, key=lambda e: e['y'])

        rows = []
        current_row = [sorted_elements[0]]
        current_y = sorted_elements[0]['y']

        for elem in sorted_elements[1:]:
            if abs(elem['y'] - current_y) <= y_threshold:
                # –≠–ª–µ–º–µ–Ω—Ç –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
                current_row.append(elem)
            else:
                # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ X
                current_row.sort(key=lambda e: e['x'])
                rows.append(current_row)

                current_row = [elem]
                current_y = elem['y']

        # –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
        if current_row:
            current_row.sort(key=lambda e: e['x'])
            rows.append(current_row)

        return rows

    def parse_navigation_panel(
        self,
        screenshot: np.ndarray,
        emulator_id: Optional[int] = None
    ) -> List[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        Returns:
            –°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:
            [
                {
                    'name': '–õ–æ–≥–æ–≤–æ –¢—Ä–∞–≤–æ—è–¥–Ω—ã—Ö',
                    'level': 2,
                    'y_coord': 435,
                    'button_coord': (330, 435)
                },
                ...
            ]
        """
        # –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        elements = self.recognize_text(screenshot, min_confidence=0.3)
        logger.debug(f"üìä OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        if not elements:
            logger.warning("‚ö†Ô∏è OCR –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞")
            return []

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å debug —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º
        if self.debug_mode:
            self._save_debug_screenshot(screenshot, elements, emulator_id)

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        rows = self.group_by_rows(elements, y_threshold=20)
        logger.debug(f"üìä –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ {len(rows)} —Å—Ç—Ä–æ–∫")

        # –ü–∞—Ä—Å–∏–Ω–≥ –∑–¥–∞–Ω–∏–π
        buildings = []

        for row in rows:
            # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏
            row_text = ' '.join([e['text'] for e in row])
            logger.debug(f"üìù –°—Ç—Ä–æ–∫–∞: {row_text}")

            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å —É—Ä–æ–≤–µ–Ω—å
            level = self.parse_level(row_text)

            # –ï—Å–ª–∏ –Ω–µ—Ç —É—Ä–æ–≤–Ω—è - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            if level is None:
                continue

            # –ò–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
            name = self.parse_building_name(row_text)

            # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            if not name:
                continue

            # Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ = —Å—Ä–µ–¥–Ω—è—è Y —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏
            y_coord = int(sum([e['y'] for e in row]) / len(row))

            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏" (—Å–ø—Ä–∞–≤–∞ –æ—Ç —Ç–µ–∫—Å—Ç–∞)
            button_x = 330  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∫–Ω–æ–ø–∫–∏
            button_y = y_coord

            buildings.append({
                'name': name,
                'level': level,
                'y_coord': y_coord,
                'button_coord': (button_x, button_y)
            })

            logger.debug(f"‚úÖ –ó–¥–∞–Ω–∏–µ: {name} Lv.{level} (Y: {y_coord})")

        return buildings

    def _save_debug_screenshot(
        self,
        screenshot: np.ndarray,
        elements: List[Dict],
        emulator_id: Optional[int] = None
    ):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å debug —Å–∫—Ä–∏–Ω—à–æ—Ç —Å bbox"""
        img = screenshot.copy()

        # –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å bbox –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        for elem in elements:
            bbox = elem['bbox']
            text = elem['text']
            conf = elem['confidence']

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å bbox –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è cv2.polylines
            pts = np.array(bbox, dtype=np.int32).reshape((-1, 1, 2))

            # –¶–≤–µ—Ç: –∑–µ–ª—ë–Ω—ã–π –µ—Å–ª–∏ conf > 0.5, –∏–Ω–∞—á–µ –∂—ë–ª—Ç—ã–π
            color = (0, 255, 0) if conf > 0.5 else (0, 255, 255)

            # –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å bbox
            cv2.polylines(img, [pts], True, color, 2)

            # –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
            cv2.putText(
                img,
                f"{text} ({conf:.2f})",
                (int(bbox[0][0]), int(bbox[0][1]) - 5),
                cv2.FONT_HERSHEY_SIMPLEX,
                0.5,
                color,
                1
            )

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        timestamp = datetime.now().strftime("%H%M%S")
        emu_prefix = f"emu{emulator_id}_" if emulator_id else ""
        filename = self.debug_dir / f"{emu_prefix}navigation_{timestamp}.png"

        cv2.imwrite(str(filename), img)
        logger.debug(f"üêõ Debug —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")