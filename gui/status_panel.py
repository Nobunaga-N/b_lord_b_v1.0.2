"""
–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
"""

import customtkinter as ctk


class StatusPanel(ctk.CTkFrame):
    """–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""

    def __init__(self, parent):
        super().__init__(parent, corner_radius=10)

        # –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        self.bot_state = {
            "is_running": False,
            "active_count": 0,
            "max_concurrent": 0,
            "active_emulators": []  # [{"id": 0, "name": "LDPlayer"}, ...]
        }

        # –°–æ–∑–¥–∞—Ç—å UI
        self._create_ui()

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.start_updates()

    def _create_ui(self):
        """–°–æ–∑–¥–∞—ë—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ctk.CTkLabel(
            self,
            text="–°—Ç–∞—Ç—É—Å",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        header.pack(anchor="w", padx=15, pady=(10, 10))

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_frame = ctk.CTkFrame(self, fg_color="transparent")
        content_frame.pack(fill="both", expand=True, padx=15, pady=(0, 15))

        # === –°—Ç—Ä–æ–∫–∞ 1: –°–æ—Å—Ç–æ—è–Ω–∏–µ ===
        self.state_label = ctk.CTkLabel(
            content_frame,
            text="–°–æ—Å—Ç–æ—è–Ω–∏–µ: üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            font=ctk.CTkFont(size=14),
            anchor="w"
        )
        self.state_label.pack(fill="x", pady=3)

        # === –°—Ç—Ä–æ–∫–∞ 2: –ê–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ ===
        self.active_label = ctk.CTkLabel(
            content_frame,
            text="–ê–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: 0 / 0",
            font=ctk.CTkFont(size=14),
            anchor="w"
        )
        self.active_label.pack(fill="x", pady=3)

        # === –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞ ===
        list_header = ctk.CTkLabel(
            content_frame,
            text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è:",
            font=ctk.CTkFont(size=14, weight="bold"),
            anchor="w"
        )
        list_header.pack(fill="x", pady=(10, 5))

        # === –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ ===
        self.scroll_frame = ctk.CTkScrollableFrame(
            content_frame,
            height=120,
            fg_color="transparent"
        )
        self.scroll_frame.pack(fill="both", expand=True)

        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        self.empty_label = ctk.CTkLabel(
            self.scroll_frame,
            text="-",
            font=ctk.CTkFont(size=13),
            text_color="#9e9e9e"
        )
        self.empty_label.pack(pady=5)

    def start_updates(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)"""
        self._update_status()

    def _update_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""

        # TODO: –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç BotController
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É self.bot_state

        # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if self.bot_state["is_running"]:
            state_text = "–°–æ—Å—Ç–æ—è–Ω–∏–µ: üü¢ –†–∞–±–æ—Ç–∞–µ—Ç"
        else:
            state_text = "–°–æ—Å—Ç–æ—è–Ω–∏–µ: üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        self.state_label.configure(text=state_text)

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        active_text = f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {self.bot_state['active_count']} / {self.bot_state['max_concurrent']}"
        self.active_label.configure(text=active_text)

        # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
        self._update_active_list()

        # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        self.after(2000, self._update_status)

    def _update_active_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""

        # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫
        for widget in self.scroll_frame.winfo_children():
            widget.destroy()

        active_emulators = self.bot_state.get("active_emulators", [])

        if not active_emulators:
            # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É
            self.empty_label = ctk.CTkLabel(
                self.scroll_frame,
                text="-",
                font=ctk.CTkFont(size=13),
                text_color="#9e9e9e"
            )
            self.empty_label.pack(pady=5)
        else:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
            for emu in active_emulators:
                emu_text = f"‚Ä¢ {emu['name']} (id:{emu['id']})"

                emu_label = ctk.CTkLabel(
                    self.scroll_frame,
                    text=emu_text,
                    font=ctk.CTkFont(size=13),
                    anchor="w"
                )
                emu_label.pack(anchor="w", pady=3, padx=5)

    def update_bot_state(self, bot_state):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ)

        Args:
            bot_state: dict —Å –∫–ª—é—á–∞–º–∏:
                - is_running: bool
                - active_count: int
                - max_concurrent: int
                - active_emulators: list of {"id": int, "name": str}
        """
        self.bot_state = bot_state