"""
–û–∫–Ω–æ –∂—É—Ä–Ω–∞–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
"""

import customtkinter as ctk
from datetime import datetime
from utils.error_log_manager import error_log_manager


class ErrorLogWindow(ctk.CTkToplevel):
    """–û–∫–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""

    def __init__(self, parent):
        super().__init__(parent)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title("üî¥ –ñ—É—Ä–Ω–∞–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
        self.geometry("1000x700")
        self.resizable(True, True)

        # –°–¥–µ–ª–∞—Ç—å –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        self.transient(parent)
        self.grab_set()

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        self._center_window(parent)

        # –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
        self.selected_error_index = None

        # –°–æ–∑–¥–∞—Ç—å UI
        self._create_ui()

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—à–∏–±–∫–∏
        self._load_errors()

        # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self._setup_auto_refresh()

    def _center_window(self, parent):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ"""
        self.update_idletasks()

        parent_x = parent.winfo_x()
        parent_y = parent.winfo_y()
        parent_width = parent.winfo_width()
        parent_height = parent.winfo_height()

        window_width = 1000
        window_height = 700

        x = parent_x + (parent_width - window_width) // 2
        y = parent_y + (parent_height - window_height) // 2

        self.geometry(f"{window_width}x{window_height}+{x}+{y}")

    def _create_ui(self):
        """–°–æ–∑–¥–∞—ë—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(self, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # === –í–ï–†–•–ù–Ø–Ø –ü–ê–ù–ï–õ–¨: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ ===
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", pady=(0, 10))

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å—á–µ—Ç—á–∏–∫–æ–º
        self.header_label = ctk.CTkLabel(
            header_frame,
            text="üî¥ –ñ—É—Ä–Ω–∞–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ (0)",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        self.header_label.pack(side="left")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        buttons_frame.pack(side="right")

        self.btn_refresh = ctk.CTkButton(
            buttons_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self._load_errors,
            width=100
        )
        self.btn_refresh.pack(side="left", padx=5)

        self.btn_clear = ctk.CTkButton(
            buttons_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
            command=self._clear_errors,
            width=100,
            fg_color="#DC3545",
            hover_color="#C82333"
        )
        self.btn_clear.pack(side="left", padx=5)

        # === –û–°–ù–û–í–ù–ê–Ø –û–ë–õ–ê–°–¢–¨: –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ + –î–µ—Ç–∞–ª–∏ ===
        content_frame = ctk.CTkFrame(main_frame)
        content_frame.pack(fill="both", expand=True)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
        left_panel = ctk.CTkFrame(content_frame, width=300)
        left_panel.pack(side="left", fill="both", padx=(5, 2), pady=5)
        left_panel.pack_propagate(False)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞
        list_header = ctk.CTkLabel(
            left_panel,
            text="–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        list_header.pack(pady=(5, 10))

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
        self.error_listbox = ctk.CTkScrollableFrame(
            left_panel,
            fg_color="#2B2B2B"
        )
        self.error_listbox.pack(fill="both", expand=True, padx=5, pady=(0, 5))

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        right_panel = ctk.CTkFrame(content_frame)
        right_panel.pack(side="right", fill="both", expand=True, padx=(2, 5), pady=5)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ—Ç–∞–ª–µ–π
        details_header = ctk.CTkLabel(
            right_panel,
            text="–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ (¬±20 —Å—Ç—Ä–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        details_header.pack(pady=(5, 10))

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
        self.details_text = ctk.CTkTextbox(
            right_panel,
            font=ctk.CTkFont(family="Consolas", size=11),
            wrap="none"
        )
        self.details_text.pack(fill="both", expand=True, padx=5, pady=(0, 5))

        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.btn_copy = ctk.CTkButton(
            right_panel,
            text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏",
            command=self._copy_details,
            width=150
        )
        self.btn_copy.pack(pady=5)

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
        self._show_placeholder()

    def _show_placeholder(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–æ–≥–¥–∞ –Ω–µ—Ç –æ—à–∏–±–æ–∫"""
        self.details_text.configure(state="normal")
        self.details_text.delete("1.0", "end")
        self.details_text.insert("1.0",
                                 "–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ üéâ\n\n"
                                 "–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è ERROR –∏ CRITICAL –ª–æ–≥–∏\n"
                                 "—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º ¬±20 —Å—Ç—Ä–æ–∫ –¥–æ –∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏.\n\n"
                                 "–§–æ—Ä–º–∞—Ç:\n"
                                 "- –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞ –æ—à–∏–±–∫–∏\n"
                                 "- ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞\n"
                                 "- –ö–æ–Ω—Ç–µ–∫—Å—Ç –î–û –æ—à–∏–±–∫–∏\n"
                                 "- >>> –û–®–ò–ë–ö–ê <<<\n"
                                 "- –ö–æ–Ω—Ç–µ–∫—Å—Ç –ü–û–°–õ–ï –æ—à–∏–±–∫–∏"
                                 )
        self.details_text.configure(state="disabled")

    def _load_errors(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫"""
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏
        errors = error_log_manager.get_errors()

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        count = len(errors)
        self.header_label.configure(text=f"üî¥ –ñ—É—Ä–Ω–∞–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ ({count})")

        # –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
        for widget in self.error_listbox.winfo_children():
            widget.destroy()

        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫
        if not errors:
            self._show_placeholder()
            return

        # –î–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
        for i, error in enumerate(errors):
            self._create_error_item(i, error)

    def _create_error_item(self, index: int, error: dict):
        """
        –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ—à–∏–±–∫–∏

        Args:
            index: –∏–Ω–¥–µ–∫—Å –æ—à–∏–±–∫–∏
            error: –¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        """
        # –§—Ä–µ–π–º –¥–ª—è –æ—à–∏–±–∫–∏
        error_frame = ctk.CTkFrame(
            self.error_listbox,
            fg_color="#3B3B3B",
            corner_radius=8
        )
        error_frame.pack(fill="x", pady=5, padx=5)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
        text_container = ctk.CTkFrame(error_frame, fg_color="transparent")
        text_container.pack(side="left", fill="both", expand=True, padx=10, pady=8)

        # –í—Ä–µ–º—è
        time_str = error['timestamp'].strftime('%H:%M:%S')
        date_str = error['timestamp'].strftime('%Y-%m-%d')

        time_label = ctk.CTkLabel(
            text_container,
            text=f"üïê {time_str} ({date_str})",
            font=ctk.CTkFont(size=11),
            anchor="w"
        )
        time_label.pack(anchor="w")

        # –≠–º—É–ª—è—Ç–æ—Ä
        if error['emulator_id']:
            emulator_text = f"üñ•Ô∏è {error['emulator_name']} (ID: {error['emulator_id']})"
        else:
            emulator_text = f"üñ•Ô∏è {error['emulator_name']}"

        emulator_label = ctk.CTkLabel(
            text_container,
            text=emulator_text,
            font=ctk.CTkFont(size=11),
            anchor="w"
        )
        emulator_label.pack(anchor="w")

        # –£—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–∫–∏
        level_color = "#DC3545" if error['level'] == "CRITICAL" else "#FFC107"
        level_label = ctk.CTkLabel(
            text_container,
            text=f"‚ö†Ô∏è {error['level']}",
            font=ctk.CTkFont(size=11, weight="bold"),
            text_color=level_color,
            anchor="w"
        )
        level_label.pack(anchor="w")

        # –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)
        short_msg = error['message'][:50] + "..." if len(error['message']) > 50 else error['message']
        msg_label = ctk.CTkLabel(
            text_container,
            text=short_msg,
            font=ctk.CTkFont(size=10),
            anchor="w"
        )
        msg_label.pack(anchor="w")

        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å"
        btn_show = ctk.CTkButton(
            error_frame,
            text="üëÅÔ∏è",
            width=40,
            command=lambda idx=index: self._show_error_details(idx)
        )
        btn_show.pack(side="right", padx=10)

        # –ö–ª–∏–∫ –ø–æ —Ñ—Ä–µ–π–º—É —Ç–æ–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏
        error_frame.bind("<Button-1>", lambda e, idx=index: self._show_error_details(idx))
        for widget in [text_container, time_label, emulator_label, level_label, msg_label]:
            widget.bind("<Button-1>", lambda e, idx=index: self._show_error_details(idx))

    def _show_error_details(self, index: int):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏

        Args:
            index: –∏–Ω–¥–µ–∫—Å –æ—à–∏–±–∫–∏ –≤ —Å–ø–∏—Å–∫–µ
        """
        self.selected_error_index = index

        # –ü–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É
        error = error_log_manager.get_error(index)
        if not error:
            return

        # –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        formatted = error_log_manager.format_error_context(error)

        # –ü–æ–∫–∞–∑–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ
        self.details_text.configure(state="normal")
        self.details_text.delete("1.0", "end")
        self.details_text.insert("1.0", formatted)
        self.details_text.configure(state="disabled")

    def _copy_details(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        if self.selected_error_index is None:
            return

        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        text = self.details_text.get("1.0", "end-1c")

        # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä
        self.clipboard_clear()
        self.clipboard_append(text)

        # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        original_text = self.btn_copy.cget("text")
        self.btn_copy.configure(text="‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!")
        self.after(2000, lambda: self.btn_copy.configure(text=original_text))

    def _clear_errors(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        # –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm = ctk.CTkInputDialog(
            text="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ –∏–∑ –∂—É—Ä–Ω–∞–ª–∞?\n–í–≤–µ–¥–∏—Ç–µ '–î–ê' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
            title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
        )

        result = confirm.get_input()

        if result and result.upper() in ['–î–ê', 'YES']:
            error_log_manager.clear_errors()
            self._load_errors()

    def _setup_auto_refresh(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞"""
        # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        self._auto_refresh()

    def _auto_refresh(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if self.winfo_exists():
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
            old_selection = self.selected_error_index

            # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
            self._load_errors()

            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±–æ—Ä –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if old_selection is not None:
                error = error_log_manager.get_error(old_selection)
                if error:
                    self._show_error_details(old_selection)

            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            self.after(5000, self._auto_refresh)