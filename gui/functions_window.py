"""
–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π
"""

import customtkinter as ctk
from utils.config_manager import load_config, save_config


class FunctionsWindow(ctk.CTkToplevel):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""

    def __init__(self, parent):
        super().__init__(parent)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title("–§—É–Ω–∫—Ü–∏–∏")
        self.geometry("500x400")
        self.resizable(False, False)

        # –°–¥–µ–ª–∞—Ç—å –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        self.transient(parent)
        self.grab_set()

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        self._center_window(parent)

        # –î–∞–Ω–Ω—ã–µ
        self.checkbox_vars = {}

        # –°–æ–∑–¥–∞—Ç—å UI
        self._create_ui()

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self._load_functions()

    def _center_window(self, parent):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ"""
        self.update_idletasks()

        parent_x = parent.winfo_x()
        parent_y = parent.winfo_y()
        parent_width = parent.winfo_width()
        parent_height = parent.winfo_height()

        window_width = 500
        window_height = 400

        x = parent_x + (parent_width - window_width) // 2
        y = parent_y + (parent_height - window_height) // 2

        self.geometry(f"{window_width}x{window_height}+{x}+{y}")

    def _create_ui(self):
        """–°–æ–∑–¥–∞—ë—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ctk.CTkFrame(self, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ctk.CTkLabel(
            main_frame,
            text="üìã –§—É–Ω–∫—Ü–∏–∏ (–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        header.pack(pady=(0, 15))

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–≤—É—Ö –∫–æ–ª–æ–Ω–æ–∫
        columns_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        columns_frame.pack(fill="both", expand=True)

        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        left_column = ctk.CTkFrame(columns_frame, fg_color="transparent")
        left_column.pack(side="left", fill="both", expand=True, padx=(0, 10))

        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        right_column = ctk.CTkFrame(columns_frame, fg_color="transparent")
        right_column.pack(side="left", fill="both", expand=True)

        # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        left_functions = [
            ("building", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"),
            ("research", "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"),
            ("wilds", "–î–∏–∫–∏–µ"),
            ("coop", "–ö–æ–æ–ø–µ—Ä–∞—Ü–∏–∏"),
        ]

        # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        right_functions = [
            ("tiles", "–°–±–æ—Ä —Å –ø–ª–∏—Ç–æ–∫"),
            ("prime_times", "–ü—Ä–∞–π–º —Ç–∞–π–º—ã"),
            ("shield", "–©–∏—Ç"),
            ("mail_rewards", "–ù–∞–≥—Ä–∞–¥—ã —Å –ø–æ—á—Ç—ã"),
        ]

        # –°–æ–∑–¥–∞—Ç—å —á–µ–∫–±–æ–∫—Å—ã
        for func_key, func_label in left_functions:
            self._create_checkbox(left_column, func_key, func_label)

        for func_key, func_label in right_functions:
            self._create_checkbox(right_column, func_key, func_label)

    def _create_checkbox(self, parent, func_key, func_label):
        """–°–æ–∑–¥–∞—ë—Ç —á–µ–∫–±–æ–∫—Å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏"""
        var = ctk.BooleanVar(value=False)
        self.checkbox_vars[func_key] = var

        checkbox = ctk.CTkCheckBox(
            parent,
            text=func_label,
            variable=var,
            command=self._auto_save_functions,
            font=ctk.CTkFont(size=14)
        )
        checkbox.pack(anchor="w", pady=8)

    def _load_functions(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
        gui_config = load_config("configs/gui_config.yaml", silent=True)

        if not gui_config or "functions" not in gui_config:
            return

        functions_config = gui_config["functions"]
        for func_key, var in self.checkbox_vars.items():
            if func_key in functions_config:
                var.set(functions_config[func_key])

    def _auto_save_functions(self):
        """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
        gui_config = load_config("configs/gui_config.yaml", silent=True)

        if not gui_config:
            gui_config = {
                "emulators": {"enabled": []},
                "functions": {},
                "settings": {"max_concurrent": 3}
            }

        if "functions" not in gui_config:
            gui_config["functions"] = {}

        for func_key, var in self.checkbox_vars.items():
            gui_config["functions"][func_key] = var.get()

        save_config("configs/gui_config.yaml", gui_config, silent=True)