"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ GUI
–° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∂—É—Ä–Ω–∞–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
"""

import customtkinter as ctk
from gui.emulator_panel import EmulatorPanel
from gui.status_panel import StatusPanel
from gui.settings_window import SettingsWindow
from gui.functions_window import FunctionsWindow
from gui.error_log_window import ErrorLogWindow
from gui.bot_controller import BotController
from utils.error_log_manager import error_log_manager


class MainWindow(ctk.CTk):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Beast Lord Bot v3.0"""

    def __init__(self):
        super().__init__()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title("Beast Lord Bot v3.0")
        self.geometry("700x700")
        self.resizable(False, False)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")

        # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±–æ—Ç–∞ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π)
        self.bot_controller = None

        # –ö–Ω–æ–ø–∫–∏ (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º)
        self.btn_start = None
        self.btn_stop = None
        self.btn_error_log = None

        # –û–∫–Ω–æ –∂—É—Ä–Ω–∞–ª–∞ –æ—à–∏–±–æ–∫
        self.error_log_window = None

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–∫–Ω–∞
        self._create_layout()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –±–æ—Ç–∞ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è status_panel)
        self.bot_controller = BotController(gui_callback=self.status_panel.update_bot_state)

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self._update_button_states()

        # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è badge –æ—à–∏–±–æ–∫
        error_log_manager.set_gui_callback(self._update_error_badge)

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self._start_periodic_update()

    def _create_layout(self):
        """–°–æ–∑–¥–∞—ë—Ç –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–∫–Ω–∞"""

        # –û—Ç—Å—Ç—É–ø—ã
        padding = {"padx": 10, "pady": 10}

        # ============ –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: –≠–º—É–ª—è—Ç–æ—Ä—ã + –ö–Ω–æ–ø–∫–∏ ============
        top_frame = ctk.CTkFrame(self, fg_color="transparent")
        top_frame.pack(fill="both", expand=True, **padding)

        # === –õ–µ–≤–∞—è —á–∞—Å—Ç—å: –≠–º—É–ª—è—Ç–æ—Ä—ã ===
        self.emulator_panel = EmulatorPanel(top_frame)
        self.emulator_panel.pack(side="left", fill="both", expand=True, padx=(0, 5))

        # === –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: –ö–Ω–æ–ø–∫–∏ ===
        buttons_frame = ctk.CTkFrame(top_frame, fg_color="transparent")
        buttons_frame.pack(side="right", fill="y")

        # –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å—Ç–∏—Ç—å"
        self.btn_start = ctk.CTkButton(
            buttons_frame,
            text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å",
            command=self._on_start,
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#28A745",
            hover_color="#218838"
        )
        self.btn_start.pack(pady=5)

        # –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
        self.btn_stop = ctk.CTkButton(
            buttons_frame,
            text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
            command=self._on_stop,
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#DC3545",
            hover_color="#C82333"
        )
        self.btn_stop.pack(pady=5)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = ctk.CTkFrame(buttons_frame, height=2, fg_color="#3B3B3B")
        separator.pack(fill="x", pady=10)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        btn_settings = ctk.CTkButton(
            buttons_frame,
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            command=self._open_settings,
            width=150,
            height=35
        )
        btn_settings.pack(pady=5)

        # –ö–Ω–æ–ø–∫–∞ "–§—É–Ω–∫—Ü–∏–∏"
        btn_functions = ctk.CTkButton(
            buttons_frame,
            text="üìã –§—É–Ω–∫—Ü–∏–∏",
            command=self._open_functions,
            width=150,
            height=35
        )
        btn_functions.pack(pady=5)

        # === –ù–û–í–û–ï: –ö–Ω–æ–ø–∫–∞ "–ñ—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫" ===
        error_btn_frame = ctk.CTkFrame(buttons_frame, fg_color="transparent")
        error_btn_frame.pack(pady=5)

        self.btn_error_log = ctk.CTkButton(
            error_btn_frame,
            text="üî¥ –ñ—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫",
            command=self._open_error_log,
            width=150,
            height=35,
            fg_color="#6C757D",
            hover_color="#5A6268"
        )
        self.btn_error_log.pack()

        # Badge –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫
        self.error_badge = ctk.CTkLabel(
            error_btn_frame,
            text="0",
            font=ctk.CTkFont(size=10, weight="bold"),
            text_color="white",
            fg_color="#DC3545",
            corner_radius=10,
            width=20,
            height=20
        )
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç

        # ============ –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å: –°—Ç–∞—Ç—É—Å ============
        self.status_panel = StatusPanel(self)
        self.status_panel.pack(fill="both", expand=True, **padding)

    def _on_start(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ó–∞–ø—É—Å—Ç–∏—Ç—å" """
        self.bot_controller.start()

    def _on_stop(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" """
        self.bot_controller.stop()

    def _open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        SettingsWindow(self)

    def _open_functions(self):
        """–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π"""
        FunctionsWindow(self)

    def _open_error_log(self):
        """–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –∂—É—Ä–Ω–∞–ª–∞ –æ—à–∏–±–æ–∫"""
        # –ï—Å–ª–∏ –æ–∫–Ω–æ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ - –ø–æ–¥–Ω—è—Ç—å –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
        if self.error_log_window and self.error_log_window.winfo_exists():
            self.error_log_window.lift()
            self.error_log_window.focus()
        else:
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
            self.error_log_window = ErrorLogWindow(self)

    def _update_error_badge(self):
        """–û–±–Ω–æ–≤–∏—Ç—å badge —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫"""
        try:
            count = error_log_manager.get_error_count()

            if count > 0:
                # –ü–æ–∫–∞–∑–∞—Ç—å badge
                self.error_badge.configure(text=str(count))
                self.error_badge.place(x=125, y=5)

                # –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
                self.btn_error_log.configure(fg_color="#DC3545", hover_color="#C82333")
            else:
                # –°–∫—Ä—ã—Ç—å badge
                self.error_badge.place_forget()

                # –í–µ—Ä–Ω—É—Ç—å –æ–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
                self.btn_error_log.configure(fg_color="#6C757D", hover_color="#5A6268")
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ badge

    def _update_button_states(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        if self.bot_controller and self.bot_controller.orchestrator:
            is_running = self.bot_controller.orchestrator.is_running

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏
            if is_running:
                self.btn_start.configure(state="disabled")
                self.btn_stop.configure(state="normal")
            else:
                self.btn_start.configure(state="normal")
                self.btn_stop.configure(state="disabled")

    def _start_periodic_update(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI"""
        self._update_button_states()
        self._update_error_badge()

        # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 500 –º—Å
        self.after(500, self._start_periodic_update)