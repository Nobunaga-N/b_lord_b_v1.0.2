"""
–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–∞–Ω–∏–π –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫–∞—á–∫–æ–π –∑–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ SQLite

–û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è + –ø–æ—Å—Ç—Ä–æ–π–∫–∞ –∑–¥–∞–Ω–∏–π

–í–µ—Ä—Å–∏—è: 2.0
–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 2025-01-21
–ò–∑–º–µ–Ω–µ–Ω–∏—è:
- –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ action (upgrade/build) –≤ —Ç–∞–±–ª–∏—Ü—É buildings
- –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ level=0
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–¥–∞–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å
"""

import os
import sqlite3
import yaml
import time
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple, Any
from utils.logger import logger
from utils.image_recognition import find_image, get_screenshot
import re

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class BuildingDatabase:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π

    –£–ø—Ä–∞–≤–ª—è–µ—Ç:
    - –£—Ä–æ–≤–Ω—è–º–∏ –∑–¥–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞
    - –°—Ç–∞—Ç—É—Å–æ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π (—Å–≤–æ–±–æ–¥–µ–Ω/–∑–∞–Ω—è—Ç)
    - –ó–∞–º–æ—Ä–æ–∑–∫–æ–π —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    - –õ–æ–≥–∏–∫–æ–π –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏
    - –ü–µ—Ä–≤–∏—á–Ω—ã–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —É—Ä–æ–≤–Ω–µ–π
    """

    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    DB_PATH = os.path.join(BASE_DIR, 'data', 'database', 'bot.db')

    # –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –ø–æ—Ä—è–¥–∫–∞ –ø—Ä–æ–∫–∞—á–∫–∏
    CONFIG_PATH = os.path.join(BASE_DIR, 'configs', 'building_order.yaml')

    # –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ –∏–∫–æ–Ω–æ–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π (x1, y1, x2, y2)
    BUILDERS_SEARCH_AREA = (10, 115, 145, 179)

    # –®–∞–±–ª–æ–Ω—ã –∏–∫–æ–Ω–æ–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π
    BUILDER_TEMPLATES = {
        (0, 3): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_0_3.png'),
        (1, 3): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_1_3.png'),
        (2, 3): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_2_3.png'),
        (3, 3): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_3_3.png'),
        (0, 4): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_0_4.png'),
        (1, 4): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_1_4.png'),
        (2, 4): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_2_4.png'),
        (3, 4): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_3_4.png'),
        (4, 4): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_4_4.png'),
    }

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ë–î –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(self.DB_PATH), exist_ok=True)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        self.conn = sqlite3.connect(self.DB_PATH, check_same_thread=False)
        self.conn.row_factory = sqlite3.Row

        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self._create_tables()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Ä—è–¥–∫–∞ –ø—Ä–æ–∫–∞—á–∫–∏
        self._load_building_config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OCR –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π
        try:
            from utils.ocr_engine import OCREngine
            self._ocr_engine = OCREngine()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OCR –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π: {e}")
            self._ocr_engine = None

        logger.info("‚úÖ BuildingDatabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def _create_tables(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        cursor = self.conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –∑–¥–∞–Ω–∏–π (–û–ë–ù–û–í–õ–ï–ù–ê: –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ action)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS buildings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                emulator_id INTEGER NOT NULL,
                building_name TEXT NOT NULL,
                building_type TEXT NOT NULL,
                building_index INTEGER,
                current_level INTEGER NOT NULL DEFAULT 0,
                upgrading_to_level INTEGER,
                target_level INTEGER NOT NULL,
                status TEXT NOT NULL DEFAULT 'idle',
                action TEXT NOT NULL DEFAULT 'upgrade',
                timer_finish TIMESTAMP,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(emulator_id, building_name, building_index)
            )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS builders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                emulator_id INTEGER NOT NULL,
                builder_slot INTEGER NOT NULL,
                is_busy BOOLEAN NOT NULL DEFAULT 0,
                building_id INTEGER,
                finish_time TIMESTAMP,
                FOREIGN KEY (building_id) REFERENCES buildings(id),
                UNIQUE(emulator_id, builder_slot)
            )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS emulator_freeze (
                emulator_id INTEGER PRIMARY KEY,
                freeze_until TIMESTAMP NOT NULL,
                reason TEXT
            )
        """)

        self.conn.commit()
        logger.debug("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã")

    def _load_building_config(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Ä—è–¥–∫–∞ –ø—Ä–æ–∫–∞—á–∫–∏ –∏–∑ YAML"""
        try:
            with open(self.CONFIG_PATH, 'r', encoding='utf-8') as f:
                self.building_config = yaml.safe_load(f)
            logger.debug(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω: {self.CONFIG_PATH}")
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.CONFIG_PATH}")
            self.building_config = {}
        except yaml.YAMLError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {e}")
            self.building_config = {}

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
        if self.conn:
            self.conn.close()
            logger.debug("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

    # ===== –ü–ï–†–í–ò–ß–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï =====

    def _extract_unique_buildings(self) -> List[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ—á—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π –∏–∑ building_order.yaml

        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç action –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è

        –õ–æ–≥–∏–∫–∞:
        - –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —É—Ä–æ–≤–Ω—è–º –ª–æ—Ä–¥–∞ –ü–û –ü–û–†–Ø–î–ö–£ (10‚Üí18)
        - –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–¥–∞–Ω–∏—è —Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –£–ñ–ï –ü–û–°–¢–†–û–ï–ù–û
        - action='upgrade' —Å count=N –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ N —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã
        - action='build' –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Å—Ç—Ä–æ–∏—Ç—Å—è –ù–û–í–´–ô —ç–∫–∑–µ–º–ø–ª—è—Ä

        Returns:
            list: —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ë–î —Å –ø–æ–ª—è–º–∏:
                  {name: str, index: int|None, max_target_level: int, type: str, action: str}
        """
        logger.debug("üìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–¥–∞–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞...")

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π
        # key: name, value: {built_count: int, total_count: int, max_target: int, type: str}
        buildings_tracking = {}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω
        if not self.building_config:
            logger.error("‚ùå building_config –ø—É—Å—Ç!")
            return []

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —É—Ä–æ–≤–Ω—è–º –ª–æ—Ä–¥–∞ –ü–û –ü–û–†–Ø–î–ö–£
        for level in range(10, 19):
            lord_key = f"lord_{level}"

            if lord_key not in self.building_config:
                continue

            config = self.building_config[lord_key]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'buildings'
            if 'buildings' not in config or not isinstance(config['buildings'], list):
                continue

            buildings_list = config['buildings']

            for building in buildings_list:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if 'name' not in building:
                    continue

                name = building['name']
                count = building.get('count', 1)
                target = building.get('target_level', 1)
                btype = building.get('type', 'unique')
                action = building.get('action', 'upgrade')

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∑–¥–∞–Ω–∏—è
                if name not in buildings_tracking:
                    buildings_tracking[name] = {
                        'built_count': 0,  # –°–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ
                        'total_count': 0,  # –°–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±—É–¥–µ—Ç –≤—Å–µ–≥–æ
                        'max_target_level': 0,
                        'type': btype,
                        'has_build_action': False  # –í—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å –ª–∏ action='build'
                    }

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–∞–Ω–∏–∏
                if action == 'upgrade':
                    # –≠—Ç–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –£–ñ–ï –ü–û–°–¢–†–û–ï–ù–´
                    if count > buildings_tracking[name]['built_count']:
                        buildings_tracking[name]['built_count'] = count

                elif action == 'build':
                    # –°—Ç—Ä–æ—è—Ç—Å—è –ù–û–í–´–ï —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
                    if count > buildings_tracking[name]['total_count']:
                        buildings_tracking[name]['total_count'] = count
                    # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ action='build'
                    buildings_tracking[name]['has_build_action'] = True

                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π target_level
                if target > buildings_tracking[name]['max_target_level']:
                    buildings_tracking[name]['max_target_level'] = target

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ total –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –∏–∑ build)
                if count > buildings_tracking[name]['total_count']:
                    buildings_tracking[name]['total_count'] = count

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = []

        for name, data in buildings_tracking.items():
            built_count = data['built_count']  # –°–∫–æ–ª—å–∫–æ —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ
            total_count = data['total_count']  # –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≤—Å–µ–≥–æ
            max_target = data['max_target_level']
            btype = data['type']
            has_build_action = data['has_build_action']  # –í—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å –ª–∏ action='build'

            if total_count > 1:
                # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
                for index in range(1, total_count + 1):
                    # –ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê:
                    # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å <= built_count ‚Üí –∑–¥–∞–Ω–∏–µ –£–ñ–ï –ü–û–°–¢–†–û–ï–ù–û (action='upgrade')
                    # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å > built_count ‚Üí –∑–¥–∞–Ω–∏–µ –ù–£–ñ–ù–û –ü–û–°–¢–†–û–ò–¢–¨ (action='build')
                    instance_action = 'upgrade' if index <= built_count else 'build'

                    result.append({
                        'name': name,
                        'index': index,
                        'max_target_level': max_target,
                        'type': btype,
                        'action': instance_action
                    })
            else:
                # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å action='build' ‚Üí –Ω—É–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å
                unique_action = 'build' if has_build_action else 'upgrade'

                result.append({
                    'name': name,
                    'index': None,
                    'max_target_level': max_target,
                    'type': btype,
                    'action': unique_action
                })

        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result)} –∑–∞–ø–∏—Å–µ–π –∑–¥–∞–Ω–∏–π")

        # –î–µ–±–∞–≥: –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
        for i, b in enumerate(result[:5], 1):
            index_str = f"#{b['index']}" if b['index'] else ""
            logger.debug(f"  {i}. {b['name']}{index_str} (max_level={b['max_target_level']}, action={b['action']})")

        return result

    def initialize_buildings_for_emulator(self, emulator_id: int, total_builders: int = 3) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π —ç–º—É–ª—è—Ç–æ—Ä–∞ –≤ –ë–î

        –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º _extract_unique_buildings(),
        –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è –∏–º–µ–µ—Ç —Å–≤–æ–π action

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞
            total_builders: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π (3 –∏–ª–∏ 4)

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        logger.info(f"üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–¥–∞–Ω–∏–π –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}...")

        cursor = self.conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —ç–º—É–ª—è—Ç–æ—Ä
        cursor.execute("""
            SELECT COUNT(*) FROM buildings WHERE emulator_id = ?
        """, (emulator_id,))

        count = cursor.fetchone()[0]

        if count > 0:
            logger.warning(f"‚ö†Ô∏è –≠–º—É–ª—è—Ç–æ—Ä {emulator_id} —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ({count} –∑–¥–∞–Ω–∏–π)")
            return True

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        buildings_list = self._extract_unique_buildings()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–¥–∞–Ω–∏—è
        buildings_created = 0

        for building_data in buildings_list:
            name = building_data['name']
            index = building_data.get('index')  # None –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö, –Ω–æ–º–µ—Ä –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö
            max_target = building_data['max_target_level']
            btype = building_data['type']
            action = building_data['action']

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            if index is not None:
                # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º
                cursor.execute("""
                    INSERT INTO buildings 
                    (emulator_id, building_name, building_type, building_index, 
                     current_level, target_level, status, action)
                    VALUES (?, ?, ?, ?, 0, ?, 'idle', ?)
                """, (emulator_id, name, btype, index, max_target, action))
            else:
                # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
                cursor.execute("""
                    INSERT INTO buildings 
                    (emulator_id, building_name, building_type, building_index, 
                     current_level, target_level, status, action)
                    VALUES (?, ?, ?, NULL, 0, ?, 'idle', ?)
                """, (emulator_id, name, btype, max_target, action))

            buildings_created += 1

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π
        for slot in range(1, total_builders + 1):
            cursor.execute("""
                INSERT INTO builders 
                (emulator_id, builder_slot, is_busy)
                VALUES (?, ?, 0)
            """, (emulator_id, slot))

        self.conn.commit()

        logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {buildings_created} –∑–∞–ø–∏—Å–µ–π –∑–¥–∞–Ω–∏–π –∏ {total_builders} —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π")
        return True

    def scan_building_level(self, emulator: dict, building_name: str,
                           building_index: Optional[int] = None) -> bool:
        """
        –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –û–î–ù–û–ì–û –∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤ –ë–î

        –í–ê–ñ–ù–û: –ù–µ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∑–¥–∞–Ω–∏—è —Å action='build' –∏ level=0
        (–æ–Ω–∏ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∏–≥—Ä–µ)

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
            building_index: –∏–Ω–¥–µ–∫—Å –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        emulator_id = emulator.get('id', 0)
        emulator_name = emulator.get('name', f'Emulator-{emulator_id}')

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–∞–Ω–∏–∏ –∏–∑ –ë–î
        building = self.get_building(emulator_id, building_name, building_index)

        if not building:
            logger.error(f"[{emulator_name}] ‚ùå –ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î: {building_name}")
            return False

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ action='build' –∏ level=0 - –∑–¥–∞–Ω–∏–µ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ
        if building['action'] == 'build' and building['current_level'] == 0:
            logger.warning(f"[{emulator_name}] ‚è≠Ô∏è {building_name}: –∑–¥–∞–Ω–∏–µ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ (action=build, level=0)")
            return False

        logger.info(f"[{emulator_name}] üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {building_name}" +
                    (f" #{building_index}" if building_index else ""))

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º NavigationPanel
        from functions.building.navigation_panel import NavigationPanel
        nav_panel = NavigationPanel()

        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑ NavigationPanel
        level = nav_panel.get_building_level(emulator, building_name, building_index)

        if level is None:
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–¥–∞–Ω–∏—è")
            return False

        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –ë–î
        cursor = self.conn.cursor()

        if building_index is not None:
            cursor.execute("""
                UPDATE buildings 
                SET current_level = ?,
                    last_updated = CURRENT_TIMESTAMP
                WHERE emulator_id = ? AND building_name = ? AND building_index = ?
            """, (level, emulator_id, building_name, building_index))
        else:
            cursor.execute("""
                UPDATE buildings 
                SET current_level = ?,
                    last_updated = CURRENT_TIMESTAMP
                WHERE emulator_id = ? AND building_name = ? AND building_index IS NULL
            """, (level, emulator_id, building_name))

        self.conn.commit()

        logger.success(f"[{emulator_name}] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î: {building_name}" +
                       (f" #{building_index}" if building_index else "") +
                       f" ‚Üí Lv.{level}")

        return True

    def perform_initial_scan(self, emulator: dict) -> bool:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –í–°–ï–• –∑–¥–∞–Ω–∏–π —Å level=0

        –ò–°–ü–†–ê–í–õ–ï–ù–û:
        - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ä–∞–∑–¥–µ–ª—É "–†–∞–∑–≤–∏—Ç–∏–µ"
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        emulator_id = emulator.get('id', 0)
        emulator_name = emulator.get('name', f'Emulator-{emulator_id}')

        logger.info(f"[{emulator_name}] üîç –ù–ê–ß–ê–õ–û –ü–ï–†–í–ò–ß–ù–û–ì–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")

        # 1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–¥–∞–Ω–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT building_name, building_index, action
            FROM buildings 
            WHERE emulator_id = ? AND current_level = 0
            ORDER BY building_name, building_index
        """, (emulator_id,))

        buildings_to_scan = cursor.fetchall()

        if not buildings_to_scan:
            logger.info(f"[{emulator_name}] ‚úÖ –í—Å–µ –∑–¥–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã")
            return True

        # 2. –§–∏–ª—å—Ç—Ä—É–µ–º: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ action='upgrade'
        scannable = []
        skipped_build = []

        for row in buildings_to_scan:
            building_name = row[0]
            building_index = row[1]
            action = row[2]

            if action == 'build':
                skipped_build.append((building_name, building_index))
            else:
                scannable.append((building_name, building_index))

        total = len(scannable)
        logger.info(f"[{emulator_name}] üìã –ù–∞–π–¥–µ–Ω–æ –∑–¥–∞–Ω–∏–π –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {total}")

        if skipped_build:
            logger.info(f"[{emulator_name}] ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π: {len(skipped_build)}")

        if total == 0:
            logger.info(f"[{emulator_name}] ‚úÖ –ù–µ—Ç –∑–¥–∞–Ω–∏–π –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return True

        # 3. –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∑–¥–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
        groups = self._group_buildings_by_section(scannable)

        logger.info(f"[{emulator_name}] üìÇ –†–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {len(groups)}")

        # 4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º NavigationPanel
        from functions.building.navigation_panel import NavigationPanel
        nav_panel = NavigationPanel()

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_success_count = 0
        total_failed_count = 0

        # 5. –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –∏ –°–†–ê–ó–£ –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î
        section_num = 0
        for section_key, buildings_in_section in groups.items():
            section_num += 1
            logger.info(f"[{emulator_name}] üìÇ [{section_num}/{len(groups)}] –†–∞–∑–¥–µ–ª: {section_key}")
            logger.debug(f"[{emulator_name}]    –ó–¥–∞–Ω–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ: {len(buildings_in_section)}")

            # –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if not nav_panel.open_navigation_panel(emulator):
                logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
                total_failed_count += len(buildings_in_section)
                continue

            # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            first_building_name = buildings_in_section[0][0]
            building_config = nav_panel.get_building_config(first_building_name)

            if not building_config:
                logger.error(f"[{emulator_name}] ‚ùå –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {first_building_name}")
                total_failed_count += len(buildings_in_section)
                continue

            # –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–¥–µ–ª—É
            if not self._navigate_to_section(emulator, nav_panel, building_config):
                logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–¥–µ–ª—É")
                total_failed_count += len(buildings_in_section)
                continue

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            time.sleep(0.5)

            # –ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ –∑–¥–∞–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            from utils.image_recognition import get_screenshot
            screenshot = get_screenshot(emulator)
            if screenshot is None:
                logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
                total_failed_count += len(buildings_in_section)
                continue

            all_buildings_on_screen = nav_panel.ocr.parse_navigation_panel(
                screenshot,
                emulator_id=emulator_id
            )

            if not all_buildings_on_screen:
                logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–¥–∞–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ {section_key}")
                total_failed_count += len(buildings_in_section)
                continue

            logger.info(f"[{emulator_name}]    –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∑–¥–∞–Ω–∏–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ: {len(all_buildings_on_screen)}")

            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for b in all_buildings_on_screen:
                logger.debug(f"[{emulator_name}]      üìç {b['name']} Lv.{b['level']} (Y: {b['y']})")

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            found_by_name = {}

            for building in all_buildings_on_screen:
                building_name = building['name']

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–¥–∞–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É —Ä–∞–∑–¥–µ–ª—É
                is_relevant = False
                for target_name, target_index in buildings_in_section:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    target_normalized = target_name.lower().replace(' ', '').replace('—ë', '–µ')
                    building_normalized = building_name.lower().replace(' ', '').replace('—ë', '–µ')

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    if target_normalized in building_normalized or building_normalized in target_normalized:
                        is_relevant = True
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª–µ–≤–æ–µ –∏–º—è –∏–∑ –ë–î (–Ω–µ –∏–∑ OCR)
                        building_name = target_name
                        break

                if not is_relevant:
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–¥–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)
                if building_name not in found_by_name:
                    found_by_name[building_name] = []

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–¥–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º–∏ –∂–µ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (–¥—É–±–ª–∏–∫–∞—Ç)
                is_duplicate = False
                for existing in found_by_name[building_name]:
                    if abs(existing['y'] - building['y']) < 5:  # –î–æ–ø—É—Å–∫ 5 –ø–∏–∫—Å–µ–ª–µ–π
                        is_duplicate = True
                        break

                if not is_duplicate:
                    found_by_name[building_name].append({
                        'level': building['level'],
                        'y': building['y'],
                        'name': building['name']
                    })

            # –û–ë–ù–û–í–õ–Ø–ï–ú –ë–î –¥–ª—è –∑–¥–∞–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            for building_name, building_index in buildings_in_section:
                if building_name not in found_by_name:
                    logger.warning(f"[{emulator_name}]      ‚úó {building_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
                    total_failed_count += 1
                    continue

                found_instances = found_by_name[building_name]

                if building_index is not None:
                    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ Y (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
                    found_instances_sorted = sorted(found_instances, key=lambda x: x['y'])

                    # –î–µ–±–∞–≥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π
                    logger.debug(f"[{emulator_name}] –û–±—Ä–∞–±–æ—Ç–∫–∞ {building_name} (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ):")
                    logger.debug(f"[{emulator_name}]   –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {len(found_instances_sorted)}")
                    for idx, inst in enumerate(found_instances_sorted):
                        logger.debug(f"[{emulator_name}]     [{idx + 1}] Lv.{inst['level']} (Y: {inst['y']})")

                    # –ò–Ω–¥–µ–∫—Å –≤ –ë–î –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1, –≤ –º–∞—Å—Å–∏–≤–µ —Å 0
                    idx = building_index - 1

                    if idx < len(found_instances_sorted):
                        level = found_instances_sorted[idx]['level']

                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                        cursor.execute("""
                                        UPDATE buildings 
                                        SET current_level = ?,
                                            last_updated = CURRENT_TIMESTAMP
                                        WHERE emulator_id = ? 
                                        AND building_name = ? 
                                        AND building_index = ?
                                    """, (level, emulator_id, building_name, building_index))

                        self.conn.commit()

                        logger.success(f"[{emulator_name}] ‚úÖ {building_name} #{building_index} ‚Üí Lv.{level}")
                        total_success_count += 1
                    else:
                        logger.error(f"[{emulator_name}] ‚ùå {building_name} #{building_index}: " +
                                     f"–∏–Ω–¥–µ–∫—Å {building_index} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–Ω–∞–π–¥–µ–Ω–æ {len(found_instances_sorted)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö)")
                        total_failed_count += 1

                else:
                    # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ - –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ
                    if len(found_instances) > 0:
                        level = found_instances[0]['level']

                        cursor.execute("""
                                        UPDATE buildings 
                                        SET current_level = ?,
                                            last_updated = CURRENT_TIMESTAMP
                                        WHERE emulator_id = ? 
                                        AND building_name = ? 
                                        AND building_index IS NULL
                                    """, (level, emulator_id, building_name))

                        self.conn.commit()

                        logger.success(f"[{emulator_name}] ‚úÖ {building_name} ‚Üí Lv.{level}")
                        total_success_count += 1
                    else:
                        logger.error(f"[{emulator_name}] ‚ùå {building_name}: –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç")
                        total_failed_count += 1

            # –°–≤–µ—Ä–Ω—É—Ç—å —Ä–∞–∑–¥–µ–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            nav_panel.reset_navigation_state(emulator)
            time.sleep(0.5)

        # 6. –ò—Ç–æ–≥–∏
        logger.info(f"[{emulator_name}] üìä –ò–¢–û–ì–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø:")
        logger.info(f"[{emulator_name}]   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {total_success_count}")
        logger.info(f"[{emulator_name}]   ‚ùå –û—à–∏–±–∫–∏: {total_failed_count}")
        logger.info(f"[{emulator_name}]   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ): {len(skipped_build)}")

        if total_failed_count > 0:
            logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç—å –∑–¥–∞–Ω–∏–π –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞
            return total_success_count > 0

        logger.success(f"[{emulator_name}] ‚úÖ –ü–ï–†–í–ò–ß–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
        return True

    def _group_buildings_by_section(self, buildings: List[Tuple[str, Optional[int]]]) -> Dict[
        str, List[Tuple[str, Optional[int]]]]:
        """
        –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∑–¥–∞–Ω–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é —Å–∫—Ä–æ–ª–ª–∞ –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞
        –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –∑–¥–∞–Ω–∏—è –≤–∏–¥–∏–º—ã–µ —Å—Ä–∞–∑—É –±—É–¥—É—Ç –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –ü–ï–†–ï–î –∑–¥–∞–Ω–∏—è–º–∏ —Ç—Ä–µ–±—É—é—â–∏–º–∏ —Å–∫—Ä–æ–ª–ª

        Args:
            buildings: —Å–ø–∏—Å–æ–∫ (building_name, building_index)

        Returns:
            dict: {section_key: [(building_name, building_index), ...]}
        """
        from functions.building.navigation_panel import NavigationPanel
        nav_panel = NavigationPanel()

        groups = {}

        for building_name, building_index in buildings:
            building_config = nav_panel.get_building_config(building_name)

            if not building_config:
                logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {building_name}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á —Ä–∞–∑–¥–µ–ª–∞
            if building_config.get('from_tasks_tab'):
                section_key = "–°–ø–∏—Å–æ–∫ –¥–µ–ª"
            else:
                section = building_config.get('section', 'Unknown')
                subsection = building_config.get('subsection')

                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Å–∫—Ä–æ–ª–ª –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞/–ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
                if subsection:
                    # –î–ª—è –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º scroll_in_subsection
                    scroll_config = building_config.get('scroll_in_subsection', [])
                else:
                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º scroll_in_section
                    scroll_config = building_config.get('scroll_in_section', [])

                requires_scroll = len(scroll_config) > 0

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á —Å —É—á–µ—Ç–æ–º —Å–∫—Ä–æ–ª–ª–∞
                if subsection:
                    base_key = f"{section} > {subsection}"
                else:
                    base_key = section

                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å–∫—Ä–æ–ª–ª–∞ –∫ –∫–ª—é—á—É
                if requires_scroll:
                    section_key = f"{base_key} (—Å–æ —Å–∫—Ä–æ–ª–ª–æ–º)"
                else:
                    section_key = f"{base_key} (–±–µ–∑ —Å–∫—Ä–æ–ª–ª–∞)"

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            if section_key not in groups:
                groups[section_key] = []

            groups[section_key].append((building_name, building_index))

        return groups

    def _navigate_to_section(self, emulator: dict, nav_panel, building_config: dict) -> bool:
        """
        –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–¥–µ–ª—É –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–¥–∞–Ω–∏—è

        –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            nav_panel: –æ–±—ä–µ–∫—Ç NavigationPanel
            building_config: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–¥–∞–Ω–∏—è

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        # –ï—Å–ª–∏ –∑–¥–∞–Ω–∏–µ –≤ "–°–ø–∏—Å–æ–∫ –¥–µ–ª"
        if building_config.get('from_tasks_tab'):
            nav_panel.switch_to_tasks_tab(emulator)
            time.sleep(0.5)
            return True

        # –î–ª—è –∑–¥–∞–Ω–∏–π –≤ "–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π"
        nav_panel.switch_to_buildings_tab(emulator)
        time.sleep(0.5)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã)
        nav_panel.reset_navigation_state(emulator)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–¥–µ–ª
        section_name = building_config.get('section')
        if not nav_panel._open_section_by_name(emulator, section_name):
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª: {section_name}")
            return False

        time.sleep(0.5)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞
        if 'subsection' in building_config:
            subsection_name = building_config['subsection']
            subsection_data = building_config.get('subsection_data', {})

            # –°–≤–∞–π–ø—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if subsection_data.get('requires_scroll'):
                scroll_swipes = subsection_data.get('scroll_to_subsection', [])
                nav_panel.execute_swipes(emulator, scroll_swipes)
                time.sleep(0.3)

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
            if not nav_panel._open_section_by_name(emulator, subsection_name):
                logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–≤–∫–ª–∞–¥–∫—É: {subsection_name}")
                return False

            time.sleep(0.5)

            # –°–≤–∞–π–ø—ã –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–¥–∞–Ω–∏—è–º
            scroll_swipes = building_config.get('scroll_in_subsection', [])
            if scroll_swipes:
                nav_panel.execute_swipes(emulator, scroll_swipes)
                time.sleep(0.3)
        else:
            # –°–≤–∞–π–ø—ã –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            scroll_swipes = building_config.get('scroll_in_section', [])
            if scroll_swipes:
                nav_panel.execute_swipes(emulator, scroll_swipes)
                time.sleep(0.3)

        return True

    def has_unscanned_buildings(self, emulator_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —É —ç–º—É–ª—è—Ç–æ—Ä–∞ –∑–¥–∞–Ω–∏—è —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º (level=0)
        –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å (–∏—Å–∫–ª—é—á–∞—è –Ω–µ–ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ)

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞

        Returns:
            bool: True –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è
        """
        cursor = self.conn.cursor()

        cursor.execute("""
            SELECT COUNT(*) FROM buildings 
            WHERE emulator_id = ? AND current_level = 0 AND action != 'build'
        """, (emulator_id,))

        count = cursor.fetchone()[0]

        return count > 0

    def get_unscanned_buildings_count(self, emulator_id: int) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π (–∏—Å–∫–ª—é—á–∞—è –Ω–µ–ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ)

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞

        Returns:
            int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–∞–Ω–∏–π —Å level=0 –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
        """
        cursor = self.conn.cursor()

        cursor.execute("""
            SELECT COUNT(*) FROM buildings 
            WHERE emulator_id = ? AND current_level = 0 AND action != 'build'
        """, (emulator_id,))

        return cursor.fetchone()[0]

    # ===== –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê –°–¢–†–û–ò–¢–ï–õ–ï–ô =====

    def detect_builders_count(self, emulator: dict) -> Tuple[int, int]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ OCR

        –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞: (10, 115, 145, 179)
        –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞: "0/3", "1/3", "2/4" –∏ —Ç.–¥.

        Args:
            emulator: –û–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞ —Å –ø–æ–ª—è–º–∏ {id, name, port}

        Returns:
            (busy_count, total_count) - –Ω–∞–ø—Ä–∏–º–µ—Ä (1, 3) –æ–∑–Ω–∞—á–∞–µ—Ç 1 –∑–∞–Ω—è—Ç –∏–∑ 3 –≤—Å–µ–≥–æ
        """
        emulator_id = emulator.get('id', 0)
        emulator_name = emulator.get('name', f'Emulator-{emulator_id}')

        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot = get_screenshot(emulator)
        if screenshot is None:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_name}")
            return (0, 3)

        # –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
        x1, y1, x2, y2 = self.BUILDERS_SEARCH_AREA

        # –°–æ–∑–¥–∞–µ–º OCR –¥–≤–∏–∂–æ–∫ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω)
        if not hasattr(self, '_ocr_engine'):
            from utils.ocr_engine import OCREngine
            self._ocr_engine = OCREngine(lang='en')
            logger.debug("‚úÖ OCR –¥–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π")

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –æ–±–ª–∞—Å—Ç–∏
        elements = self._ocr_engine.recognize_text(
            screenshot,
            region=(x1, y1, x2, y2),
            min_confidence=0.5
        )

        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "X/Y"
        builder_pattern = re.compile(r'(\d+)\s*/\s*(\d+)')

        for element in elements:
            text = element['text'].strip()
            match = builder_pattern.search(text)

            if match:
                busy = int(match.group(1))
                total = int(match.group(2))

                # –í–∞–ª–∏–¥–∞—Ü–∏—è (–≤ –∏–≥—Ä–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 3 –∏–ª–∏ 4 —Å—Ç—Ä–æ–∏—Ç–µ–ª—è)
                if total in [3, 4] and 0 <= busy <= total:
                    logger.info(f"üî® –°—Ç—Ä–æ–∏—Ç–µ–ª–∏: {busy}/{total} (—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —á–µ—Ä–µ–∑ OCR)")
                    return (busy, total)
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {busy}/{total}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ - –ø—Ä–æ–±—É–µ–º —Å –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º
        logger.debug("üîç –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —Å min_confidence=0.3")

        elements = self._ocr_engine.recognize_text(
            screenshot,
            region=(x1, y1, x2, y2),
            min_confidence=0.3
        )

        for element in elements:
            text = element['text'].strip()
            match = builder_pattern.search(text)

            if match:
                busy = int(match.group(1))
                total = int(match.group(2))

                if total in [3, 4] and 0 <= busy <= total:
                    logger.info(f"üî® –°—Ç—Ä–æ–∏—Ç–µ–ª–∏: {busy}/{total} (—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é)")
                    return (busy, total)

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ - –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ª–æ—Ç—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π")
        logger.debug(f"üìä –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {[e['text'] for e in elements]}")

        # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
        logger.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0/3")
        return (0, 3)

    def initialize_builders(self, emulator_id: int, slots: int = 3):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞
            slots: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π (3 –∏–ª–∏ 4)
        """
        cursor = self.conn.cursor()

        logger.info(f"üî® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {slots} —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}...")

        for slot in range(1, slots + 1):
            cursor.execute("""
                INSERT OR IGNORE INTO builders 
                (emulator_id, builder_slot, is_busy)
                VALUES (?, ?, 0)
            """, (emulator_id, slot))

        self.conn.commit()
        logger.success(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {slots} —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π")

    def _find_building_in_config(self, building_name: str) -> Optional[Dict]:
        """
        –ù–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∏ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        –ò—â–µ—Ç –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        """
        for lord_level, config in self.building_config.items():
            for building in config['buildings']:
                if building['name'] == building_name:
                    return building
        return None

    # ===== –†–ê–ë–û–¢–ê –° –ó–î–ê–ù–ò–Ø–ú–ò =====

    def get_building(self, emulator_id: int, building_name: str,
                     building_index: Optional[int] = None) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–∞–Ω–∏–∏

        Returns:
            dict —Å –ø–æ–ª—è–º–∏: id, name, type, index, current_level, upgrading_to_level,
                          target_level, status, action, timer_finish
        """
        cursor = self.conn.cursor()

        if building_index is not None:
            cursor.execute("""
                SELECT * FROM buildings 
                WHERE emulator_id = ? AND building_name = ? AND building_index = ?
            """, (emulator_id, building_name, building_index))
        else:
            cursor.execute("""
                SELECT * FROM buildings 
                WHERE emulator_id = ? AND building_name = ? AND building_index IS NULL
            """, (emulator_id, building_name))

        row = cursor.fetchone()

        if row:
            return {
                'id': row['id'],
                'name': row['building_name'],
                'type': row['building_type'],
                'index': row['building_index'],
                'current_level': row['current_level'],
                'upgrading_to_level': row['upgrading_to_level'],
                'target_level': row['target_level'],
                'status': row['status'],
                'action': row['action'],
                'timer_finish': row['timer_finish']
            }

        return None

    def update_building_level(self, emulator_id: int, building_name: str,
                             building_index: Optional[int], new_level: int):
        """
        –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–¥–∞–Ω–∏—è

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
            building_index: –∏–Ω–¥–µ–∫—Å (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö)
            new_level: –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        """
        cursor = self.conn.cursor()

        if building_index is not None:
            cursor.execute("""
                UPDATE buildings 
                SET current_level = ?, 
                    upgrading_to_level = NULL,
                    status = 'idle',
                    timer_finish = NULL,
                    last_updated = CURRENT_TIMESTAMP
                WHERE emulator_id = ? AND building_name = ? AND building_index = ?
            """, (new_level, emulator_id, building_name, building_index))
        else:
            cursor.execute("""
                UPDATE buildings 
                SET current_level = ?, 
                    upgrading_to_level = NULL,
                    status = 'idle',
                    timer_finish = NULL,
                    last_updated = CURRENT_TIMESTAMP
                WHERE emulator_id = ? AND building_name = ? AND building_index IS NULL
            """, (new_level, emulator_id, building_name))

        self.conn.commit()
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω —É—Ä–æ–≤–µ–Ω—å: {building_name} ‚Üí {new_level}")

    def set_building_upgrading(self, emulator_id: int, building_name: str,
                               building_index: Optional[int], timer_finish: datetime,
                               builder_slot: int):
        """
        –ü–æ–º–µ—Ç–∏—Ç—å –∑–¥–∞–Ω–∏–µ –∫–∞–∫ —É–ª—É—á—à–∞—é—â–µ–µ—Å—è

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
            building_index: –∏–Ω–¥–µ–∫—Å (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö)
            timer_finish: –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏
            builder_slot: –Ω–æ–º–µ—Ä –∑–∞–Ω—è—Ç–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
        """
        cursor = self.conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–¥–∞–Ω–∏–µ
        building = self.get_building(emulator_id, building_name, building_index)

        if not building:
            logger.error(f"‚ùå –ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {building_name}")
            return

        building_id = building['id']
        current_level = building['current_level']
        upgrading_to = current_level + 1

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–∞–Ω–∏—è
        if building_index is not None:
            cursor.execute("""
                UPDATE buildings 
                SET upgrading_to_level = ?,
                    status = 'upgrading',
                    timer_finish = ?,
                    last_updated = CURRENT_TIMESTAMP
                WHERE emulator_id = ? AND building_name = ? AND building_index = ?
            """, (upgrading_to, timer_finish, emulator_id, building_name, building_index))
        else:
            cursor.execute("""
                UPDATE buildings 
                SET upgrading_to_level = ?,
                    status = 'upgrading',
                    timer_finish = ?,
                    last_updated = CURRENT_TIMESTAMP
                WHERE emulator_id = ? AND building_name = ? AND building_index IS NULL
            """, (upgrading_to, timer_finish, emulator_id, building_name))

        # –ó–∞–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
        cursor.execute("""
            UPDATE builders 
            SET is_busy = 1,
                building_id = ?,
                finish_time = ?
            WHERE emulator_id = ? AND builder_slot = ?
        """, (building_id, timer_finish, emulator_id, builder_slot))

        self.conn.commit()

        logger.info(f"‚úÖ –ó–¥–∞–Ω–∏–µ {building_name} –Ω–∞—á–∞–ª–æ —É–ª—É—á—à–µ–Ω–∏–µ ‚Üí Lv.{upgrading_to}")
        logger.info(f"üî® –°—Ç—Ä–æ–∏—Ç–µ–ª—å #{builder_slot} –∑–∞–Ω—è—Ç –¥–æ {timer_finish}")

    def set_building_constructed(self, emulator_id: int, building_name: str,
                                 building_index: Optional[int], timer_finish: datetime,
                                 builder_slot: int):
        """
        –ü–æ–º–µ—Ç–∏—Ç—å –∑–¥–∞–Ω–∏–µ –∫–∞–∫ —Å—Ç—Ä–æ—è—â–µ–µ—Å—è (–ø–æ—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è)

        –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ—Ç action='build' ‚Üí action='upgrade'
        –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏

        –ü–æ—Å–ª–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å level=1

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
            building_index: –∏–Ω–¥–µ–∫—Å (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö)
            timer_finish: –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏
            builder_slot: –Ω–æ–º–µ—Ä –∑–∞–Ω—è—Ç–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
        """
        cursor = self.conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–¥–∞–Ω–∏–µ
        building = self.get_building(emulator_id, building_name, building_index)

        if not building:
            logger.error(f"‚ùå –ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {building_name}")
            return

        building_id = building['id']

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ò action
        # –ü–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ action –º–µ–Ω—è–µ—Ç—Å—è —Å 'build' –Ω–∞ 'upgrade'
        if building_index is not None:
            cursor.execute("""
                UPDATE buildings 
                SET upgrading_to_level = 1,
                    status = 'upgrading',
                    timer_finish = ?,
                    action = 'upgrade',
                    last_updated = CURRENT_TIMESTAMP
                WHERE emulator_id = ? AND building_name = ? AND building_index = ?
            """, (timer_finish, emulator_id, building_name, building_index))
        else:
            cursor.execute("""
                UPDATE buildings 
                SET upgrading_to_level = 1,
                    status = 'upgrading',
                    timer_finish = ?,
                    action = 'upgrade',
                    last_updated = CURRENT_TIMESTAMP
                WHERE emulator_id = ? AND building_name = ? AND building_index IS NULL
            """, (timer_finish, emulator_id, building_name))

        # –ó–∞–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
        cursor.execute("""
            UPDATE builders 
            SET is_busy = 1,
                building_id = ?,
                finish_time = ?
            WHERE emulator_id = ? AND builder_slot = ?
        """, (building_id, timer_finish, emulator_id, builder_slot))

        self.conn.commit()

        logger.info(f"‚úÖ –ó–¥–∞–Ω–∏–µ {building_name} –Ω–∞—á–∞–ª–æ –ø–æ—Å—Ç—Ä–æ–π–∫—É ‚Üí Lv.1 (action='build' ‚Üí 'upgrade')")
        logger.info(f"üî® –°—Ç—Ä–æ–∏—Ç–µ–ª—å #{builder_slot} –∑–∞–Ω—è—Ç –¥–æ {timer_finish}")

    # ===== –†–ê–ë–û–¢–ê –°–û –°–¢–†–û–ò–¢–ï–õ–Ø–ú–ò =====

    def get_free_builder(self, emulator_id: int) -> Optional[int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è

        Returns:
            int: –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –≤—Å–µ –∑–∞–Ω—è—Ç—ã
        """
        cursor = self.conn.cursor()

        cursor.execute("""
            SELECT builder_slot FROM builders 
            WHERE emulator_id = ? AND is_busy = 0
            ORDER BY builder_slot
            LIMIT 1
        """, (emulator_id,))

        row = cursor.fetchone()

        return row[0] if row else None

    def free_builder(self, emulator_id: int, builder_slot: int):
        """
        –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—è

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞
            builder_slot: –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
        """
        cursor = self.conn.cursor()

        cursor.execute("""
            UPDATE builders 
            SET is_busy = 0,
                building_id = NULL,
                finish_time = NULL
            WHERE emulator_id = ? AND builder_slot = ?
        """, (emulator_id, builder_slot))

        self.conn.commit()

        logger.info(f"‚úÖ –°—Ç—Ä–æ–∏—Ç–µ–ª—å #{builder_slot} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")

    def get_busy_builders_count(self, emulator_id: int) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π

        Returns:
            int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π
        """
        cursor = self.conn.cursor()

        cursor.execute("""
            SELECT COUNT(*) FROM builders 
            WHERE emulator_id = ? AND is_busy = 1
        """, (emulator_id,))

        return cursor.fetchone()[0]

    # ===== –õ–û–ì–ò–ö–ê –í–´–ë–û–†–ê –°–õ–ï–î–£–Æ–©–ï–ì–û –ó–î–ê–ù–ò–Ø =====

    def _check_intermediate_buildings_ready(self, emulator_id: int, lord_level: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–∫–∞—á–∫–æ–π –õ–æ—Ä–¥–∞

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞
            lord_level: —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞

        Returns:
            bool: True –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã
        """
        config_key = f"lord_{lord_level}"
        config = self.building_config.get(config_key)

        if not config:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–¥–∞–Ω–∏—è –∫—Ä–æ–º–µ –õ–æ—Ä–¥–∞
        for building_cfg in config['buildings']:
            name = building_cfg['name']

            if name == "–õ–æ—Ä–¥":
                continue

            count = building_cfg['count']
            target = building_cfg['target_level']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∑–¥–∞–Ω–∏–µ
            if count > 1:
                for index in range(1, count + 1):
                    building = self.get_building(emulator_id, name, index)

                    if not building:
                        logger.debug(f"‚è∏Ô∏è –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –∑–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {name} #{index}")
                        return False

                    if building['current_level'] < target:
                        logger.debug(f"‚è∏Ô∏è –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –∑–¥–∞–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ: {name} #{index} ({building['current_level']}/{target})")
                        return False
            else:
                building = self.get_building(emulator_id, name, None)

                if not building:
                    logger.debug(f"‚è∏Ô∏è –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –∑–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {name}")
                    return False

                if building['current_level'] < target:
                    logger.debug(f"‚è∏Ô∏è –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –∑–¥–∞–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ: {name} ({building['current_level']}/{target})")
                    return False

        return True

    def _can_construct_building(self, emulator_id: int, building_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–∞–Ω–∏–µ

        –î–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã —É—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞ –±—ã–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è

        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å
        """
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞
        lord = self.get_building(emulator_id, "–õ–æ—Ä–¥")

        if not lord:
            return False

        lord_level = lord['current_level']

        # –ò—â–µ–º –≤ –∫–∞–∫–æ–º –∫–æ–Ω—Ñ–∏–≥–µ —ç—Ç–æ –∑–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è
        for config_key, config in self.building_config.items():
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "lord_13" ‚Üí 13)
            required_lord_level = int(config_key.split('_')[1])

            for building_cfg in config['buildings']:
                if building_cfg['name'] == building_name and building_cfg.get('action') == 'build':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π
                    if lord_level >= required_lord_level:
                        return True

        return False

    def get_next_building_to_upgrade(self, emulator: dict,
                                    auto_scan: bool = True) -> Optional[Dict]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏

        –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï–ú –µ—Å–ª–∏ level=0

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            auto_scan: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ level=0

        Returns:
            dict: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–¥–∞–Ω–∏–∏ –∏–ª–∏ None
        """
        emulator_id = emulator.get('id', 0)
        emulator_name = emulator.get('name', f'Emulator-{emulator_id}')

        # 1. –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞
        lord = self.get_building(emulator_id, "–õ–æ—Ä–¥")

        if not lord:
            logger.error(f"[{emulator_name}] ‚ùå –õ–æ—Ä–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return None

        lord_level = lord['current_level']

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞ = 0, —Å–∫–∞–Ω–∏—Ä—É–µ–º –µ–≥–æ
        if lord_level == 0:
            if auto_scan:
                logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, —Å–∫–∞–Ω–∏—Ä—É–µ–º...")
                success = self.scan_building_level(emulator, "–õ–æ—Ä–¥", None)

                if not success:
                    logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –õ–æ—Ä–¥–∞")
                    return None

                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –õ–æ—Ä–¥–∞
                lord = self.get_building(emulator_id, "–õ–æ—Ä–¥")
                lord_level = lord['current_level']
            else:
                logger.error(f"[{emulator_name}] ‚ùå –£—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (level=0)")
                return None

        logger.debug(f"[{emulator_name}] –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞: {lord_level}")

        # 2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        config_key = f"lord_{lord_level}"
        config = self.building_config.get(config_key)

        if not config:
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è {config_key}")
            return None

        # 3. –ü—Ä–æ–π—Ç–∏ –ø–æ —Å–ø–∏—Å–∫—É –∑–¥–∞–Ω–∏–π –ü–û –ü–û–†–Ø–î–ö–£
        for building_cfg in config['buildings']:
            name = building_cfg['name']
            count = building_cfg['count']
            target = building_cfg['target_level']
            btype = building_cfg['type']
            action = building_cfg.get('action', 'upgrade')

            # 4. –ï—Å–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ (count > 1)
            if count > 1:
                # –ù–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ —Å –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ú —É—Ä–æ–≤–Ω–µ–º –∏–∑ –≥—Ä—É–ø–ø—ã
                for index in range(1, count + 1):
                    building = self.get_building(emulator_id, name, index)

                    if not building:
                        # –ó–¥–∞–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å
                        if action == 'build':
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏
                            if self._can_construct_building(emulator_id, name):
                                return {
                                    'name': name,
                                    'index': index,
                                    'current_level': 0,
                                    'target_level': target,
                                    'is_lord': False,
                                    'action': 'construct'
                                }
                        continue

                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ level=0 –∏ action='upgrade', —Å–∫–∞–Ω–∏—Ä—É–µ–º
                    if building['current_level'] == 0 and action == 'upgrade':
                        if auto_scan:
                            logger.warning(f"[{emulator_name}] ‚ö†Ô∏è {name} #{index}: —É—Ä–æ–≤–µ–Ω—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, —Å–∫–∞–Ω–∏—Ä—É–µ–º...")
                            success = self.scan_building_level(emulator, name, index)

                            if not success:
                                logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å {name} #{index}")
                                continue

                            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è
                            building = self.get_building(emulator_id, name, index)
                        else:
                            logger.warning(f"[{emulator_name}] ‚ö†Ô∏è {name} #{index}: —É—Ä–æ–≤–µ–Ω—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (level=0), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue

                    # –ï—Å–ª–∏ action='build' –∏ level=0 - –∑–¥–∞–Ω–∏–µ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if action == 'build' and building['current_level'] == 0:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è —É–ª—É—á—à–∞—Ç—å –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –õ–æ—Ä–¥–∞
                    if building['current_level'] + 1 > lord_level:
                        logger.debug(f"[{emulator_name}] ‚è∏Ô∏è {name} #{index}: —É—Ä–æ–≤–µ–Ω—å {building['current_level']+1} > –õ–æ—Ä–¥ {lord_level}")
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –Ω–µ —É–ª—É—á—à–∞–µ—Ç—Å—è –ª–∏ + –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–æ target
                    if (building['status'] != 'upgrading' and
                        building['current_level'] < target):
                        return {
                            'name': name,
                            'index': index,
                            'current_level': building['current_level'],
                            'target_level': target,
                            'is_lord': (name == "–õ–æ—Ä–¥"),
                            'action': action
                        }

            # 5. –ï—Å–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ (count = 1)
            else:
                building = self.get_building(emulator_id, name, None)

                if not building:
                    # –ó–¥–∞–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å
                    if action == 'build':
                        if self._can_construct_building(emulator_id, name):
                            return {
                                'name': name,
                                'index': None,
                                'current_level': 0,
                                'target_level': target,
                                'is_lord': (name == "–õ–æ—Ä–¥"),
                                'action': 'construct'
                            }
                    continue

                # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ level=0 –∏ action='upgrade', —Å–∫–∞–Ω–∏—Ä—É–µ–º
                if building['current_level'] == 0 and action == 'upgrade':
                    if auto_scan:
                        logger.warning(f"[{emulator_name}] ‚ö†Ô∏è {name}: —É—Ä–æ–≤–µ–Ω—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, —Å–∫–∞–Ω–∏—Ä—É–µ–º...")
                        success = self.scan_building_level(emulator, name, None)

                        if not success:
                            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å {name}")
                            continue

                        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è
                        building = self.get_building(emulator_id, name, None)
                    else:
                        logger.warning(f"[{emulator_name}] ‚ö†Ô∏è {name}: —É—Ä–æ–≤–µ–Ω—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (level=0), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue

                # –ï—Å–ª–∏ action='build' –∏ level=0 - –∑–¥–∞–Ω–∏–µ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if action == 'build' and building['current_level'] == 0:
                    continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –õ–æ—Ä–¥–∞: –Ω–µ–ª—å–∑—è —É–ª—É—á—à–∞—Ç—å –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ
                if name == "–õ–æ—Ä–¥":
                    all_ready = self._check_intermediate_buildings_ready(emulator_id, lord_level)
                    if not all_ready:
                        logger.debug(f"[{emulator_name}] ‚è∏Ô∏è –õ–æ—Ä–¥: –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–¥–∞–Ω–∏—è –Ω–µ –≥–æ—Ç–æ–≤—ã")
                        continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è —É–ª—É—á—à–∞—Ç—å –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –õ–æ—Ä–¥–∞ (–∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –õ–æ—Ä–¥–∞)
                if name != "–õ–æ—Ä–¥" and building['current_level'] + 1 > lord_level:
                    logger.debug(f"[{emulator_name}] ‚è∏Ô∏è {name}: —É—Ä–æ–≤–µ–Ω—å {building['current_level']+1} > –õ–æ—Ä–¥ {lord_level}")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –Ω–µ —É–ª—É—á—à–∞–µ—Ç—Å—è –ª–∏ + –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–æ target
                if (building['status'] != 'upgrading' and
                    building['current_level'] < target):
                    return {
                        'name': name,
                        'index': None,
                        'current_level': building['current_level'],
                        'target_level': target,
                        'is_lord': (name == "–õ–æ—Ä–¥"),
                        'action': action
                    }

        # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        logger.info(f"[{emulator_name}] ‚úÖ –í—Å–µ –∑–¥–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –õ–æ—Ä–¥–∞ –ø—Ä–æ–∫–∞—á–∞–Ω—ã")
        return None

    # ===== –ó–ê–ú–û–†–û–ó–ö–ê –≠–ú–£–õ–Ø–¢–û–†–ê =====

    def freeze_emulator(self, emulator_id: int, hours: int = 6, reason: str = "–ù–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"):
        """
        –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞
            hours: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∑–∞–º–æ—Ä–æ–∑–∫–∏
            reason: –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏
        """
        cursor = self.conn.cursor()

        freeze_until = datetime.now() + timedelta(hours=hours)

        cursor.execute("""
            INSERT OR REPLACE INTO emulator_freeze 
            (emulator_id, freeze_until, reason)
            VALUES (?, ?, ?)
        """, (emulator_id, freeze_until, reason))

        self.conn.commit()

        logger.warning(f"‚ùÑÔ∏è –≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–æ {freeze_until} ({reason})")

    def is_emulator_frozen(self, emulator_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω –ª–∏ —ç–º—É–ª—è—Ç–æ—Ä

        Returns:
            bool: True –µ—Å–ª–∏ —ç–º—É–ª—è—Ç–æ—Ä –∑–∞–º–æ—Ä–æ–∂–µ–Ω
        """
        cursor = self.conn.cursor()

        cursor.execute("""
            SELECT freeze_until FROM emulator_freeze 
            WHERE emulator_id = ?
        """, (emulator_id,))

        row = cursor.fetchone()

        if not row:
            return False

        freeze_until = datetime.fromisoformat(row[0])

        if datetime.now() < freeze_until:
            return True
        else:
            # –ó–∞–º–æ—Ä–æ–∑–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ - —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            cursor.execute("""
                DELETE FROM emulator_freeze WHERE emulator_id = ?
            """, (emulator_id,))
            self.conn.commit()
            return False

    def unfreeze_emulator(self, emulator_id: int):
        """
        –†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞
        """
        cursor = self.conn.cursor()

        cursor.execute("""
            DELETE FROM emulator_freeze WHERE emulator_id = ?
        """, (emulator_id,))

        self.conn.commit()

        logger.info(f"‚úÖ –≠–º—É–ª—è—Ç–æ—Ä {emulator_id} —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω")