"""
–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–∞–Ω–∏–π –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫–∞—á–∫–æ–π –∑–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ SQLite

–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-01-16
"""

import os
import sqlite3
import yaml
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple, Any
from utils.logger import logger
from utils.image_recognition import find_image, get_screenshot
import re

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class BuildingDatabase:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π

    –£–ø—Ä–∞–≤–ª—è–µ—Ç:
    - –£—Ä–æ–≤–Ω—è–º–∏ –∑–¥–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞
    - –°—Ç–∞—Ç—É—Å–æ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π (—Å–≤–æ–±–æ–¥–µ–Ω/–∑–∞–Ω—è—Ç)
    - –ó–∞–º–æ—Ä–æ–∑–∫–æ–π —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    - –õ–æ–≥–∏–∫–æ–π –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏
    """

    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    DB_PATH = os.path.join(BASE_DIR, 'data', 'database', 'bot.db')

    # –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –ø–æ—Ä—è–¥–∫–∞ –ø—Ä–æ–∫–∞—á–∫–∏
    CONFIG_PATH = os.path.join(BASE_DIR, 'configs', 'building_order.yaml')

    # –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ –∏–∫–æ–Ω–æ–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π (x1, y1, x2, y2)
    BUILDERS_SEARCH_AREA = (10, 115, 145, 179)

    # –®–∞–±–ª–æ–Ω—ã –∏–∫–æ–Ω–æ–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π
    BUILDER_TEMPLATES = {
        (0, 3): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_0_3.png'),
        (1, 3): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_1_3.png'),
        (2, 3): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_2_3.png'),
        (3, 3): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_3_3.png'),
        (0, 4): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_0_4.png'),
        (1, 4): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_1_4.png'),
        (2, 4): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_2_4.png'),
        (3, 4): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_3_4.png'),
        (4, 4): os.path.join(BASE_DIR, 'data', 'templates', 'building', 'builders_4_4.png'),
    }

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(self.DB_PATH), exist_ok=True)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        self.conn = sqlite3.connect(self.DB_PATH, check_same_thread=False)
        self.conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–æ–Ω–∫–∞–º –ø–æ –∏–º–µ–Ω–∏

        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
        self._create_tables()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ—Ä—è–¥–∫–∞ –ø—Ä–æ–∫–∞—á–∫–∏
        self.building_config = self._load_building_config()

        logger.info(f"‚úÖ BuildingDatabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.DB_PATH}")

    def _create_tables(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –ë–î –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        cursor = self.conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –∑–¥–∞–Ω–∏–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS buildings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                emulator_id INTEGER NOT NULL,
                building_name TEXT NOT NULL,
                building_type TEXT NOT NULL,
                building_index INTEGER,
                current_level INTEGER NOT NULL DEFAULT 0,
                upgrading_to_level INTEGER,
                target_level INTEGER NOT NULL,
                status TEXT NOT NULL DEFAULT 'idle',
                timer_finish TIMESTAMP,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(emulator_id, building_name, building_index)
            )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS builders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                emulator_id INTEGER NOT NULL,
                builder_slot INTEGER NOT NULL,
                is_busy BOOLEAN NOT NULL DEFAULT 0,
                building_id INTEGER,
                finish_time TIMESTAMP,
                FOREIGN KEY (building_id) REFERENCES buildings(id),
                UNIQUE(emulator_id, builder_slot)
            )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS emulator_freeze (
                emulator_id INTEGER PRIMARY KEY,
                freeze_until TIMESTAMP NOT NULL,
                reason TEXT
            )
        """)

        self.conn.commit()
        logger.debug("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã")

    def _load_building_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Ä—è–¥–∫–∞ –ø—Ä–æ–∫–∞—á–∫–∏ –∏–∑ YAML"""
        try:
            with open(self.CONFIG_PATH, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            logger.debug(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω: {self.CONFIG_PATH}")
            return config
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.CONFIG_PATH}")
            return {}
        except yaml.YAMLError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {e}")
            return {}

    # ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –≠–ú–£–õ–Ø–¢–û–†–ê =====

    def is_emulator_initialized(self, emulator_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –æ –∑–¥–∞–Ω–∏—è—Ö –¥–ª—è —ç—Ç–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞?

        Returns:
            True –µ—Å–ª–∏ —ç–º—É–ª—è—Ç–æ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        """
        cursor = self.conn.cursor()
        cursor.execute(
            "SELECT COUNT(*) FROM buildings WHERE emulator_id = ?",
            (emulator_id,)
        )
        count = cursor.fetchone()[0]
        return count > 0

    def init_emulator_buildings(self, emulator_id: int, buildings_data: List[Dict]):
        """
        –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∑–∞–ø–∏—Å–∞—Ç—å —É—Ä–æ–≤–Ω–∏ –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞
            buildings_data: —Å–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π [{'name': '–£–ª–µ–π', 'level': 8, 'index': 1}, ...]
        """
        cursor = self.conn.cursor()

        logger.info(f"üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–¥–∞–Ω–∏–π –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

        for building in buildings_data:
            name = building['name']
            level = building['level']
            index = building.get('index')  # None –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–¥–∞–Ω–∏–π

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ —Ü–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            building_info = self._find_building_in_config(name)

            if not building_info:
                logger.warning(f"‚ö†Ô∏è –ó–¥–∞–Ω–∏–µ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            btype = building_info['type']
            target = building_info['target_level']

            # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            cursor.execute("""
                INSERT OR REPLACE INTO buildings 
                (emulator_id, building_name, building_type, building_index, 
                 current_level, target_level, status, last_updated)
                VALUES (?, ?, ?, ?, ?, ?, 'idle', CURRENT_TIMESTAMP)
            """, (emulator_id, name, btype, index, level, target))

        self.conn.commit()
        logger.success(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(buildings_data)} –∑–¥–∞–Ω–∏–π")

    def init_emulator_builders(self, emulator_id: int, slots: int = 3):
        """
        –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞
            slots: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π (3 –∏–ª–∏ 4)
        """
        cursor = self.conn.cursor()

        logger.info(f"üî® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {slots} —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}")

        for slot in range(1, slots + 1):
            cursor.execute("""
                INSERT OR IGNORE INTO builders 
                (emulator_id, builder_slot, is_busy)
                VALUES (?, ?, 0)
            """, (emulator_id, slot))

        self.conn.commit()
        logger.success(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {slots} —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π")

    def _find_building_in_config(self, building_name: str) -> Optional[Dict]:
        """
        –ù–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∏ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        –ò—â–µ—Ç –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        """
        for lord_level, config in self.building_config.items():
            for building in config['buildings']:
                if building['name'] == building_name:
                    return building
        return None

    # ===== –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê –°–¢–†–û–ò–¢–ï–õ–ï–ô =====

    def detect_builders_count(self, emulator: dict) -> Tuple[int, int]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ OCR

        –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞: (10, 115, 145, 179) - –∫—Ä–∞—Å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
        –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞: "0/3", "1/3", "2/4" –∏ —Ç.–¥.

        Args:
            emulator: –û–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞ —Å –ø–æ–ª—è–º–∏ {id, name, port}

        Returns:
            (busy_count, total_count) - –Ω–∞–ø—Ä–∏–º–µ—Ä (1, 3) –æ–∑–Ω–∞—á–∞–µ—Ç 1 –∑–∞–Ω—è—Ç –∏–∑ 3 –≤—Å–µ–≥–æ

        Raises:
            ValueError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç

        Examples:
            >>> detect_builders_count({'id': 0, 'name': 'LD', 'port': 5554})
            (0, 3)  # –í—Å–µ 3 —Å—Ç—Ä–æ–∏—Ç–µ–ª—è —Å–≤–æ–±–æ–¥–Ω—ã

            >>> detect_builders_count({'id': 1, 'name': 'LD-1', 'port': 5556})
            (2, 4)  # 2 –∑–∞–Ω—è—Ç—ã –∏–∑ 4 —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π
        """
        from utils.ocr_engine import OCREngine
        from utils.image_recognition import get_screenshot
        # import cv2  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É

        # –ü–æ–ª—É—á–∞–µ–º ID —ç–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –ª–æ–≥–æ–≤
        emulator_id = emulator.get('id', 0)
        emulator_name = emulator.get('name', f'Emulator-{emulator_id}')

        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç (—Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞)
        screenshot = get_screenshot(emulator)
        if screenshot is None:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_name}")
            return (0, 3)  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
        x1, y1, x2, y2 = self.BUILDERS_SEARCH_AREA  # (10, 115, 145, 179)

        # –°–æ–∑–¥–∞–µ–º OCR –¥–≤–∏–∂–æ–∫ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω)
        if not hasattr(self, '_ocr_engine'):
            self._ocr_engine = OCREngine(lang='en')  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è —Ü–∏—Ñ—Ä
            logger.debug("‚úÖ OCR –¥–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π")

        # –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û: –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞ —Ä–∞–∑–º—ã—Ç–æ–º —Ñ–æ–Ω–µ
        # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ OCR –ø–ª–æ—Ö–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ü–∏—Ñ—Ä—ã:
        # region_crop = screenshot[y1:y2, x1:x2]
        # gray = cv2.cvtColor(region_crop, cv2.COLOR_BGR2GRAY)
        # # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        # gray = cv2.convertScaleAbs(gray, alpha=1.5, beta=30)
        # # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è (–¥–µ–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ç—á–µ)
        # _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        # # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ BGR –¥–ª—è OCR
        # preprocessed = cv2.cvtColor(binary, cv2.COLOR_GRAY2BGR)
        # # –ò—Å–ø–æ–ª—å–∑—É–µ–º preprocessed –≤–º–µ—Å—Ç–æ screenshot –≤ recognize_text

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –æ–±–ª–∞—Å—Ç–∏
        elements = self._ocr_engine.recognize_text(
            screenshot,
            region=(x1, y1, x2, y2),
            min_confidence=0.5  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä
        )

        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "X/Y" –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        builder_pattern = re.compile(r'(\d+)\s*/\s*(\d+)')

        for element in elements:
            text = element['text'].strip()
            match = builder_pattern.search(text)

            if match:
                busy = int(match.group(1))
                total = int(match.group(2))

                # –í–∞–ª–∏–¥–∞—Ü–∏—è (–≤ –∏–≥—Ä–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 3 –∏–ª–∏ 4 —Å—Ç—Ä–æ–∏—Ç–µ–ª—è)
                if total in [3, 4] and 0 <= busy <= total:
                    logger.info(f"üî® –°—Ç—Ä–æ–∏—Ç–µ–ª–∏: {busy}/{total} (—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —á–µ—Ä–µ–∑ OCR)")
                    return (busy, total)
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {busy}/{total}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ - –ø—Ä–æ–±—É–µ–º —Å –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        logger.debug("üîç –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —Å min_confidence=0.3")

        elements = self._ocr_engine.recognize_text(
            screenshot,
            region=(x1, y1, x2, y2),
            min_confidence=0.3  # –ï—â–µ –Ω–∏–∂–µ –¥–ª—è —Ü–∏—Ñ—Ä –Ω–∞ —Ä–∞–∑–º—ã—Ç–æ–º —Ñ–æ–Ω–µ
        )

        for element in elements:
            text = element['text'].strip()
            match = builder_pattern.search(text)

            if match:
                busy = int(match.group(1))
                total = int(match.group(2))

                if total in [3, 4] and 0 <= busy <= total:
                    logger.info(f"üî® –°—Ç—Ä–æ–∏—Ç–µ–ª–∏: {busy}/{total} (—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é)")
                    return (busy, total)

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ - –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ª–æ—Ç—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π")
        logger.debug(f"üìä –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {[e['text'] for e in elements]}")

        # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
        logger.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0/3")
        return (0, 3)

    # ===== –†–ê–ë–û–¢–ê –° –ó–î–ê–ù–ò–Ø–ú–ò =====

    def get_building(self, emulator_id: int, building_name: str,
                     building_index: Optional[int] = None) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–∞–Ω–∏–∏

        Returns:
            dict —Å –ø–æ–ª—è–º–∏: id, name, type, index, current_level, upgrading_to_level,
                          target_level, status, timer_finish
        """
        cursor = self.conn.cursor()

        if building_index is not None:
            cursor.execute("""
                SELECT * FROM buildings 
                WHERE emulator_id = ? AND building_name = ? AND building_index = ?
            """, (emulator_id, building_name, building_index))
        else:
            cursor.execute("""
                SELECT * FROM buildings 
                WHERE emulator_id = ? AND building_name = ? AND building_index IS NULL
            """, (emulator_id, building_name))

        row = cursor.fetchone()

        if not row:
            return None

        return dict(row)

    def get_lord_level(self, emulator_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞"""
        lord = self.get_building(emulator_id, "–õ–æ—Ä–¥")

        if not lord:
            logger.warning(f"‚ö†Ô∏è –õ–æ—Ä–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 10")
            return 10

        return lord['current_level']

    def update_building_level(self, emulator_id: int, building_name: str,
                              new_level: int, building_index: Optional[int] = None):
        """–û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏"""
        cursor = self.conn.cursor()

        if building_index is not None:
            cursor.execute("""
                UPDATE buildings 
                SET current_level = ?, 
                    upgrading_to_level = NULL,
                    status = 'idle',
                    timer_finish = NULL,
                    last_updated = CURRENT_TIMESTAMP
                WHERE emulator_id = ? AND building_name = ? AND building_index = ?
            """, (new_level, emulator_id, building_name, building_index))
        else:
            cursor.execute("""
                UPDATE buildings 
                SET current_level = ?, 
                    upgrading_to_level = NULL,
                    status = 'idle',
                    timer_finish = NULL,
                    last_updated = CURRENT_TIMESTAMP
                WHERE emulator_id = ? AND building_name = ? AND building_index IS NULL
            """, (new_level, emulator_id, building_name))

        self.conn.commit()
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω —É—Ä–æ–≤–µ–Ω—å: {building_name} ‚Üí {new_level}")

    def set_building_upgrading(self, emulator_id: int, building_name: str,
                               building_index: Optional[int], timer_finish: datetime,
                               builder_slot: int):
        """
        –ü–æ–º–µ—Ç–∏—Ç—å –∑–¥–∞–Ω–∏–µ –∫–∞–∫ —É–ª—É—á—à–∞—é—â–µ–µ—Å—è

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
            building_index: –∏–Ω–¥–µ–∫—Å (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö)
            timer_finish: –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏
            builder_slot: –Ω–æ–º–µ—Ä –∑–∞–Ω—è—Ç–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
        """
        cursor = self.conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–¥–∞–Ω–∏–µ
        building = self.get_building(emulator_id, building_name, building_index)

        if not building:
            logger.error(f"‚ùå –ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {building_name}")
            return

        building_id = building['id']
        current_level = building['current_level']
        upgrading_to = current_level + 1

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–∞–Ω–∏—è
        if building_index is not None:
            cursor.execute("""
                UPDATE buildings 
                SET upgrading_to_level = ?,
                    status = 'upgrading',
                    timer_finish = ?,
                    last_updated = CURRENT_TIMESTAMP
                WHERE emulator_id = ? AND building_name = ? AND building_index = ?
            """, (upgrading_to, timer_finish, emulator_id, building_name, building_index))
        else:
            cursor.execute("""
                UPDATE buildings 
                SET upgrading_to_level = ?,
                    status = 'upgrading',
                    timer_finish = ?,
                    last_updated = CURRENT_TIMESTAMP
                WHERE emulator_id = ? AND building_name = ? AND building_index IS NULL
            """, (upgrading_to, timer_finish, emulator_id, building_name))

        # –ó–∞–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
        cursor.execute("""
            UPDATE builders 
            SET is_busy = 1,
                building_id = ?,
                finish_time = ?
            WHERE emulator_id = ? AND builder_slot = ?
        """, (building_id, timer_finish, emulator_id, builder_slot))

        self.conn.commit()
        logger.info(f"‚è≥ –ó–¥–∞–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç—Å—è: {building_name} {current_level}‚Üí{upgrading_to}")

    def check_finished_buildings(self, emulator_id: int) -> List[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫–∏–µ –∑–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ

        Returns:
            —Å–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π –≥–¥–µ timer_finish <= now
        """
        cursor = self.conn.cursor()

        cursor.execute("""
            SELECT * FROM buildings 
            WHERE emulator_id = ? 
            AND status = 'upgrading' 
            AND timer_finish <= CURRENT_TIMESTAMP
        """, (emulator_id,))

        rows = cursor.fetchall()
        return [dict(row) for row in rows]

    def complete_building(self, emulator_id: int, building_id: int):
        """
        –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫—É –∑–¥–∞–Ω–∏—è

        - –£–≤–µ–ª–∏—á–∏—Ç—å current_level
        - –°–±—Ä–æ—Å–∏—Ç—å upgrading_to_level –∏ timer_finish
        - –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
        - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ target_level
        """
        cursor = self.conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–∞–Ω–∏–∏
        cursor.execute("SELECT * FROM buildings WHERE id = ?", (building_id,))
        building = dict(cursor.fetchone())

        new_level = building['upgrading_to_level']
        target_level = building['target_level']

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        new_status = 'target_reached' if new_level >= target_level else 'idle'

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–∞–Ω–∏–µ
        cursor.execute("""
            UPDATE buildings 
            SET current_level = ?,
                upgrading_to_level = NULL,
                status = ?,
                timer_finish = NULL,
                last_updated = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (new_level, new_status, building_id))

        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
        cursor.execute("""
            UPDATE builders 
            SET is_busy = 0,
                building_id = NULL,
                finish_time = NULL
            WHERE emulator_id = ? AND building_id = ?
        """, (emulator_id, building_id))

        self.conn.commit()

        status_emoji = "üéØ" if new_status == 'target_reached' else "‚úÖ"
        logger.info(f"{status_emoji} –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {building['building_name']} ‚Üí {new_level} —É—Ä")

    # ===== –†–ê–ë–û–¢–ê –°–û –°–¢–†–û–ò–¢–ï–õ–Ø–ú–ò =====

    def get_free_builders_count(self, emulator_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π"""
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT COUNT(*) FROM builders 
            WHERE emulator_id = ? AND is_busy = 0
        """, (emulator_id,))
        return cursor.fetchone()[0]

    def get_free_builder_slot(self, emulator_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT builder_slot FROM builders 
            WHERE emulator_id = ? AND is_busy = 0
            ORDER BY builder_slot
            LIMIT 1
        """, (emulator_id,))
        row = cursor.fetchone()
        return row[0] if row else None

    def add_builder_slot(self, emulator_id: int):
        """–î–æ–±–∞–≤–∏—Ç—å 4-–π —Å–ª–æ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—è (–ø–æ—Å–ª–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –ñ–∏–ª–∏—â–∞ –õ–µ–º—É—Ä–æ–≤ IV)"""
        cursor = self.conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ 4-–π —Å–ª–æ—Ç
        cursor.execute("""
            SELECT COUNT(*) FROM builders 
            WHERE emulator_id = ? AND builder_slot = 4
        """, (emulator_id,))

        if cursor.fetchone()[0] > 0:
            logger.info("‚ÑπÔ∏è 4-–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º 4-–π —Å–ª–æ—Ç
        cursor.execute("""
            INSERT INTO builders (emulator_id, builder_slot, is_busy)
            VALUES (?, 4, 0)
        """, (emulator_id,))

        self.conn.commit()
        logger.success("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω 4-–π —Å–ª–æ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—è!")

    # ===== –õ–û–ì–ò–ö–ê –ü–†–û–ö–ê–ß–ö–ò =====

    def get_next_building_to_upgrade(self, emulator_id: int) -> Optional[Dict]:
        """
        –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏

        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞
        2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
        3. –ü—Ä–æ–π—Ç–∏ –ø–æ —Å–ø–∏—Å–∫—É –∑–¥–∞–Ω–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É
        4. –ù–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ –∑–¥–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∫–∞—á–∞—Ç—å

        Returns:
            {
                'name': '–£–ª–µ–π',
                'index': 2,
                'current_level': 8,
                'target_level': 10,
                'is_lord': False,
                'action': 'upgrade' –∏–ª–∏ 'build'
            }
            –∏–ª–∏ None –µ—Å–ª–∏ –≤—Å—ë –≥–æ—Ç–æ–≤–æ
        """
        # 1. –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞
        lord_level = self.get_lord_level(emulator_id)

        # 2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        config_key = f"lord_{lord_level}"
        config = self.building_config.get(config_key)

        if not config:
            logger.error(f"‚ùå –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è {config_key}")
            return None

        # 3. –ü—Ä–æ–π—Ç–∏ –ø–æ —Å–ø–∏—Å–∫—É –∑–¥–∞–Ω–∏–π –ü–û –ü–û–†–Ø–î–ö–£
        for building_cfg in config['buildings']:
            name = building_cfg['name']
            count = building_cfg['count']
            target = building_cfg['target_level']
            btype = building_cfg['type']
            action = building_cfg.get('action', 'upgrade')

            # 4. –ï—Å–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ (count > 1)
            if count > 1:
                # –ù–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ —Å –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ú —É—Ä–æ–≤–Ω–µ–º –∏–∑ –≥—Ä—É–ø–ø—ã
                for index in range(1, count + 1):
                    building = self.get_building(emulator_id, name, index)

                    if not building:
                        # –ó–¥–∞–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å
                        if action == 'build':
                            return {
                                'name': name,
                                'index': index,
                                'current_level': 0,
                                'target_level': target,
                                'is_lord': False,
                                'action': 'build'
                            }
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –Ω–µ —É–ª—É—á—à–∞–µ—Ç—Å—è –ª–∏ + –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–æ target
                    if (building['status'] != 'upgrading' and
                            building['current_level'] < target):
                        return {
                            'name': name,
                            'index': index,
                            'current_level': building['current_level'],
                            'target_level': target,
                            'is_lord': False,
                            'action': action
                        }

            # 5. –ï—Å–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
            else:
                building = self.get_building(emulator_id, name)

                if not building:
                    # –ó–¥–∞–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å
                    if action == 'build':
                        return {
                            'name': name,
                            'index': None,
                            'current_level': 0,
                            'target_level': target,
                            'is_lord': (name == "–õ–æ—Ä–¥"),
                            'action': 'build'
                        }
                    continue

                if (building['status'] != 'upgrading' and
                        building['current_level'] < target):
                    return {
                        'name': name,
                        'index': None,
                        'current_level': building['current_level'],
                        'target_level': target,
                        'is_lord': (name == "–õ–æ—Ä–¥"),
                        'action': action
                    }

        # 6. –í—Å–µ –∑–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ –≥–æ—Ç–æ–≤—ã
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        next_level = lord_level + 1
        next_config_key = f"lord_{next_level}"
        next_config = self.building_config.get(next_config_key)

        if not next_config:
            # –î–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ (lord_18 –∑–∞–≤–µ—Ä—à—ë–Ω)
            logger.info(f"üéâ –≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –∑–∞–≤–µ—Ä—à–∏–ª –≤—Å–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏!")
            return None

        # 7. –ü–µ—Ä–≤–æ–µ –∑–¥–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–æ–Ω—Ñ–∏–≥–µ - –õ–æ—Ä–¥
        first_building = next_config['buildings'][0]

        if first_building['name'] != "–õ–æ—Ä–¥":
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞: –ø–µ—Ä–≤–æ–µ –∑–¥–∞–Ω–∏–µ –≤ {next_config_key} –Ω–µ –õ–æ—Ä–¥!")
            return None

        # 8. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –õ–æ—Ä–¥–∞ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏
        lord = self.get_building(emulator_id, "–õ–æ—Ä–¥")

        return {
            'name': "–õ–æ—Ä–¥",
            'index': None,
            'current_level': lord['current_level'],
            'target_level': first_building['target_level'],
            'is_lord': True,
            'action': 'upgrade'
        }

    def can_build_new_buildings(self, emulator_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–Ω–æ –ª–∏ —Å—Ç—Ä–æ–∏—Ç—å –ù–û–í–´–ï –∑–¥–∞–Ω–∏—è?

        –ù–µ–ª—å–∑—è —Å—Ç—Ä–æ–∏—Ç—å –µ—Å–ª–∏ –õ–æ—Ä–¥ —Å–µ–π—á–∞—Å —É–ª—É—á—à–∞–µ—Ç—Å—è
        """
        lord = self.get_building(emulator_id, "–õ–æ—Ä–¥")

        if not lord:
            return True

        if lord['status'] == 'upgrading':
            logger.debug("‚è≥ –õ–æ—Ä–¥ —É–ª—É—á—à–∞–µ—Ç—Å—è - –Ω–æ–≤—ã–µ –∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç—å –Ω–µ–ª—å–∑—è")
            return False

        return True

    # ===== –ó–ê–ú–û–†–û–ó–ö–ê –≠–ú–£–õ–Ø–¢–û–†–û–í =====

    def freeze_emulator(self, emulator_id: int, reason: str, hours: int = 6):
        """
        –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –Ω–∞ N —á–∞—Å–æ–≤

        Args:
            emulator_id: ID —ç–º—É–ª—è—Ç–æ—Ä–∞
            reason: –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏
            hours: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
        """
        cursor = self.conn.cursor()

        freeze_until = datetime.now() + timedelta(hours=hours)

        cursor.execute("""
            INSERT OR REPLACE INTO emulator_freeze 
            (emulator_id, freeze_until, reason)
            VALUES (?, ?, ?)
        """, (emulator_id, freeze_until, reason))

        self.conn.commit()
        logger.warning(f"‚ùÑÔ∏è –≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –∑–∞–º–æ—Ä–æ–∂–µ–Ω –Ω–∞ {hours}—á: {reason}")

    def is_emulator_frozen(self, emulator_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω –ª–∏ —ç–º—É–ª—è—Ç–æ—Ä"""
        cursor = self.conn.cursor()

        cursor.execute("""
            SELECT freeze_until FROM emulator_freeze 
            WHERE emulator_id = ? AND freeze_until > CURRENT_TIMESTAMP
        """, (emulator_id,))

        row = cursor.fetchone()
        return row is not None

    def unfreeze_emulator(self, emulator_id: int):
        """–†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä"""
        cursor = self.conn.cursor()

        cursor.execute("""
            DELETE FROM emulator_freeze 
            WHERE emulator_id = ?
        """, (emulator_id,))

        self.conn.commit()
        logger.info(f"‚òÄÔ∏è –≠–º—É–ª—è—Ç–æ—Ä {emulator_id} —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω")

    def cleanup_expired_freezes(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≥–¥–µ freeze_until —É–∂–µ –ø—Ä–æ—à–ª–æ"""
        cursor = self.conn.cursor()

        cursor.execute("""
            DELETE FROM emulator_freeze 
            WHERE freeze_until <= CURRENT_TIMESTAMP
        """)

        deleted_count = cursor.rowcount
        self.conn.commit()

        if deleted_count > 0:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} –∏—Å—Ç—ë–∫—à–∏—Ö –∑–∞–º–æ—Ä–æ–∑–æ–∫")

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
        self.conn.close()
        logger.debug("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")