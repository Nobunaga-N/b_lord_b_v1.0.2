"""
–ú–æ–¥—É–ª—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤—ã—Ö –∑–¥–∞–Ω–∏–π
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –ª–æ–ø–∞—Ç—ã

–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-01-17
"""

import os
import time
from typing import Dict, Optional, Tuple
from utils.adb_controller import tap, swipe, press_key
from utils.image_recognition import find_image, get_screenshot
from utils.logger import logger

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class BuildingConstruction:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤—ã—Ö –∑–¥–∞–Ω–∏–π

    –ü—Ä–æ—Ü–µ—Å—Å:
    1. –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–ª–æ–ø–∞—Ç–∞)
    2. –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—à–∞–±–ª–æ–Ω ‚Üí fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
    3. –ù–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ (—Å–≤–∞–π–ø—ã + —à–∞–±–ª–æ–Ω—ã)
    4. –ö–ª–∏–∫–Ω—É—Ç—å –ø–æ –∑–¥–∞–Ω–∏—é
    5. –ö–ª–∏–∫–Ω—É—Ç—å "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: –∫–Ω–æ–ø–∫–∞ –∏—Å—á–µ–∑–ª–∞ + –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    7. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ ‚Üí –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
    """

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    SHOVEL_ICON = (497, 768)
    CONFIRM_BUTTON = (327, 552)

    # –°–≤–∞–π–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–¥–∞–Ω–∏–π
    SWIPE_START = (533, 846)
    SWIPE_END = (3, 846)
    MAX_SWIPES = 4

    # –®–∞–±–ª–æ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    CATEGORY_TEMPLATES = {
        "–ü–æ–ø—É–ª—è—Ü–∏—è –°—Ç–∞–∏": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'categories', 'category_populyaciya_stai.png'),
        "–†–∞–∑–≤–∏—Ç–∏–µ": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'categories', 'category_razvitie.png'),
        "–§—Ä—É–∫—Ç—ã": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'categories', 'category_frukty.png'),
        "–õ–∏—Å—Ç—å—è": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'categories', 'category_listya.png'),
        "–ì—Ä—É–Ω—Ç": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'categories', 'category_grunt.png'),
        "–ü–µ—Å–æ–∫": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'categories', 'category_pesok.png'),
        "–ë–∏—Ç–≤–∞": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'categories', 'category_bitva.png'),
    }

    # Fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    CATEGORY_COORDS = {
        "–ü–æ–ø—É–ª—è—Ü–∏—è –°—Ç–∞–∏": (155, 400),
        "–†–∞–∑–≤–∏—Ç–∏–µ": (158, 515),
        "–§—Ä—É–∫—Ç—ã": (155, 174),
        "–õ–∏—Å—Ç—å—è": (376, 174),
        "–ì—Ä—É–Ω—Ç": (160, 291),
        "–ü–µ—Å–æ–∫": (160, 272),
        "–ë–∏—Ç–≤–∞": (271, 513),
    }

    # –ú–∞–ø–ø–∏–Ω–≥ –∑–¥–∞–Ω–∏–π –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    BUILDING_TO_CATEGORY = {
        "–ñ–∏–ª–∏—â–µ –õ–µ–º—É—Ä–æ–≤ IV": "–†–∞–∑–≤–∏—Ç–∏–µ",
        "–¶–µ–Ω—Ç—Ä –°–±–æ—Ä–∞ II": "–ë–∏—Ç–≤–∞",
        "–¶–µ–Ω—Ç—Ä –°–±–æ—Ä–∞ III": "–ë–∏—Ç–≤–∞",
        "–°–∫–ª–∞–¥ –§—Ä—É–∫—Ç–æ–≤ II": "–§—Ä—É–∫—Ç—ã",
        "–°–∫–ª–∞–¥ –õ–∏—Å—Ç—å–µ–≤ II": "–õ–∏—Å—Ç—å—è",
        "–°–∫–ª–∞–¥ –ì—Ä—É–Ω—Ç–∞ II": "–ì—Ä—É–Ω—Ç",
        "–°–∫–ª–∞–¥ –ü–µ—Å–∫–∞ II": "–ü–µ—Å–æ–∫",
        "–ñ–∏–ª–∏—â–µ –î–µ—Ç–µ–Ω—ã—à–µ–π": "–ü–æ–ø—É–ª—è—Ü–∏—è –°—Ç–∞–∏",  # (5-–µ)
    }

    # –®–∞–±–ª–æ–Ω—ã –∑–¥–∞–Ω–∏–π
    BUILDING_TEMPLATES = {
        "–ñ–∏–ª–∏—â–µ –õ–µ–º—É—Ä–æ–≤ IV": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'jiliche_lemurov_4.png'),
        "–¶–µ–Ω—Ç—Ä –°–±–æ—Ä–∞ II": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'centr_sbora_2.png'),
        "–¶–µ–Ω—Ç—Ä –°–±–æ—Ä–∞ III": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'centr_sbora_3.png'),
        "–°–∫–ª–∞–¥ –§—Ä—É–∫—Ç–æ–≤ II": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'sklad_fruktov_2.png'),
        "–°–∫–ª–∞–¥ –õ–∏—Å—Ç—å–µ–≤ II": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'sklad_listev_2.png'),
        "–°–∫–ª–∞–¥ –ì—Ä—É–Ω—Ç–∞ II": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'sklad_grunta_2.png'),
        "–°–∫–ª–∞–¥ –ü–µ—Å–∫–∞ II": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'sklad_peska_2.png'),
        "–ñ–∏–ª–∏—â–µ –î–µ—Ç–µ–Ω—ã—à–µ–π": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'jiliche_detenyshey_5.png'),
    }

    # –®–∞–±–ª–æ–Ω –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    CONFIRM_BUTTON_TEMPLATE = os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'button_confirm.png')

    # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    THRESHOLD_CATEGORY = 0.8
    THRESHOLD_BUILDING = 0.85
    THRESHOLD_BUTTON = 0.85

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω—ã
        for name, path in self.CATEGORY_TEMPLATES.items():
            exists = os.path.exists(path)
            status = "‚úÖ" if exists else "‚ö†Ô∏è"
            logger.debug(f"{status} –®–∞–±–ª–æ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{name}': {path}")

        for name, path in self.BUILDING_TEMPLATES.items():
            exists = os.path.exists(path)
            status = "‚úÖ" if exists else "‚ö†Ô∏è"
            logger.debug(f"{status} –®–∞–±–ª–æ–Ω –∑–¥–∞–Ω–∏—è '{name}': {path}")

        logger.info("‚úÖ BuildingConstruction –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def construct_building(self, emulator: Dict, building_name: str,
                          building_index: Optional[int] = None) -> bool:
        """
        –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î - –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏
            building_index: –∏–Ω–¥–µ–∫—Å (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π)

        Returns:
            True –µ—Å–ª–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        building_display = f"{building_name}"
        if building_index is not None:
            building_display += f" #{building_index}"

        logger.info(f"[{emulator_name}] üèóÔ∏è –ù–∞—á–∞–ª–æ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {building_display}")

        # –ü–æ–ø—ã—Ç–∫–∞ 1: –æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        if self._try_construct(emulator, building_name):
            logger.success(f"[{emulator_name}] ‚úÖ –ó–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ: {building_display}")
            return True

        logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
        time.sleep(2)

        # –ü–æ–ø—ã—Ç–∫–∞ 2: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        if self._try_construct(emulator, building_name):
            logger.success(f"[{emulator_name}] ‚úÖ –ó–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ 2): {building_display}")
            return True

        # –û–±–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        logger.error(f"[{emulator_name}] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å {building_display}")
        logger.error(f"[{emulator_name}] üìù –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ GUI!")
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GUI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        return False

    def _try_construct(self, emulator: Dict, building_name: str) -> bool:
        """
        –û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–∞–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        # –®–ê–ì 1: –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ—Å—Ç—Ä–æ–π–∫–∏
        if not self._open_construction_menu(emulator):
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ—Å—Ç—Ä–æ–π–∫–∏")
            return False

        # –®–ê–ì 2: –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = self.BUILDING_TO_CATEGORY.get(building_name)
        if not category:
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è {building_name}")
            return False

        if not self._select_category(emulator, category):
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}")
            return False

        # –®–ê–ì 3: –ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∑–¥–∞–Ω–∏—é
        if not self._find_and_click_building(emulator, building_name):
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ {building_name}")
            press_key(emulator, "BACK")  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
            time.sleep(1)
            return False

        # –®–ê–ì 4: –ö–ª–∏–∫–Ω—É—Ç—å "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
        if not self._click_confirm(emulator):
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
            press_key(emulator, "BACK")
            time.sleep(1)
            return False

        # –®–ê–ì 5: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ
        if not self._verify_construction(emulator, building_name):
            logger.error(f"[{emulator_name}] ‚ùå –ó–¥–∞–Ω–∏–µ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏")
            return False

        return True

    def _open_construction_menu(self, emulator: Dict) -> bool:
        """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–∫–ª–∏–∫ –ª–æ–ø–∞—Ç—ã)"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –ö–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ –ª–æ–ø–∞—Ç—ã ({self.SHOVEL_ICON[0]}, {self.SHOVEL_ICON[1]})")
        tap(emulator, x=self.SHOVEL_ICON[0], y=self.SHOVEL_ICON[1])
        time.sleep(2)  # –ñ–¥–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é

        return True

    def _select_category(self, emulator: Dict, category_name: str) -> bool:
        """
        –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–¥–∞–Ω–∏—è

        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —à–∞–±–ª–æ–Ω ‚Üí fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name}")

        # –ü–û–ü–´–¢–ö–ê 1: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω
        template_path = self.CATEGORY_TEMPLATES.get(category_name)
        if template_path and os.path.exists(template_path):
            screenshot = get_screenshot(emulator)
            result = find_image(screenshot, template_path, threshold=self.THRESHOLD_CATEGORY)

            if result:
                center_x, center_y = result['center']
                logger.debug(f"[{emulator_name}] –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω: ({center_x}, {center_y})")
                tap(emulator, x=center_x, y=center_y)
                time.sleep(1.5)
                return True

            logger.debug(f"[{emulator_name}] –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω")

        # –ü–û–ü–´–¢–ö–ê 2: Fallback –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        coords = self.CATEGORY_COORDS.get(category_name)
        if coords:
            logger.debug(f"[{emulator_name}] –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords}")
            tap(emulator, x=coords[0], y=coords[1])
            time.sleep(1.5)
            return True

        logger.error(f"[{emulator_name}] ‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    def _find_and_click_building(self, emulator: Dict, building_name: str) -> bool:
        """
        –ù–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–≤–∞–π–ø—ã + —à–∞–±–ª–æ–Ω—ã

        –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è 3 –∑–¥–∞–Ω–∏—è
        –ú–∞–∫—Å–∏–º—É–º 4 —Å–≤–∞–π–ø–∞ = 5 —Å—Ç—Ä–∞–Ω–∏—Ü
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –ü–æ–∏—Å–∫ –∑–¥–∞–Ω–∏—è: {building_name}")

        template_path = self.BUILDING_TEMPLATES.get(building_name)
        if not template_path or not os.path.exists(template_path):
            logger.error(f"[{emulator_name}] ‚ùå –®–∞–±–ª–æ–Ω –∑–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É + MAX_SWIPES —Å–≤–∞–π–ø–æ–≤
        for swipe_attempt in range(self.MAX_SWIPES + 1):

            if swipe_attempt > 0:
                logger.debug(f"[{emulator_name}] –°–≤–∞–π–ø {swipe_attempt}/{self.MAX_SWIPES}")
                swipe(emulator,
                      start_x=self.SWIPE_START[0], start_y=self.SWIPE_START[1],
                      end_x=self.SWIPE_END[0], end_y=self.SWIPE_END[1],
                      duration=300)
                time.sleep(1)

            # –ò—â–µ–º –∑–¥–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            screenshot = get_screenshot(emulator)
            result = find_image(screenshot, template_path, threshold=self.THRESHOLD_BUILDING)

            if result:
                center_x, center_y = result['center']
                logger.debug(f"[{emulator_name}] ‚úÖ –ó–¥–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: ({center_x}, {center_y})")
                tap(emulator, x=center_x, y=center_y)
                time.sleep(1.5)
                return True

        logger.error(f"[{emulator_name}] ‚ùå –ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ {self.MAX_SWIPES} —Å–≤–∞–π–ø–æ–≤")
        return False

    def _click_confirm(self, emulator: Dict) -> bool:
        """
        –ö–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"

        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —à–∞–±–ª–æ–Ω ‚Üí fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")

        # –ü–û–ü–´–¢–ö–ê 1: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω
        if os.path.exists(self.CONFIRM_BUTTON_TEMPLATE):
            screenshot = get_screenshot(emulator)
            result = find_image(screenshot, self.CONFIRM_BUTTON_TEMPLATE,
                              threshold=self.THRESHOLD_BUTTON)

            if result:
                center_x, center_y = result['center']
                logger.debug(f"[{emulator_name}] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω: ({center_x}, {center_y})")
                tap(emulator, x=center_x, y=center_y)
                time.sleep(2)
                return True

            logger.debug(f"[{emulator_name}] –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω")

        # –ü–û–ü–´–¢–ö–ê 2: Fallback –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        logger.debug(f"[{emulator_name}] –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {self.CONFIRM_BUTTON}")
        tap(emulator, x=self.CONFIRM_BUTTON[0], y=self.CONFIRM_BUTTON[1])
        time.sleep(2)
        return True

    def _verify_construction(self, emulator: Dict, building_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ

        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏—Å—á–µ–∑–ª–∞
        2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —á—Ç–æ –∑–¥–∞–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏...")

        # –ü–†–û–í–ï–†–ö–ê 1: –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏—Å—á–µ–∑–ª–∞
        time.sleep(2)
        screenshot = get_screenshot(emulator)

        if os.path.exists(self.CONFIRM_BUTTON_TEMPLATE):
            result = find_image(screenshot, self.CONFIRM_BUTTON_TEMPLATE,
                              threshold=self.THRESHOLD_BUTTON)

            if result:
                logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ –µ—â–µ –≤–∏–¥–Ω–∞")
                return False

            logger.debug(f"[{emulator_name}] ‚úÖ –ö–Ω–æ–ø–∫–∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏—Å—á–µ–∑–ª–∞")

        # –ü–†–û–í–ï–†–ö–ê 2: –ó–¥–∞–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        try:
            from functions.building.navigation_panel import NavigationPanel
            panel = NavigationPanel()

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
            if not panel.open_navigation_panel(emulator):
                logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
                return False

            # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π
            buildings = panel.parse_buildings_list(emulator)
            press_key(emulator, "BACK")  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
            time.sleep(1)

            # –ò—â–µ–º –∑–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
            for building in buildings:
                if building['name'] == building_name and building['level'] >= 1:
                    logger.success(f"[{emulator_name}] ‚úÖ –ó–¥–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {building_name} Lv.{building['level']}")
                    return True

            logger.error(f"[{emulator_name}] ‚ùå –ó–¥–∞–Ω–∏–µ {building_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
            return False

        except Exception as e:
            logger.error(f"[{emulator_name}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            return False