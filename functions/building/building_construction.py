"""
–ú–æ–¥—É–ª—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤—ã—Ö –∑–¥–∞–Ω–∏–π
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –ª–æ–ø–∞—Ç—ã

–í–µ—Ä—Å–∏—è: 1.3 (–§–ò–ù–ê–õ–¨–ù–ê–Ø)
–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 2025-01-17
–ò–∑–º–µ–Ω–µ–Ω–∏—è:
- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è swipe()
- –î–û–ë–ê–í–õ–ï–ù–û: –®–∞–≥ —Å –º–æ–ª–æ—Ç–æ—á–∫–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å" –ø–æ—Å–ª–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–∞–Ω–∏—è
"""

import os
import time
from typing import Dict, Optional
from utils.adb_controller import tap, swipe, press_key
from utils.image_recognition import find_image
from utils.logger import logger

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class BuildingConstruction:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤—ã—Ö –∑–¥–∞–Ω–∏–π"""

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    SHOVEL_ICON = (497, 768)
    CONFIRM_BUTTON = (327, 552)
    HAMMER_ICON = (268, 517)  # –ú–æ–ª–æ—Ç–æ—á–µ–∫ –Ω–∞ –º–µ—Å—Ç–µ –∑–¥–∞–Ω–∏—è
    BUILD_BUTTON = (327, 552)  # –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å" (—Ç–∞–∫–∞—è –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∫–∞–∫ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")

    # –°–≤–∞–π–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–¥–∞–Ω–∏–π
    SWIPE_START_X = 533
    SWIPE_START_Y = 846
    SWIPE_END_X = 3
    SWIPE_END_Y = 846
    MAX_SWIPES = 4

    # –®–∞–±–ª–æ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    CATEGORY_TEMPLATES = {
        "–ü–æ–ø—É–ª—è—Ü–∏—è –°—Ç–∞–∏": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'categories', 'category_populyaciya_stai.png'),
        "–†–∞–∑–≤–∏—Ç–∏–µ": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'categories', 'category_razvitie.png'),
        "–§—Ä—É–∫—Ç—ã": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'categories', 'category_frukty.png'),
        "–õ–∏—Å—Ç—å—è": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'categories', 'category_listya.png'),
        "–ì—Ä—É–Ω—Ç": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'categories', 'category_grunt.png'),
        "–ü–µ—Å–æ–∫": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'categories', 'category_pesok.png'),
        "–ë–∏—Ç–≤–∞": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'categories', 'category_bitva.png'),
    }

    # Fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    CATEGORY_COORDS = {
        "–ü–æ–ø—É–ª—è—Ü–∏—è –°—Ç–∞–∏": (155, 400),
        "–†–∞–∑–≤–∏—Ç–∏–µ": (158, 515),
        "–§—Ä—É–∫—Ç—ã": (155, 174),
        "–õ–∏—Å—Ç—å—è": (376, 174),
        "–ì—Ä—É–Ω—Ç": (160, 291),
        "–ü–µ—Å–æ–∫": (160, 272),
        "–ë–∏—Ç–≤–∞": (271, 513),
    }

    # –ú–∞–ø–ø–∏–Ω–≥ –∑–¥–∞–Ω–∏–π –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    BUILDING_TO_CATEGORY = {
        "–ñ–∏–ª–∏—â–µ –õ–µ–º—É—Ä–æ–≤ IV": "–†–∞–∑–≤–∏—Ç–∏–µ",
        "–¶–µ–Ω—Ç—Ä –°–±–æ—Ä–∞ II": "–ë–∏—Ç–≤–∞",
        "–¶–µ–Ω—Ç—Ä –°–±–æ—Ä–∞ III": "–ë–∏—Ç–≤–∞",
        "–°–∫–ª–∞–¥ –§—Ä—É–∫—Ç–æ–≤ II": "–§—Ä—É–∫—Ç—ã",
        "–°–∫–ª–∞–¥ –õ–∏—Å—Ç—å–µ–≤ II": "–õ–∏—Å—Ç—å—è",
        "–°–∫–ª–∞–¥ –ì—Ä—É–Ω—Ç–∞ II": "–ì—Ä—É–Ω—Ç",
        "–°–∫–ª–∞–¥ –ü–µ—Å–∫–∞ II": "–ü–µ—Å–æ–∫",
        "–ñ–∏–ª–∏—â–µ –î–µ—Ç–µ–Ω—ã—à–µ–π": "–ü–æ–ø—É–ª—è—Ü–∏—è –°—Ç–∞–∏",
    }

    # –®–∞–±–ª–æ–Ω—ã –∑–¥–∞–Ω–∏–π
    BUILDING_TEMPLATES = {
        "–ñ–∏–ª–∏—â–µ –õ–µ–º—É—Ä–æ–≤ IV": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'jiliche_lemurov_4.png'),
        "–¶–µ–Ω—Ç—Ä –°–±–æ—Ä–∞ II": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'centr_sbora_2.png'),
        "–¶–µ–Ω—Ç—Ä –°–±–æ—Ä–∞ III": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'centr_sbora_3.png'),
        "–°–∫–ª–∞–¥ –§—Ä—É–∫—Ç–æ–≤ II": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'sklad_fruktov_2.png'),
        "–°–∫–ª–∞–¥ –õ–∏—Å—Ç—å–µ–≤ II": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'sklad_listev_2.png'),
        "–°–∫–ª–∞–¥ –ì—Ä—É–Ω—Ç–∞ II": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'sklad_grunta_2.png'),
        "–°–∫–ª–∞–¥ –ü–µ—Å–∫–∞ II": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'sklad_peska_2.png'),
        "–ñ–∏–ª–∏—â–µ –î–µ—Ç–µ–Ω—ã—à–µ–π": os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'buildings', 'jiliche_detenyshey_5.png'),
    }

    CONFIRM_BUTTON_TEMPLATE = os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'button_confirm.png')
    HAMMER_ICON_TEMPLATE = os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'hammer_icon.png')
    BUILD_BUTTON_TEMPLATE = os.path.join(BASE_DIR, 'data', 'templates', 'building', 'construction', 'button_build.png')

    THRESHOLD_CATEGORY = 0.8
    THRESHOLD_BUILDING = 0.85
    THRESHOLD_BUTTON = 0.85
    THRESHOLD_HAMMER = 0.8
    THRESHOLD_BUILD = 0.85

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for name, path in self.CATEGORY_TEMPLATES.items():
            exists = os.path.exists(path)
            status = "‚úÖ" if exists else "‚ö†Ô∏è"
            logger.debug(f"{status} –®–∞–±–ª–æ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{name}': {path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω—ã –∑–¥–∞–Ω–∏–π
        for name, path in self.BUILDING_TEMPLATES.items():
            exists = os.path.exists(path)
            status = "‚úÖ" if exists else "‚ö†Ô∏è"
            logger.debug(f"{status} –®–∞–±–ª–æ–Ω –∑–¥–∞–Ω–∏—è '{name}': {path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –∏–∫–æ–Ω–∫–∏
        button_templates = {
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å": self.CONFIRM_BUTTON_TEMPLATE,
            "–ú–æ–ª–æ—Ç–æ—á–µ–∫": self.HAMMER_ICON_TEMPLATE,
            "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å": self.BUILD_BUTTON_TEMPLATE
        }

        for name, path in button_templates.items():
            exists = os.path.exists(path)
            status = "‚úÖ" if exists else "‚ö†Ô∏è"
            logger.debug(f"{status} –®–∞–±–ª–æ–Ω '{name}': {path}")

        logger.info("‚úÖ BuildingConstruction –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def construct_building(self, emulator: Dict, building_name: str, building_index: Optional[int] = None) -> bool:
        """–ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î - –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")
        building_display = f"{building_name}" + (f" #{building_index}" if building_index else "")

        logger.info(f"[{emulator_name}] üèóÔ∏è –ù–∞—á–∞–ª–æ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {building_display}")

        if self._try_construct(emulator, building_name):
            logger.success(f"[{emulator_name}] ‚úÖ –ó–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ: {building_display}")
            return True

        logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
        time.sleep(2)

        if self._try_construct(emulator, building_name):
            logger.success(f"[{emulator_name}] ‚úÖ –ó–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ 2): {building_display}")
            return True

        logger.error(f"[{emulator_name}] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å {building_display}")
        return False

    def _try_construct(self, emulator: Dict, building_name: str) -> bool:
        """–û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–∞–Ω–∏—è"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        # –®–ê–ì 1: –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–ª–æ–ø–∞—Ç–∞)
        if not self._open_construction_menu(emulator):
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ—Å—Ç—Ä–æ–π–∫–∏")
            return False

        # –®–ê–ì 2: –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = self.BUILDING_TO_CATEGORY.get(building_name)
        if not category or not self._select_category(emulator, category):
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            return False

        # –®–ê–ì 3: –ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∑–¥–∞–Ω–∏—é
        if not self._find_and_click_building(emulator, building_name):
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ")
            press_key(emulator, "BACK")
            time.sleep(1)
            return False

        # –®–ê–ì 4: –ö–ª–∏–∫–Ω—É—Ç—å "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
        if not self._click_confirm(emulator):
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
            press_key(emulator, "BACK")
            time.sleep(1)
            return False

        # –®–ê–ì 5: –ù–û–í–û–ï - –ö–ª–∏–∫–Ω—É—Ç—å –º–æ–ª–æ—Ç–æ—á–µ–∫ –∏ "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å"
        if not self._click_hammer_and_build(emulator):
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫—É —á–µ—Ä–µ–∑ –º–æ–ª–æ—Ç–æ—á–µ–∫")
            return False

        # –®–ê–ì 6: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ
        if not self._verify_construction(emulator, building_name):
            logger.error(f"[{emulator_name}] ‚ùå –ó–¥–∞–Ω–∏–µ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏")
            return False

        return True

    def _open_construction_menu(self, emulator: Dict) -> bool:
        """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–∫–ª–∏–∫ –ª–æ–ø–∞—Ç—ã)"""
        tap(emulator, x=self.SHOVEL_ICON[0], y=self.SHOVEL_ICON[1])
        time.sleep(2)
        return True

    def _select_category(self, emulator: Dict, category_name: str) -> bool:
        """–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–¥–∞–Ω–∏—è"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        template_path = self.CATEGORY_TEMPLATES.get(category_name)
        if template_path and os.path.exists(template_path):
            result = find_image(emulator, template_path, threshold=self.THRESHOLD_CATEGORY)
            if result:
                center_x, center_y = result
                tap(emulator, x=center_x, y=center_y)
                time.sleep(1.5)
                return True

        coords = self.CATEGORY_COORDS.get(category_name)
        if coords:
            tap(emulator, x=coords[0], y=coords[1])
            time.sleep(1.5)
            return True

        return False

    def _find_and_click_building(self, emulator: Dict, building_name: str) -> bool:
        """–ù–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–≤–∞–π–ø—ã + —à–∞–±–ª–æ–Ω—ã"""
        template_path = self.BUILDING_TEMPLATES.get(building_name)
        if not template_path or not os.path.exists(template_path):
            return False

        for swipe_attempt in range(self.MAX_SWIPES + 1):
            if swipe_attempt > 0:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è swipe()
                swipe(emulator,
                      self.SWIPE_START_X, self.SWIPE_START_Y,
                      self.SWIPE_END_X, self.SWIPE_END_Y,
                      300)
                time.sleep(1)

            result = find_image(emulator, template_path, threshold=self.THRESHOLD_BUILDING)
            if result:
                center_x, center_y = result
                tap(emulator, x=center_x, y=center_y)
                time.sleep(1.5)
                return True

        return False

    def _click_confirm(self, emulator: Dict) -> bool:
        """–ö–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'"""
        if os.path.exists(self.CONFIRM_BUTTON_TEMPLATE):
            result = find_image(emulator, self.CONFIRM_BUTTON_TEMPLATE, threshold=self.THRESHOLD_BUTTON)
            if result:
                center_x, center_y = result
                tap(emulator, x=center_x, y=center_y)
                time.sleep(2)
                return True

        tap(emulator, x=self.CONFIRM_BUTTON[0], y=self.CONFIRM_BUTTON[1])
        time.sleep(2)
        return True

    def _click_hammer_and_build(self, emulator: Dict) -> bool:
        """
        –ù–û–í–´–ô –ú–ï–¢–û–î: –ö–ª–∏–∫–Ω—É—Ç—å –º–æ–ª–æ—Ç–æ—á–µ–∫ –∏ –∫–Ω–æ–ø–∫—É '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å'

        –ü—Ä–æ—Ü–µ—Å—Å:
        1. –ü–æ—Å–ª–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –ø–æ—è–≤–ª—è–µ—Ç—Å—è –º–µ—Å—Ç–æ –ø–æ–¥ –∑–¥–∞–Ω–∏–µ —Å –º–æ–ª–æ—Ç–æ—á–∫–æ–º
        2. –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –º–æ–ª–æ—Ç–æ—á–µ–∫ (—á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω)
        3. –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –º–µ–Ω—é –ø–æ—Å—Ç—Ä–æ–π–∫–∏
        4. –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å' (—á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω)
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        # –®–ê–ì 1: –ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –º–æ–ª–æ—Ç–æ—á–µ–∫
        logger.debug(f"[{emulator_name}] –ü–æ–∏—Å–∫ –º–æ–ª–æ—Ç–æ—á–∫–∞...")

        if os.path.exists(self.HAMMER_ICON_TEMPLATE):
            result = find_image(emulator, self.HAMMER_ICON_TEMPLATE, threshold=self.THRESHOLD_HAMMER)

            if result:
                center_x, center_y = result
                logger.debug(f"[{emulator_name}] –ú–æ–ª–æ—Ç–æ—á–µ–∫ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω: ({center_x}, {center_y})")
                tap(emulator, x=center_x, y=center_y)
                time.sleep(1.5)
            else:
                logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ú–æ–ª–æ—Ç–æ—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                tap(emulator, x=self.HAMMER_ICON[0], y=self.HAMMER_ICON[1])
                time.sleep(1.5)
        else:
            logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –®–∞–±–ª–æ–Ω –º–æ–ª–æ—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
            tap(emulator, x=self.HAMMER_ICON[0], y=self.HAMMER_ICON[1])
            time.sleep(1.5)

        # –®–ê–ì 2: –ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å"
        logger.debug(f"[{emulator_name}] –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å'...")

        if os.path.exists(self.BUILD_BUTTON_TEMPLATE):
            result = find_image(emulator, self.BUILD_BUTTON_TEMPLATE, threshold=self.THRESHOLD_BUILD)

            if result:
                center_x, center_y = result
                logger.debug(f"[{emulator_name}] –ö–Ω–æ–ø–∫–∞ '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å' –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω: ({center_x}, {center_y})")
                tap(emulator, x=center_x, y=center_y)
                time.sleep(2)
            else:
                logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                tap(emulator, x=self.BUILD_BUTTON[0], y=self.BUILD_BUTTON[1])
                time.sleep(2)
        else:
            logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –®–∞–±–ª–æ–Ω –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
            tap(emulator, x=self.BUILD_BUTTON[0], y=self.BUILD_BUTTON[1])
            time.sleep(2)

        return True

    def _verify_construction(self, emulator: Dict, building_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
        time.sleep(2)

        try:
            from functions.building.navigation_panel import NavigationPanel
            panel = NavigationPanel()

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
            if not panel.open_navigation_panel(emulator):
                logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
                return False

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ navigate_to_building
            # –∫–æ—Ç–æ—Ä—ã–π –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–¥–∞–Ω–∏—è
            success = panel.navigate_to_building(emulator, building_name)

            press_key(emulator, "BACK")  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
            time.sleep(1)

            if success:
                logger.success(f"[{emulator_name}] ‚úÖ –ó–¥–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {building_name}")
                return True
            else:
                logger.error(f"[{emulator_name}] ‚ùå –ó–¥–∞–Ω–∏–µ {building_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
                return False

        except Exception as e:
            logger.error(f"[{emulator_name}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            import traceback
            logger.debug(traceback.format_exc())
            return False