"""
–ú–æ–¥—É–ª—å —É–ª—É—á—à–µ–Ω–∏—è –∑–¥–∞–Ω–∏–π
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å —É–ª—É—á—à–µ–Ω–∏—è –∑–¥–∞–Ω–∏—è –æ—Ç –∫–ª–∏–∫–∞ –¥–æ –∑–∞–ø–∏—Å–∏ –≤ –ë–î

–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-01-17
"""

import os
import time
import re
from datetime import datetime, timedelta
from typing import Dict, Optional, Tuple
from utils.adb_controller import tap, press_key
from utils.image_recognition import find_image, get_screenshot
from utils.ocr_engine import OCREngine
from utils.logger import logger

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class BuildingUpgrade:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–¥–∞–Ω–∏–π

    –ü—Ä–æ—Ü–µ—Å—Å:
    1. –ö–ª–∏–∫ –ø–æ –∑–¥–∞–Ω–∏—é (–ø–æ—Å–ª–µ navigate_to_building)
    2. –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ "–£–ª—É—á—à–∏—Ç—å"
    3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è (—Ä–µ—Å—É—Ä—Å—ã/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/–Ω–µ—Ö–≤–∞—Ç–∫–∞)
    4. –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–π–º–µ—Ä–∞ —á–µ—Ä–µ–∑ "–£—Å–∫–æ—Ä–∏—Ç—å"
    5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
    """

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    BUILDING_CENTER = (268, 517)  # –¶–µ–Ω—Ç—Ä –∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ "–ü–µ—Ä–µ–π—Ç–∏"

    # –û–±–ª–∞—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∞–π–º–µ—Ä–∞ (x1, y1, x2, y2)
    TIMER_AREA = (213, 67, 335, 106)

    # –®–∞–±–ª–æ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    TEMPLATES = {
        # –ò–∫–æ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        'upgrade_icon': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'upgrade_icon.png'),
        'speedup_icon': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'speedup_icon.png'),

        # –ö–Ω–æ–ø–∫–∏
        'button_upgrade': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'button_upgrade.png'),
        'button_refill': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'button_refill.png'),
        'button_confirm': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'button_confirm.png'),

        # –û–∫–Ω–∞
        'window_refill': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'window_refill.png'),
        'window_no_resources': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'window_no_resources.png'),
    }

    # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    THRESHOLD_ICON = 0.7  # –î–ª—è –∏–∫–æ–Ω–æ–∫ (–º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤)
    THRESHOLD_BUTTON = 0.85  # –î–ª—è –∫–Ω–æ–ø–æ–∫
    THRESHOLD_WINDOW = 0.85  # –î–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ–∫–æ–Ω

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —É–ª—É—á—à–µ–Ω–∏—è"""
        self.ocr = OCREngine()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω—ã
        for name, path in self.TEMPLATES.items():
            exists = os.path.exists(path)
            status = "‚úÖ" if exists else "‚ùå"
            logger.debug(f"{status} –®–∞–±–ª–æ–Ω '{name}': {path}")

        logger.info("‚úÖ BuildingUpgrade –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def upgrade_building(self, emulator: Dict, building_name: str,
                        building_index: Optional[int] = None) -> Tuple[bool, Optional[int]]:
        """
        –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î - –£–ª—É—á—à–∏—Ç—å –∑–¥–∞–Ω–∏–µ

        –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏–µ: –±–æ—Ç —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ –∑–¥–∞–Ω–∏—é —á–µ—Ä–µ–∑ navigate_to_building()

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
            building_index: –∏–Ω–¥–µ–∫—Å (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π)

        Returns:
            (—É—Å–ø–µ—Ö, —Ç–∞–π–º–µ—Ä_–≤_—Å–µ–∫—É–Ω–¥–∞—Ö)
            - (True, 3600) - —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å, —Ç–∞–π–º–µ—Ä 1 —á–∞—Å
            - (True, 0) - —É–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ (–ø–æ–º–æ—â—å –∞–ª—å—è–Ω—Å–∞)
            - (False, None) - –Ω–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤, –Ω—É–∂–Ω–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∞
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")
        building_display = f"{building_name}"
        if building_index is not None:
            building_display += f" #{building_index}"

        logger.info(f"[{emulator_name}] üî® –ù–∞—á–∞–ª–æ —É–ª—É—á—à–µ–Ω–∏—è: {building_display}")

        # –®–ê–ì 1: –ö–ª–∏–∫ –ø–æ –∑–¥–∞–Ω–∏—é
        if not self._click_building(emulator):
            return False, None

        # –®–ê–ì 2: –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ "–£–ª—É—á—à–∏—Ç—å"
        if not self._click_upgrade_icon(emulator):
            return False, None

        # –®–ê–ì 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è
        upgrade_result = self._handle_upgrade_window(emulator)

        if upgrade_result == "no_resources":
            # –ù–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ - –Ω—É–∂–Ω–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∞
            logger.warning(f"[{emulator_name}] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è {building_display}")
            return False, None

        elif upgrade_result == "started":
            # –£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å
            logger.success(f"[{emulator_name}] ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å: {building_display}")

            # –®–ê–ì 4: –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–π–º–µ—Ä–∞
            timer_seconds = self._parse_upgrade_timer(emulator)

            if timer_seconds is None:
                # –¢–∞–π–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                logger.info(f"[{emulator_name}] üöÄ –í–æ–∑–º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–ø–æ–º–æ—â—å –∞–ª—å—è–Ω—Å–∞)")
                return True, 0

            logger.info(f"[{emulator_name}] ‚è±Ô∏è –¢–∞–π–º–µ—Ä —É–ª—É—á—à–µ–Ω–∏—è: {self._format_time(timer_seconds)}")
            return True, timer_seconds

        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏")
            return False, None

    def _click_building(self, emulator: Dict) -> bool:
        """–ö–ª–∏–∫–Ω—É—Ç—å –ø–æ –∑–¥–∞–Ω–∏—é –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –ö–ª–∏–∫ –ø–æ –∑–¥–∞–Ω–∏—é ({self.BUILDING_CENTER[0]}, {self.BUILDING_CENTER[1]})")
        tap(emulator, x=self.BUILDING_CENTER[0], y=self.BUILDING_CENTER[1])
        time.sleep(1.5)  # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫

        return True

    def _click_upgrade_icon(self, emulator: Dict) -> bool:
        """
        –ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –∏–∫–æ–Ω–∫—É "–£–ª—É—á—à–∏—Ç—å"

        –ò–∫–æ–Ω–∫–∞ - —Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö, —Ä–∞–∑–º–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–¥–∞–Ω–∏–π
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏ '–£–ª—É—á—à–∏—Ç—å'...")

        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∏–∫–æ–Ω–∫—É (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ —Ç.–∫. –∏–∫–æ–Ω–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤)
        for attempt in range(3):
            result = find_image(emulator, self.TEMPLATES['upgrade_icon'],
                              threshold=self.THRESHOLD_ICON)

            if result:
                # find_image –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (x, y) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞
                center_x, center_y = result

                logger.debug(f"[{emulator_name}] –ù–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ '–£–ª—É—á—à–∏—Ç—å' –Ω–∞ ({center_x}, {center_y})")
                tap(emulator, x=center_x, y=center_y)
                time.sleep(1.5)  # –ñ–¥–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
                return True

            time.sleep(0.5)

        logger.error(f"[{emulator_name}] ‚ùå –ò–∫–æ–Ω–∫–∞ '–£–ª—É—á—à–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    def _handle_upgrade_window(self, emulator: Dict) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–∫–Ω–æ —É–ª—É—á—à–µ–Ω–∏—è

        –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:
        1. –ö–Ω–æ–ø–∫–∞ "–£–ª—É—á—à–µ–Ω–∏–µ" - —Ä–µ—Å—É—Ä—Å–æ–≤ —Ö–≤–∞—Ç–∞–µ—Ç
        2. –ö–Ω–æ–ø–∫–∞ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º" - –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
           2–∞. –û–∫–Ω–æ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã" - —É—Å–ø–µ—à–Ω–æ
           2–±. –û–∫–Ω–æ "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤" - –ø—Ä–æ–≤–∞–ª

        Returns:
            "started" - —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å
            "no_resources" - –Ω–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        # –ü–†–û–í–ï–†–ö–ê 1: –ö–Ω–æ–ø–∫–∞ "–£–ª—É—á—à–µ–Ω–∏–µ"
        if find_image(emulator, self.TEMPLATES['button_upgrade'],
                     threshold=self.THRESHOLD_BUTTON):
            logger.debug(f"[{emulator_name}] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–£–ª—É—á—à–µ–Ω–∏–µ'")

            # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
            result = find_image(emulator, self.TEMPLATES['button_upgrade'],
                              threshold=self.THRESHOLD_BUTTON)
            if result:
                center_x, center_y = result
                tap(emulator, x=center_x, y=center_y)
                time.sleep(1.5)
                return "started"

        # –ü–†–û–í–ï–†–ö–ê 2: –ö–Ω–æ–ø–∫–∞ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º"
        if find_image(emulator, self.TEMPLATES['button_refill'],
                     threshold=self.THRESHOLD_BUTTON):
            logger.debug(f"[{emulator_name}] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã'")

            # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
            result = find_image(emulator, self.TEMPLATES['button_refill'],
                              threshold=self.THRESHOLD_BUTTON)
            if result:
                center_x, center_y = result
                tap(emulator, x=center_x, y=center_y)
                time.sleep(1.5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã–ª–æ—Å—å
            return self._handle_refill_window(emulator)

        logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è")
        return "error"

    def _handle_refill_window(self, emulator: Dict) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã"

        2 –≤–∞—Ä–∏–∞–Ω—Ç–∞:
        - –û–∫–Ω–æ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º" - —É—Å–ø–µ—Ö
        - –û–∫–Ω–æ "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤" - –ø—Ä–æ–≤–∞–ª

        Returns:
            "started" - —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ø–æ–ª–Ω–µ–Ω—ã, –ø–æ—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å
            "no_resources" - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        # –í–ê–†–ò–ê–ù–¢ 1: –û–∫–Ω–æ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º"
        if find_image(emulator, self.TEMPLATES['window_refill'],
                     threshold=self.THRESHOLD_WINDOW):
            logger.debug(f"[{emulator_name}] –û–∫–Ω–æ '–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã' - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º")

            # –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
            result = find_image(emulator, self.TEMPLATES['button_confirm'],
                              threshold=self.THRESHOLD_BUTTON)
            if result:
                center_x, center_y = result
                tap(emulator, x=center_x, y=center_y)
                time.sleep(2)
                return "started"

        # –í–ê–†–ò–ê–ù–¢ 2: –û–∫–Ω–æ "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤"
        if find_image(emulator, self.TEMPLATES['window_no_resources'],
                     threshold=self.THRESHOLD_WINDOW):
            logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –û–∫–Ω–æ '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤'")

            # 2x ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            press_key(emulator, "ESC")
            time.sleep(0.5)
            press_key(emulator, "ESC")
            time.sleep(0.5)

            return "no_resources"

        logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
        return "error"

    def _parse_upgrade_timer(self, emulator: Dict) -> Optional[int]:
        """
        –°–ø–∞—Ä—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä —É–ª—É—á—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏–∫–æ–Ω–∫—É "–£—Å–∫–æ—Ä–∏—Ç—å"

        –ü—Ä–æ—Ü–µ—Å—Å:
        1. –ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –∏–∫–æ–Ω–∫—É "–£—Å–∫–æ—Ä–∏—Ç—å"
        2. –°–ø–∞—Ä—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä –≤ –æ–±–ª–∞—Å—Ç–∏ TIMER_AREA
        3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–µ–∫—É–Ω–¥—ã
        4. –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —á–µ—Ä–µ–∑ ESC

        Returns:
            —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ None (–µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - –±—ã—Å—Ç—Ä–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–π–º–µ—Ä–∞ —á–µ—Ä–µ–∑ '–£—Å–∫–æ—Ä–∏—Ç—å'...")

        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∏–∫–æ–Ω–∫—É "–£—Å–∫–æ—Ä–∏—Ç—å" (–¥–æ 5 —Å–µ–∫—É–Ω–¥)
        for attempt in range(10):
            result = find_image(emulator, self.TEMPLATES['speedup_icon'],
                              threshold=self.THRESHOLD_ICON)

            if result:
                center_x, center_y = result

                logger.debug(f"[{emulator_name}] –ù–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ '–£—Å–∫–æ—Ä–∏—Ç—å' –Ω–∞ ({center_x}, {center_y})")
                tap(emulator, x=center_x, y=center_y)
                time.sleep(1.5)

                # –ü–∞—Ä—Å–∏–º —Ç–∞–π–º–µ—Ä
                timer_seconds = self._extract_timer_from_window(emulator)

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
                press_key(emulator, "ESC")
                time.sleep(0.5)

                return timer_seconds

            time.sleep(0.5)

        # –ò–∫–æ–Ω–∫–∞ "–£—Å–∫–æ—Ä–∏—Ç—å" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        logger.info(f"[{emulator_name}] –ò–∫–æ–Ω–∫–∞ '–£—Å–∫–æ—Ä–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞ 5 —Å–µ–∫")
        return None

    def _extract_timer_from_window(self, emulator: Dict) -> Optional[int]:
        """
        –ò–∑–≤–ª–µ—á—å —Ç–∞–π–º–µ—Ä –∏–∑ –æ–∫–Ω–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è

        –§–æ—Ä–º–∞—Ç: "10:41:48" –∏–ª–∏ "1:10:41:48" (–¥–µ–Ω—å:—á–∞—Å:–º–∏–Ω:—Å–µ–∫)
        –û–±–ª–∞—Å—Ç—å: TIMER_AREA
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        screenshot = get_screenshot(emulator)
        if screenshot is None:
            return None

        # –í—ã—Ä–µ–∑–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞
        x1, y1, x2, y2 = self.TIMER_AREA
        timer_region = screenshot[y1:y2, x1:x2]

        # –ü–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ OCR
        results = self.ocr.recognize_text(timer_region, min_confidence=0.6)

        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Ç–∞–π–º–µ—Ä–∞
        for elem in results:
            text = elem['text']

            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã: HH:MM:SS –∏–ª–∏ D:HH:MM:SS
            pattern1 = r'(\d{1,2}):(\d{2}):(\d{2})'  # HH:MM:SS
            pattern2 = r'(\d+):(\d{1,2}):(\d{2}):(\d{2})'  # D:HH:MM:SS

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            match = re.search(pattern2, text)
            if match:
                days = int(match.group(1))
                hours = int(match.group(2))
                minutes = int(match.group(3))
                seconds = int(match.group(4))

                total_seconds = days * 86400 + hours * 3600 + minutes * 60 + seconds
                logger.debug(f"[{emulator_name}] –¢–∞–π–º–µ—Ä (D:HH:MM:SS): {text} = {total_seconds} —Å–µ–∫")
                return total_seconds

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
            match = re.search(pattern1, text)
            if match:
                hours = int(match.group(1))
                minutes = int(match.group(2))
                seconds = int(match.group(3))

                total_seconds = hours * 3600 + minutes * 60 + seconds
                logger.debug(f"[{emulator_name}] –¢–∞–π–º–µ—Ä (HH:MM:SS): {text} = {total_seconds} —Å–µ–∫")
                return total_seconds

        logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä")
        return None

    def _format_time(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∫—É–Ω–¥—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 60:
            return f"{seconds} —Å–µ–∫"
        elif seconds < 3600:
            minutes = seconds // 60
            return f"{minutes} –º–∏–Ω"
        elif seconds < 86400:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            return f"{hours} —á {minutes} –º–∏–Ω"
        else:
            days = seconds // 86400
            hours = (seconds % 86400) // 3600
            return f"{days} –¥ {hours} —á"