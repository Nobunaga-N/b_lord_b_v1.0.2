"""
–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç NavigationPanel, BuildingUpgrade, BuildingDatabase

–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-01-17
"""

import time
from datetime import datetime, timedelta
from typing import Dict, Optional
from functions.base_function import BaseFunction
from functions.building.navigation_panel import NavigationPanel
from functions.building.building_upgrade import BuildingUpgrade
from functions.building.building_database import BuildingDatabase
from utils.logger import logger


class BuildingFunction(BaseFunction):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞

    –ü—Ä–æ—Ü–µ—Å—Å:
    1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π
    2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–¥–∞–Ω–∏–µ (BuildingDatabase)
    3. –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–¥–∞–Ω–∏—é (NavigationPanel)
    4. –£–ª—É—á—à–∏—Ç—å –∑–¥–∞–Ω–∏–µ (BuildingUpgrade)
    5. –û–±–Ω–æ–≤–∏—Ç—å –ë–î
    6. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∫–∞ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏
    """

    def __init__(self, emulator):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞"""
        super().__init__(emulator)
        self.name = "BuildingFunction"

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.panel = NavigationPanel()
        self.upgrade = BuildingUpgrade()
        self.db = BuildingDatabase()

        logger.info(f"[{self.emulator_name}] ‚úÖ BuildingFunction –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def can_execute(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ

        –£—Å–ª–æ–≤–∏—è:
        1. –≠–º—É–ª—è—Ç–æ—Ä –Ω–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω (–Ω–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤)
        2. –ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏
        3. –ï—Å—Ç—å –∑–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏

        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å
        """
        emulator_id = self.emulator.get('id', 0)

        # –ü–†–û–í–ï–†–ö–ê 0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ builders –¥–ª—è —ç—Ç–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞
        try:
            cursor = self.db.conn.cursor()
            cursor.execute("""
                SELECT COUNT(*) FROM builders WHERE emulator_id = ?
            """, (emulator_id,))
            builders_count = cursor.fetchone()[0]

            if builders_count == 0:
                logger.info(f"[{self.emulator_name}] üîç –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –æ–ø—Ä–µ–¥–µ–ª—è—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ OCR...")

                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ OCR (–ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞)
                busy, total = self.db.detect_builders_count(self.emulator)

                logger.info(f"[{self.emulator_name}] üî® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π: {busy}/{total}")

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –≤ –ë–î
                self.db.init_emulator_builders(emulator_id, slots=total)

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–Ω—è—Ç—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏ - –æ—Ç–º–µ—á–∞–µ–º –∏—Ö –≤ –ë–î
                if busy > 0:
                    logger.warning(f"[{self.emulator_name}] ‚ö†Ô∏è {busy} —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π —É–∂–µ –∑–∞–Ω—è—Ç—ã, –Ω–æ —Ç–∞–π–º–µ—Ä—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã")
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∞–π–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –∑–∞–Ω—è—Ç—ã—Ö –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞
                    for slot in range(1, busy + 1):
                        cursor.execute("""
                            UPDATE builders 
                            SET is_busy = 1 
                            WHERE emulator_id = ? AND builder_slot = ?
                        """, (emulator_id, slot))
                    self.db.conn.commit()

                logger.success(f"[{self.emulator_name}] ‚úÖ –°—Ç—Ä–æ–∏—Ç–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {total - busy} —Å–≤–æ–±–æ–¥–Ω—ã—Ö")

        except Exception as e:
            logger.error(f"[{self.emulator_name}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return False

        # –ü–†–û–í–ï–†–ö–ê 1: –ó–∞–º–æ—Ä–æ–∑–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞
        if self.db.is_emulator_frozen(emulator_id):
            freeze_info = self.db.get_freeze_info(emulator_id)
            logger.debug(f"[{self.emulator_name}] ‚ùÑÔ∏è –≠–º—É–ª—è—Ç–æ—Ä –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–æ {freeze_info['freeze_until']}")
            return False

        # –ü–†–û–í–ï–†–ö–ê 2: –°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏
        free_builders = self.db.get_free_builders_count(emulator_id)
        if free_builders == 0:
            logger.debug(f"[{self.emulator_name}] üë∑ –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π")
            return False

        # –ü–†–û–í–ï–†–ö–ê 3: –ï—Å—Ç—å –ª–∏ —á—Ç–æ —Å—Ç—Ä–æ–∏—Ç—å
        next_building = self.db.get_next_building_to_upgrade(emulator_id)
        if not next_building:
            logger.debug(f"[{self.emulator_name}] üéØ –í—Å–µ –∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è")
            return False

        logger.debug(f"[{self.emulator_name}] ‚úÖ –ú–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å: {free_builders} —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, "
                     f"—Å–ª–µ–¥—É—é—â–µ–µ –∑–¥–∞–Ω–∏–µ: {next_building['name']}")
        return True

    def execute(self) -> bool:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ü–∏–∫–ª —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞

        –ü—Ä–æ—Ü–µ—Å—Å:
        1. –ü–æ–∫–∞ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏
        2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–¥–∞–Ω–∏–µ
        3. –ü–µ—Ä–µ–π—Ç–∏ –∏ —É–ª—É—á—à–∏—Ç—å
        4. –û–±–Ω–æ–≤–∏—Ç—å –ë–î
        5. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å

        Returns:
            True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–æ
        """
        emulator_id = self.emulator.get('id', 0)

        logger.info(f"[{self.emulator_name}] üèóÔ∏è –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞")

        upgraded_count = 0

        # –¶–∏–∫–ª –ø–æ–∫–∞ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
            if not self.can_execute():
                break

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–¥–∞–Ω–∏–µ
            next_building = self.db.get_next_building_to_upgrade(emulator_id)
            if not next_building:
                break

            building_name = next_building['name']
            building_index = next_building.get('index')
            current_level = next_building['current_level']
            target_level = next_building['target_level']

            display_name = building_name
            if building_index is not None:
                display_name += f" #{building_index}"

            logger.info(f"[{self.emulator_name}] üéØ –°–ª–µ–¥—É—é—â–µ–µ –∑–¥–∞–Ω–∏–µ: {display_name} "
                       f"(Lv.{current_level} ‚Üí Lv.{target_level})")

            # –®–ê–ì 1: –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–¥–∞–Ω–∏—é
            if not self.panel.open_navigation_panel(self.emulator):
                logger.error(f"[{self.emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
                break

            if not self.panel.navigate_to_building(self.emulator, building_name):
                logger.error(f"[{self.emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–¥–∞–Ω–∏—é")
                break

            time.sleep(1.5)

            # –®–ê–ì 2: –£–ª—É—á—à–∏—Ç—å –∑–¥–∞–Ω–∏–µ
            success, timer_seconds = self.upgrade.upgrade_building(
                self.emulator, building_name, building_index
            )

            # –®–ê–ì 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if success:
                if timer_seconds == 0:
                    # –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–ø–æ–º–æ—â—å –∞–ª—å—è–Ω—Å–∞)
                    logger.success(f"[{self.emulator_name}] üöÄ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {display_name}")

                    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å—Ä–∞–∑—É
                    new_level = current_level + 1
                    self.db.update_building_level(
                        emulator_id, building_name, new_level, building_index
                    )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å 4-–π —Å–ª–æ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
                    if building_name == "–ñ–∏–ª–∏—â–µ –õ–µ–º—É—Ä–æ–≤ IV" and new_level >= 1:
                        self.db.add_builder_slot(emulator_id)

                else:
                    # –û–±—ã—á–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
                    timer_finish = datetime.now() + timedelta(seconds=timer_seconds)

                    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
                    builder_slot = self.db.get_free_builder_slot(emulator_id)
                    if builder_slot is None:
                        logger.error(f"[{self.emulator_name}] ‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –≤ –ë–î")
                        break

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
                    self.db.set_building_upgrading(
                        emulator_id, building_name, building_index,
                        timer_finish, builder_slot
                    )

                    logger.success(f"[{self.emulator_name}] ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å: {display_name}")
                    logger.info(f"[{self.emulator_name}] ‚è±Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {timer_finish.strftime('%H:%M:%S')}")

                upgraded_count += 1

            else:
                # –ù–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ - –∑–∞–º–æ—Ä–æ–∑–∫–∞
                logger.warning(f"[{self.emulator_name}] ‚ùÑÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è {display_name}")

                freeze_until = datetime.now() + timedelta(hours=6)
                self.db.freeze_emulator(
                    emulator_id,
                    freeze_until,
                    f"–ù–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è {display_name}"
                )

                logger.info(f"[{self.emulator_name}] ‚ùÑÔ∏è –≠–º—É–ª—è—Ç–æ—Ä –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–æ {freeze_until.strftime('%H:%M:%S')}")
                break

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É–ª—É—á—à–µ–Ω–∏—è–º–∏
            time.sleep(2)

        # –ò—Ç–æ–≥–∏
        if upgraded_count > 0:
            logger.success(f"[{self.emulator_name}] ‚úÖ –£–ª—É—á—à–µ–Ω–æ –∑–¥–∞–Ω–∏–π: {upgraded_count}")
            return True
        else:
            logger.info(f"[{self.emulator_name}] ‚ÑπÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            return False


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['BuildingFunction']