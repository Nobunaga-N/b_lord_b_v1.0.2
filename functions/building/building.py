"""
–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç NavigationPanel, BuildingUpgrade, BuildingConstruction, BuildingDatabase

–û–ë–ù–û–í–õ–ï–ù–û: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è + –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ë–î

–í–µ—Ä—Å–∏—è: 2.0
–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 2025-01-21
"""

import time
from datetime import datetime, timedelta
from typing import Dict, Optional
from functions.base_function import BaseFunction
from functions.building.navigation_panel import NavigationPanel
from functions.building.building_upgrade import BuildingUpgrade
from functions.building.building_construction import BuildingConstruction
from functions.building.building_database import BuildingDatabase
from utils.logger import logger
from utils.adb_controller import press_key


class BuildingFunction(BaseFunction):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞

    –ü—Ä–æ—Ü–µ—Å—Å:
    1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)
    2. –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π
    4. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–¥–∞–Ω–∏–µ (BuildingDatabase)
    5. –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–¥–∞–Ω–∏—é (NavigationPanel)
    6. –£–ª—É—á—à–∏—Ç—å / –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–∞–Ω–∏–µ (BuildingUpgrade / BuildingConstruction)
    7. –û–±–Ω–æ–≤–∏—Ç—å –ë–î
    8. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∫–∞ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏
    """

    def __init__(self, emulator):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞"""
        super().__init__(emulator)
        self.name = "BuildingFunction"

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.panel = NavigationPanel()
        self.upgrade = BuildingUpgrade()
        self.construction = BuildingConstruction()
        self.db = BuildingDatabase()

        logger.info(f"[{self.emulator_name}] ‚úÖ BuildingFunction –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def _first_time_initialization(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —ç–º—É–ª—è—Ç–æ—Ä–∞

        1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        2. –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π
        3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ OCR
        4. –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π

        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        emulator_id = self.emulator.get('id', 0)

        cursor = self.db.conn.cursor()
        cursor.execute("""
            SELECT COUNT(*) FROM buildings WHERE emulator_id = ?
        """, (emulator_id,))

        buildings_count = cursor.fetchone()[0]

        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ —É–∂–µ –µ—Å—Ç—å - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
        if buildings_count > 0:
            logger.debug(f"[{self.emulator_name}] –ë–î —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ ({buildings_count} –∑–¥–∞–Ω–∏–π)")
            return True

        logger.info(f"[{self.emulator_name}] üÜï –ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö - –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")

        # –®–ê–ì 1: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ OCR
        logger.info(f"[{self.emulator_name}] üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π...")
        busy, total = self.db.detect_builders_count(self.emulator)

        logger.info(f"[{self.emulator_name}] üî® –°—Ç—Ä–æ–∏—Ç–µ–ª–∏: {busy}/{total}")

        # –®–ê–ì 2: –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π
        logger.info(f"[{self.emulator_name}] üìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î...")
        success = self.db.initialize_buildings_for_emulator(emulator_id, total)

        if not success:
            logger.error(f"[{self.emulator_name}] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î")
            return False

        # –®–ê–ì 3: –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"[{self.emulator_name}] üîç –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
        press_key(self.emulator, "ESC")
        time.sleep(0.5)

        success = self.db.perform_initial_scan(self.emulator)

        if not success:
            logger.warning(f"[{self.emulator_name}] ‚ö†Ô∏è –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
            # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False - –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É

        logger.success(f"[{self.emulator_name}] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True

    def can_execute(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ

        –£—Å–ª–æ–≤–∏—è:
        1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        2. –≠–º—É–ª—è—Ç–æ—Ä –Ω–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω (–Ω–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤)
        3. –ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏
        4. –ï—Å—Ç—å –∑–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏

        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å
        """
        emulator_id = self.emulator.get('id', 0)

        # –ü–†–û–í–ï–†–ö–ê 0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        if not self._first_time_initialization():
            logger.error(f"[{self.emulator_name}] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            return False

        # –ü–†–û–í–ï–†–ö–ê 1: –ó–∞–º–æ—Ä–æ–∑–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞
        if self.db.is_emulator_frozen(emulator_id):
            logger.debug(f"[{self.emulator_name}] ‚ùÑÔ∏è –≠–º—É–ª—è—Ç–æ—Ä –∑–∞–º–æ—Ä–æ–∂–µ–Ω (–Ω–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤)")
            return False

        # –ü–†–û–í–ï–†–ö–ê 2: –°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏
        free_builder = self.db.get_free_builder(emulator_id)
        if free_builder is None:
            logger.debug(f"[{self.emulator_name}] üë∑ –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π")
            return False

        # –ü–†–û–í–ï–†–ö–ê 3: –ï—Å—Ç—å –ª–∏ —á—Ç–æ —Å—Ç—Ä–æ–∏—Ç—å (—Å –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
        next_building = self.db.get_next_building_to_upgrade(self.emulator, auto_scan=True)
        if not next_building:
            logger.debug(f"[{self.emulator_name}] üéØ –í—Å–µ –∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è")
            return False

        logger.debug(f"[{self.emulator_name}] ‚úÖ –ú–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å: —Å–ª–µ–¥—É—é—â–µ–µ –∑–¥–∞–Ω–∏–µ - {next_building['name']}")
        return True

    def execute(self) -> bool:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ü–∏–∫–ª —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞

        –ü—Ä–æ—Ü–µ—Å—Å:
        1. –ü–æ–∫–∞ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏
        2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–¥–∞–Ω–∏–µ
        3. –ü–µ—Ä–µ–π—Ç–∏ –∏ —É–ª—É—á—à–∏—Ç—å/–ø–æ—Å—Ç—Ä–æ–∏—Ç—å
        4. –û–±–Ω–æ–≤–∏—Ç—å –ë–î
        5. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å

        Returns:
            True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–æ/–ø–æ—Å—Ç—Ä–æ–µ–Ω–æ
        """
        emulator_id = self.emulator.get('id', 0)

        logger.info(f"[{self.emulator_name}] üèóÔ∏è –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞")

        completed_count = self.db.check_and_update_completed_buildings(emulator_id)
        if completed_count > 0:
            logger.info(f"[{self.emulator_name}] üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–∫ —Å –ø—Ä–æ—à–ª–æ–≥–æ —Ü–∏–∫–ª–∞: {completed_count}")

        upgraded_count = 0
        constructed_count = 0

        # –¶–∏–∫–ª –ø–æ–∫–∞ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è (–±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –æ–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)
            if self.db.is_emulator_frozen(emulator_id):
                logger.info(f"[{self.emulator_name}] ‚ùÑÔ∏è –≠–º—É–ª—è—Ç–æ—Ä –∑–∞–º–æ—Ä–æ–∂–µ–Ω")
                break

            free_builder = self.db.get_free_builder(emulator_id)
            if free_builder is None:
                logger.info(f"[{self.emulator_name}] üë∑ –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π")
                break

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–¥–∞–Ω–∏–µ (—Å –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
            next_building = self.db.get_next_building_to_upgrade(self.emulator, auto_scan=True)
            if not next_building:
                logger.info(f"[{self.emulator_name}] ‚úÖ –í—Å–µ –∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è")
                break

            building_name = next_building['name']
            building_index = next_building.get('index')
            current_level = next_building['current_level']
            target_level = next_building['target_level']
            action = next_building.get('action', 'upgrade')

            display_name = building_name
            if building_index is not None:
                display_name += f" #{building_index}"

            logger.info(f"[{self.emulator_name}] üéØ –°–ª–µ–¥—É—é—â–µ–µ –∑–¥–∞–Ω–∏–µ: {display_name} "
                       f"(Lv.{current_level} ‚Üí Lv.{target_level}) [action={action}]")

            # –®–ê–ì 1: –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–¥–∞–Ω–∏—é (–¥–ª—è upgrade) –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è construct)
            if action == 'construct':
                # –ü–û–°–¢–†–û–ô–ö–ê –ù–û–í–û–ì–û –ó–î–ê–ù–ò–Ø
                logger.info(f"[{self.emulator_name}] üèóÔ∏è –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è: {display_name}")

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞
                press_key(self.emulator, "ESC")
                time.sleep(0.5)

                # –°—Ç—Ä–æ–∏–º –∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ BuildingConstruction
                success, timer_seconds = self.construction.construct_building(
                    self.emulator, building_name, building_index
                )

                if success:
                    if timer_seconds == 0:
                        # –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–ø–æ–º–æ—â—å –∞–ª—å—è–Ω—Å–∞)
                        logger.success(f"[{self.emulator_name}] üöÄ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–æ—Å—Ç—Ä–æ–π–∫–∞: {display_name}")

                        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å—Ä–∞–∑—É –Ω–∞ 1
                        self.db.update_building_level(
                            emulator_id, building_name, building_index, 1
                        )

                        constructed_count += 1
                    else:
                        # –û–±—ã—á–Ω–∞—è –ø–æ—Å—Ç—Ä–æ–π–∫–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º
                        timer_finish = datetime.now() + timedelta(seconds=timer_seconds)

                        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
                        builder_slot = self.db.get_free_builder(emulator_id)
                        if builder_slot is None:
                            logger.error(f"[{self.emulator_name}] ‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –≤ –ë–î")
                            break

                        # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î - –∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç—Å—è
                        self.db.set_building_constructed(
                            emulator_id, building_name, building_index,
                            timer_finish, builder_slot
                        )

                        logger.success(f"[{self.emulator_name}] ‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å: {display_name}")
                        logger.info(f"[{self.emulator_name}] ‚è±Ô∏è –¢–∞–π–º–µ—Ä: {self._format_time(timer_seconds)}")

                        constructed_count += 1
                else:
                    # –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å (–Ω–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤)
                    logger.warning(f"[{self.emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å: {display_name}")

                    # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä
                    self.db.freeze_emulator(emulator_id, hours=6, reason="–ù–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ (–ø–æ—Å—Ç—Ä–æ–π–∫–∞)")
                    break

            else:
                # –£–õ–£–ß–®–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –ó–î–ê–ù–ò–Ø
                if not self.panel.open_navigation_panel(self.emulator):
                    logger.error(f"[{self.emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
                    break

                if not self.panel.navigate_to_building(self.emulator, building_name):
                    logger.error(f"[{self.emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–¥–∞–Ω–∏—é")
                    break

                time.sleep(1.5)

                # –®–ê–ì 2: –£–ª—É—á—à–∏—Ç—å –∑–¥–∞–Ω–∏–µ
                success, timer_seconds = self.upgrade.upgrade_building(
                    self.emulator, building_name, building_index
                )

                # –®–ê–ì 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if success:
                    if timer_seconds == 0:
                        # –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–ø–æ–º–æ—â—å –∞–ª—å—è–Ω—Å–∞)
                        logger.success(f"[{self.emulator_name}] üöÄ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {display_name}")

                        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å—Ä–∞–∑—É
                        new_level = current_level + 1
                        self.db.update_building_level(
                            emulator_id, building_name, building_index, new_level
                        )

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å 4-–π —Å–ª–æ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
                        if building_name == "–ñ–∏–ª–∏—â–µ –õ–µ–º—É—Ä–æ–≤" and building_index == 4 and new_level >= 1:
                            self.db.initialize_builders(emulator_id, slots=4)
                            logger.success(f"[{self.emulator_name}] üî® –î–æ–±–∞–≤–ª–µ–Ω 4-–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å!")

                        upgraded_count += 1

                    else:
                        # –û–±—ã—á–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
                        timer_finish = datetime.now() + timedelta(seconds=timer_seconds)

                        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
                        builder_slot = self.db.get_free_builder(emulator_id)
                        if builder_slot is None:
                            logger.error(f"[{self.emulator_name}] ‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –≤ –ë–î")
                            break

                        # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
                        self.db.set_building_upgrading(
                            emulator_id, building_name, building_index,
                            timer_finish, builder_slot
                        )

                        logger.success(f"[{self.emulator_name}] ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å: {display_name}")
                        logger.info(f"[{self.emulator_name}] ‚è±Ô∏è –¢–∞–π–º–µ—Ä: {self._format_time(timer_seconds)}")

                        upgraded_count += 1

                else:
                    # –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å (–Ω–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤)
                    logger.warning(f"[{self.emulator_name}] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è: {display_name}")

                    # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä
                    self.db.freeze_emulator(emulator_id, hours=6, reason="–ù–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤")
                    break

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–¥–∞–Ω–∏—è–º–∏
            time.sleep(2)

        # –ò—Ç–æ–≥–∏
        total = upgraded_count + constructed_count

        if total > 0:
            logger.success(f"[{self.emulator_name}] üéâ –¶–∏–∫–ª —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            logger.info(f"[{self.emulator_name}] üìä –£–ª—É—á—à–µ–Ω–æ: {upgraded_count}, –ü–æ—Å—Ç—Ä–æ–µ–Ω–æ: {constructed_count}")
            return True
        else:
            logger.info(f"[{self.emulator_name}] ‚ÑπÔ∏è –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ")
            return False

    def _format_time(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∫—É–Ω–¥—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        secs = seconds % 60

        if hours > 0:
            return f"{hours}—á {minutes}–º {secs}—Å"
        elif minutes > 0:
            return f"{minutes}–º {secs}—Å"
        else:
            return f"{secs}—Å"