"""
–ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ —Å –£–ú–ù–û–ô –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—å—é –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–¥–∞–Ω–∏—è–º

–ö–õ–Æ–ß–ï–í–ê–Ø –û–°–û–ë–ï–ù–ù–û–°–¢–¨:
–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ (–æ—Ç–∫—Ä—ã—Ç—ã–µ —Ä–∞–∑–¥–µ–ª—ã/–ø–æ–¥–≤–∫–ª–∞–¥–∫–∏) –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏"
–°–±—Ä–æ—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã/—ç–º—É–ª—è—Ç–æ—Ä–∞

–í–µ—Ä—Å–∏—è: 2.0 (SMART NAVIGATION)
–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 2025-01-23
"""

import os
import time
import yaml
from typing import List, Dict, Any, Optional, Tuple
from utils.adb_controller import tap, swipe, press_key
from utils.image_recognition import find_image, get_screenshot
from utils.ocr_engine import OCREngine
from utils.logger import logger

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


# ==================== –ö–õ–ê–°–° –°–û–°–¢–û–Ø–ù–ò–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò ====================
class NavigationState:
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

    –í–ê–ñ–ù–û: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏!
    –°–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã/—ç–º—É–ª—è—Ç–æ—Ä–∞
    """

    def __init__(self):
        self.is_panel_open = False
        self.current_tab = None  # 'tasks' –∏–ª–∏ 'buildings'
        self.current_section = None  # –ù–∞–ø—Ä–∏–º–µ—Ä, "–†–µ—Å—É—Ä—Å—ã"
        self.current_subsection = None  # –ù–∞–ø—Ä–∏–º–µ—Ä, "–ü–µ—Å–æ–∫"
        self.is_collapsed = False  # –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Å–≤–µ—Ä–Ω—É—Ç—ã?
        self.is_scrolled_to_top = False  # –í –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞?

    def reset(self):
        """
        –ü–û–õ–ù–´–ô –°–ë–†–û–° - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
        """
        self.is_panel_open = False
        self.current_tab = None
        self.current_section = None
        self.current_subsection = None
        self.is_collapsed = False
        self.is_scrolled_to_top = False
        logger.debug("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ü–û–õ–ù–û–°–¢–¨–Æ —Å–±—Ä–æ—à–µ–Ω–æ")

    def close_panel(self):
        """
        –ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã–ª–∞—Å—å, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –°–û–•–†–ê–ù–Ø–ï–¢–°–Ø
        """
        self.is_panel_open = False
        logger.debug("üì± –ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ)")

    def open_panel(self):
        """–ü–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã–ª–∞—Å—å"""
        self.is_panel_open = True
        logger.debug("üì± –ü–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞")

    def set_tab(self, tab: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É"""
        if self.current_tab != tab:
            # –ü—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª/–ø–æ–¥—Ä–∞–∑–¥–µ–ª
            self.current_section = None
            self.current_subsection = None
            self.is_collapsed = False
            self.is_scrolled_to_top = False
        self.current_tab = tab
        logger.debug(f"üìë –í–∫–ª–∞–¥–∫–∞: {tab}")

    def set_section(self, section: str, subsection: Optional[str] = None):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª –∏ –ø–æ–¥–≤–∫–ª–∞–¥–∫—É"""
        self.current_section = section
        self.current_subsection = subsection
        if subsection:
            logger.debug(f"üìÇ –†–∞–∑–¥–µ–ª: {section} > {subsection}")
        else:
            logger.debug(f"üìÇ –†–∞–∑–¥–µ–ª: {section}")

    def mark_collapsed(self):
        """–û—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Å–≤–µ—Ä–Ω—É—Ç—ã"""
        self.is_collapsed = True
        logger.debug("üì¶ –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Å–≤–µ—Ä–Ω—É—Ç—ã")

    def mark_scrolled_to_top(self):
        """–û—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ –ø—Ä–æ—Å–∫—Ä–æ–ª–ª–∏–ª–∏ –≤ –Ω–∞—á–∞–ª–æ"""
        self.is_scrolled_to_top = True
        logger.debug("‚¨ÜÔ∏è –ü—Ä–æ—Å–∫—Ä–æ–ª–ª–µ–Ω–æ –≤ –Ω–∞—á–∞–ª–æ")

    def is_in_same_location(self, target_tab: str, target_section: str,
                           target_subsection: Optional[str] = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ
        """
        if self.current_tab != target_tab:
            return False
        if self.current_section != target_section:
            return False
        if target_subsection is not None:
            return self.current_subsection == target_subsection
        return self.current_subsection is None

    def get_state_info(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if not self.is_panel_open:
            info = "‚ùå –ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞"
        else:
            info = f"‚úÖ –ü–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞ | –í–∫–ª–∞–¥–∫–∞: {self.current_tab}"

        if self.current_section:
            info += f" | –†–∞–∑–¥–µ–ª: {self.current_section}"
        if self.current_subsection:
            info += f" > {self.current_subsection}"

        flags = []
        if self.is_collapsed:
            flags.append("—Å–≤–µ—Ä–Ω—É—Ç–æ")
        if self.is_scrolled_to_top:
            flags.append("–≤–≤–µ—Ä—Ö—É")

        if flags:
            info += f" [{', '.join(flags)}]"

        return info


# ==================== –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° ====================
class NavigationPanel:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–Ω–µ–ª—å—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –£–ú–ù–û–ô –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π

    –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
    - –ù–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª—ã –µ—Å–ª–∏ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ
    - –ù–µ –¥–µ–ª–∞–µ—Ç —Å–≤–∞–π–ø—ã –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ
    - –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –æ—Ç–∫—Ä—ã—Ç–∏—è–º–∏ –ø–∞–Ω–µ–ª–∏
    """

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    PANEL_ICON_COORDS = (29, 481)
    TAB_TASKS_COORDS = (95, 252)
    TAB_BUILDINGS_COORDS = (291, 250)
    BUTTON_GO_X = 330
    BUILDING_CENTER = (268, 517)

    # –®–∞–±–ª–æ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    TEMPLATES = {
        'panel_icon': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'navigation_icon.png'),
        'arrow_down': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'arrow_down.png'),
        'arrow_right': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'arrow_right.png'),
        'arrow_down_sub': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'arrow_down_sub.png'),
        'arrow_right_sub': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'arrow_right_sub.png'),
    }

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        self.ocr = OCREngine()
        self.config = self._load_config()
        self.nav_state = NavigationState()  # –ù–û–í–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        if not self.config:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é building_navigation.yaml")
        else:
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è building_navigation.yaml –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω—ã
        for name, path in self.TEMPLATES.items():
            exists = os.path.exists(path)
            status = "‚úÖ" if exists else "‚ùå"
            logger.debug(f"{status} –®–∞–±–ª–æ–Ω '{name}': {path}")

        logger.info("‚úÖ NavigationPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (SMART MODE)")

    def _load_config(self) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ building_navigation.yaml"""
        config_path = os.path.join(BASE_DIR, 'configs', 'building_navigation.yaml')

        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            logger.debug(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {config_path}")
            return config
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            return None
        except yaml.YAMLError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {e}")
            return None

    def get_building_config(self, building_name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–¥–∞–Ω–∏—è –∏–∑ YAML"""
        if not self.config:
            return None

        # –ü–æ–∏—Å–∫ –≤ navigation.sections
        navigation = self.config.get('navigation', {})
        sections = navigation.get('sections', {})

        for section_name, section_data in sections.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–∞–Ω–∏—è –≤ —Å–µ–∫—Ü–∏–∏
            buildings = section_data.get('buildings', [])
            for building in buildings:
                if building['name'] == building_name:
                    result = building.copy()
                    result['section'] = section_name
                    result['from_tasks_tab'] = False
                    return result

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
            if section_data.get('has_subsections'):
                subsections = section_data.get('subsections', {})
                for subsection_name, subsection_data in subsections.items():
                    buildings = subsection_data.get('buildings', [])
                    for building in buildings:
                        if building['name'] == building_name:
                            result = building.copy()
                            result['section'] = section_name
                            result['subsection'] = subsection_name
                            result['subsection_data'] = subsection_data
                            result['from_tasks_tab'] = False
                            return result

        # –ü–æ–∏—Å–∫ –≤ tasks_tab
        tasks_tab = self.config.get('tasks_tab', {})
        buildings = tasks_tab.get('buildings', [])
        for building in buildings:
            if building['name'] == building_name:
                result = building.copy()
                result['from_tasks_tab'] = True
                return result

        return None

    # ==================== –ë–ê–ó–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò ====================

    def open_navigation_panel(self, emulator: Dict) -> bool:
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        if self.nav_state.is_panel_open:
            logger.debug(f"[{emulator_name}] ‚úÖ –ü–∞–Ω–µ–ª—å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")
            return True

        logger.debug(f"[{emulator_name}] –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
        tap(emulator, x=self.PANEL_ICON_COORDS[0], y=self.PANEL_ICON_COORDS[1])
        time.sleep(1.5)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ—Ç–∫—Ä—ã–ª–∞—Å—å
        if self.is_navigation_open(emulator):
            self.nav_state.open_panel()
            logger.success(f"[{emulator_name}] ‚úÖ –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∞")
            return True
        else:
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
            return False

    def is_navigation_open(self, emulator: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        screenshot = get_screenshot(emulator)
        if screenshot is None:
            return False

        elements = self.ocr.recognize_text(screenshot, min_confidence=0.5)

        for elem in elements:
            text = elem['text'].lower()
            if '—Å–ø–∏—Å–æ–∫' in text and ('–∑–¥–∞–Ω–∏–π' in text or '–¥–µ–ª' in text):
                return True

        return False

    def switch_to_buildings_tab(self, emulator: Dict) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π'"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        if self.nav_state.current_tab == 'buildings':
            logger.debug(f"[{emulator_name}] ‚úÖ –£–∂–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π'")
            return True

        logger.debug(f"[{emulator_name}] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ '–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π'")
        tap(emulator, x=self.TAB_BUILDINGS_COORDS[0], y=self.TAB_BUILDINGS_COORDS[1])
        time.sleep(0.5)

        self.nav_state.set_tab('buildings')
        return True

    def switch_to_tasks_tab(self, emulator: Dict) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–°–ø–∏—Å–æ–∫ –¥–µ–ª'"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        if self.nav_state.current_tab == 'tasks':
            logger.debug(f"[{emulator_name}] ‚úÖ –£–∂–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–°–ø–∏—Å–æ–∫ –¥–µ–ª'")
            return True

        logger.debug(f"[{emulator_name}] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ '–°–ø–∏—Å–æ–∫ –¥–µ–ª'")
        tap(emulator, x=self.TAB_TASKS_COORDS[0], y=self.TAB_TASKS_COORDS[1])
        time.sleep(0.5)

        self.nav_state.set_tab('tasks')
        return True

    def collapse_all_sections(self, emulator: Dict, max_attempts: int = 20) -> bool:
        """
        –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∏ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
        –ü–†–ò–û–†–ò–¢–ï–¢ –£ –ü–û–î–í–ö–õ–ê–î–û–ö!
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤...")

        for attempt in range(1, max_attempts + 1):
            # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ò—â–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
            arrow_down_sub = find_image(emulator, self.TEMPLATES['arrow_down_sub'], threshold=0.8)

            if arrow_down_sub is not None:
                logger.debug(f"[{emulator_name}] –ö–ª–∏–∫ –ø–æ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ (—Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑): {arrow_down_sub}")
                tap(emulator, x=arrow_down_sub[0], y=arrow_down_sub[1])
                time.sleep(0.5)
                continue

            # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            arrow_down = find_image(emulator, self.TEMPLATES['arrow_down'], threshold=0.8)

            if arrow_down is not None:
                logger.debug(f"[{emulator_name}] –ö–ª–∏–∫ –ø–æ —Ä–∞–∑–¥–µ–ª—É (—Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑): {arrow_down}")
                tap(emulator, x=arrow_down[0], y=arrow_down[1])
                time.sleep(0.5)
                continue

            # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤—Å—ë —Å–≤—ë—Ä–Ω—É—Ç–æ
            logger.success(f"[{emulator_name}] ‚úÖ –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Å–≤—ë—Ä–Ω—É—Ç—ã")
            self.nav_state.mark_collapsed()
            return True

        logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∑–∞ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    def execute_swipes(self, emulator: Dict, swipes: List[Dict]) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–∞–π–ø–æ–≤"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        if not swipes:
            return True

        for swipe_data in swipes:
            direction = swipe_data.get('direction', 'down')
            start_x = swipe_data.get('start_x', 270)
            start_y = swipe_data.get('start_y', 700)
            end_x = swipe_data.get('end_x', 270)
            end_y = swipe_data.get('end_y', 300)
            duration = swipe_data.get('duration', 300)
            repeat = swipe_data.get('repeat', 1)

            for _ in range(repeat):
                swipe(emulator, x1=start_x, y1=start_y, x2=end_x, y2=end_y, duration=duration)
                logger.debug(f"[{emulator_name}] –°–≤–∞–π–ø {direction}: ({start_x},{start_y}) ‚Üí ({end_x},{end_y})")
                time.sleep(0.5)

        return True

    def _open_section_by_name(self, emulator: Dict, section_name: str) -> bool:
        """–û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª/–ø–æ–¥–≤–∫–ª–∞–¥–∫—É –ø–æ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ OCR"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–¥–µ–ª–∞: {section_name}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot = get_screenshot(emulator)
        if screenshot is None:
            return False

        # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç
        elements = self.ocr.recognize_text(screenshot, min_confidence=0.3)

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        section_normalized = section_name.lower().replace(' ', '')

        # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª
        for elem in elements:
            text_normalized = elem['text'].lower().replace(' ', '')

            if section_normalized in text_normalized:
                # –ù–∞—à–ª–∏! –ö–ª–∏–∫–∞–µ–º —á—É—Ç—å –ø—Ä–∞–≤–µ–µ —Ç–µ–∫—Å—Ç–∞ (—Ç—É–¥–∞ –≥–¥–µ —Å—Ç—Ä–µ–ª–∫–∞)
                tap(emulator, x=elem['x'] + 50, y=elem['y'])
                time.sleep(0.5)

                logger.success(f"[{emulator_name}] ‚úÖ –†–∞–∑–¥–µ–ª '{section_name}' –æ—Ç–∫—Ä—ã—Ç")
                return True

        logger.error(f"[{emulator_name}] ‚ùå –†–∞–∑–¥–µ–ª '{section_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    def _find_and_click_building(self, emulator: Dict, building_name: str,
                                 building_config: Dict, building_index: Optional[int] = None) -> bool:
        """–ù–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OCR –∏ –∫–ª–∏–∫–Ω—É—Ç—å '–ü–µ—Ä–µ–π—Ç–∏'"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")
        emulator_id = emulator.get('id', 0)

        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot = get_screenshot(emulator)
        if screenshot is None:
            return False

        # –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ OCR
        buildings = self.ocr.parse_navigation_panel(screenshot, emulator_id=emulator_id)

        if not buildings:
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–¥–∞–Ω–∏—è")
            return False

        # –ò—â–µ–º –Ω—É–∂–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
        ocr_pattern = building_config.get('ocr_pattern', building_name)
        is_multiple = building_config.get('multiple', False)

        ocr_pattern_normalized = ocr_pattern.lower().replace(' ', '')

        if is_multiple and building_index is not None:
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è - –∏—â–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
            matching_buildings = []

            for building in buildings:
                building_name_normalized = building['name'].lower().replace(' ', '')
                if ocr_pattern_normalized in building_name_normalized:
                    matching_buildings.append(building)

            if not matching_buildings:
                logger.error(f"[{emulator_name}] ‚ùå –ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ Y (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
            matching_buildings.sort(key=lambda b: b['y'])

            if building_index > len(matching_buildings):
                logger.error(f"[{emulator_name}] ‚ùå –ò–Ω–¥–µ–∫—Å {building_index} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
                return False

            target_building = matching_buildings[building_index - 1]
        else:
            # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
            target_building = None
            for building in buildings:
                building_name_normalized = building['name'].lower().replace(' ', '')
                if ocr_pattern_normalized in building_name_normalized:
                    target_building = building
                    break

            if not target_building:
                logger.error(f"[{emulator_name}] ‚ùå –ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False

        # –ö–ª–∏–∫–∞–µ–º "–ü–µ—Ä–µ–π—Ç–∏"
        go_button_y = target_building['y']
        tap(emulator, x=self.BUTTON_GO_X, y=go_button_y)
        time.sleep(2)

        logger.success(f"[{emulator_name}] ‚úÖ –ü–µ—Ä–µ—à–ª–∏ –∫ –∑–¥–∞–Ω–∏—é: {target_building['name']} Lv.{target_building['level']}")

        # –í–ê–ñ–ù–û: –ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã–ª–∞—Å—å, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –°–û–•–†–ê–ù–ï–ù–û
        self.nav_state.close_panel()

        return True

    # ==================== –£–ú–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø ====================

    def navigate_to_building(self, emulator: Dict, building_name: str,
                            building_index: Optional[int] = None) -> bool:
        """
        –£–ú–ù–ê–Ø –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∑–¥–∞–Ω–∏—é

        –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
        - –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –µ—Å–ª–∏ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ
        - –ù–µ –¥–µ–ª–∞–µ—Ç –ª–∏—à–Ω–∏–µ —Å–≤–∞–π–ø—ã
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
            building_index: –∏–Ω–¥–µ–∫—Å (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö)

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.info(f"[{emulator_name}] üéØ –ù–∞–≤–∏–≥–∞—Ü–∏—è: {building_name}" +
                   (f" #{building_index}" if building_index else ""))
        logger.debug(f"[{emulator_name}] üìä {self.nav_state.get_state_info()}")

        # 1. –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–¥–∞–Ω–∏—è
        building_config = self.get_building_config(building_name)
        if not building_config:
            logger.error(f"[{emulator_name}] ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        # 2. –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–∞
        if not self.nav_state.is_panel_open:
            if not self.open_navigation_panel(emulator):
                return False

        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        from_tasks_tab = building_config.get('from_tasks_tab', False)

        if from_tasks_tab:
            # === –ù–ê–í–ò–ì–ê–¶–ò–Ø –ß–ï–†–ï–ó "–°–ü–ò–°–û–ö –î–ï–õ" ===
            return self._navigate_via_tasks_tab(emulator, building_config)
        else:
            # === –ù–ê–í–ò–ì–ê–¶–ò–Ø –ß–ï–†–ï–ó "–°–ü–ò–°–û–ö –ó–î–ê–ù–ò–ô" ===
            return self._navigate_via_buildings_tab(emulator, building_config, building_index)

    def _navigate_via_tasks_tab(self, emulator: Dict, building_config: Dict) -> bool:
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ '–°–ø–∏—Å–æ–∫ –¥–µ–ª'"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É
        self.switch_to_tasks_tab(emulator)
        time.sleep(0.5)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        button_coords = building_config.get('button_coords', {})
        x = button_coords.get('x', 330)
        y = button_coords.get('y', 390)

        tap(emulator, x=x, y=y)
        time.sleep(2)

        # –ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã–ª–∞—Å—å, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        self.nav_state.close_panel()

        logger.success(f"[{emulator_name}] ‚úÖ –ü–µ—Ä–µ—à–ª–∏ –∫ –∑–¥–∞–Ω–∏—é")
        return True

    def _navigate_via_buildings_tab(self, emulator: Dict, building_config: Dict,
                                   building_index: Optional[int]) -> bool:
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ '–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π' —Å –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ï–ô"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        # 1. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π"
        self.switch_to_buildings_tab(emulator)
        time.sleep(0.5)

        # 2. –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–¥–µ–ª –∏ –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
        target_section = building_config.get('section')
        target_subsection = building_config.get('subsection')

        # 3. –ü–†–û–í–ï–†–ö–ê: –ú–æ–∂–µ—Ç –º—ã —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ?
        if self.nav_state.is_in_same_location('buildings', target_section, target_subsection):
            logger.success(f"[{emulator_name}] üöÄ –£–ñ–ï –í –ù–£–ñ–ù–û–ú –†–ê–ó–î–ï–õ–ï!")
            logger.debug(f"[{emulator_name}] ‚ö° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é, —Å—Ä–∞–∑—É –∏—â–µ–º –∑–¥–∞–Ω–∏–µ")

            # –°—Ä–∞–∑—É –∏—â–µ–º –∑–¥–∞–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            return self._find_and_click_building(emulator, building_config.get('name'),
                                                building_config, building_index)

        # 4. –ù—É–∂–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
        needs_full_reset = self._check_needs_full_reset(target_section, target_subsection)

        if needs_full_reset:
            logger.debug(f"[{emulator_name}] üîÑ –ü–æ–ª–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è (—Å–º–µ–Ω–∞ —Ä–∞–∑–¥–µ–ª–∞)")

            # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å—ë –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–≤–µ—Ä–Ω—É—Ç–æ
            if not self.nav_state.is_collapsed:
                self.collapse_all_sections(emulator)

            # –°–≤–∞–π–ø—ã –≤–≤–µ—Ä—Ö –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤ –Ω–∞—á–∞–ª–µ
            if not self.nav_state.is_scrolled_to_top:
                metadata = self.config.get('metadata', {})
                scroll_to_top = metadata.get('scroll_to_top', [])
                self.execute_swipes(emulator, scroll_to_top)
                self.nav_state.mark_scrolled_to_top()
        else:
            logger.debug(f"[{emulator_name}] ‚ö° –ß–∞—Å—Ç–∏—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è (—Ç–æ—Ç –∂–µ —Ä–∞–∑–¥–µ–ª)")

        # 5. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–¥–µ–ª
        if not self._open_section_by_name(emulator, target_section):
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª: {target_section}")
            return False

        time.sleep(0.5)

        # 6. –†–∞–±–æ—Ç–∞ —Å –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞–º–∏
        if target_subsection:
            subsection_data = building_config.get('subsection_data', {})

            # –°–≤–∞–π–ø—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ
            if subsection_data.get('requires_scroll'):
                scroll_swipes = subsection_data.get('scroll_to_subsection', [])
                self.execute_swipes(emulator, scroll_swipes)
                time.sleep(0.3)

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
            if not self._open_section_by_name(emulator, target_subsection):
                logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–≤–∫–ª–∞–¥–∫—É: {target_subsection}")
                return False

            time.sleep(0.5)

            # –°–≤–∞–π–ø—ã –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
            scroll_swipes = building_config.get('scroll_in_subsection', [])
            self.execute_swipes(emulator, scroll_swipes)
            time.sleep(0.3)
        else:
            # –°–≤–∞–π–ø—ã –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            scroll_swipes = building_config.get('scroll_in_section', [])
            self.execute_swipes(emulator, scroll_swipes)
            time.sleep(0.3)

        # 7. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.nav_state.set_section(target_section, target_subsection)

        # 8. –ù–∞—Ö–æ–¥–∏–º –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –∑–¥–∞–Ω–∏–µ
        return self._find_and_click_building(emulator, building_config.get('name'),
                                            building_config, building_index)

    def _check_needs_full_reset(self, target_section: str,
                               target_subsection: Optional[str]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–µ–Ω –ª–∏ –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ù–ï –Ω—É–∂–µ–Ω –µ—Å–ª–∏:
        - –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Ä–∞–∑–¥–µ–ª–µ
        - –î–ª—è "–†–µ—Å—É—Ä—Å—ã": —Ç–∞ –∂–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞
        - –î–ª—è "–†–∞–∑–≤–∏—Ç–∏–µ": –º–µ–∂–¥—É –ñ–∏–ª–∏—â–µ –î–µ—Ç–µ–Ω—ã—à–µ–π ‚Üî –ó–æ–Ω–∞ –ö–æ—Ä–º–ª–µ–Ω–∏—è
        - –î–ª—è "–ë–∏—Ç–≤–∞": –º–µ–∂–¥—É –õ–æ–≥–æ–≤–æ –í—Å–µ—è–¥–Ω—ã—Ö ‚Üî –õ–æ–≥–æ–≤–æ –ü–ª–æ—Ç–æ—è–¥–Ω—ã—Ö
        """
        current_section = self.nav_state.current_section
        current_subsection = self.nav_state.current_subsection

        # –†–∞–∑–¥–µ–ª –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç - –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
        if current_section != target_section:
            return True

        # === –í–ö–õ–ê–î–ö–ê "–†–ï–°–£–†–°–´" ===
        if target_section == "–†–µ—Å—É—Ä—Å—ã":
            # –ï—Å–ª–∏ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞ —Ç–∞ –∂–µ - –ù–ï –Ω—É–∂–µ–Ω —Å–±—Ä–æ—Å
            if current_subsection == target_subsection:
                return False
            # –†–∞–∑–Ω—ã–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ - –Ω—É–∂–µ–Ω —Å–±—Ä–æ—Å
            return True

        # === –í–ö–õ–ê–î–ö–ê "–†–ê–ó–í–ò–¢–ò–ï" ===
        if target_section == "–†–∞–∑–≤–∏—Ç–∏–µ":
            # –î–ª—è –≥—Ä—É–ø–ø—ã "–ñ–∏–ª–∏—â–µ –î–µ—Ç–µ–Ω—ã—à–µ–π" + "–ó–æ–Ω–∞ –ö–æ—Ä–º–ª–µ–Ω–∏—è" –º–æ–∂–Ω–æ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å
            # –ù–û —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∑–¥–∞–Ω–∏–∏
            # –ü–æ–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –í–°–ï–ì–î–ê —Å–±—Ä–æ—Å
            return True

        # === –í–ö–õ–ê–î–ö–ê "–ë–ò–¢–í–ê" ===
        if target_section == "–ë–∏—Ç–≤–∞":
            # –î–ª—è "–õ–æ–≥–æ–≤–æ –í—Å–µ—è–¥–Ω—ã—Ö" + "–õ–æ–≥–æ–≤–æ –ü–ª–æ—Ç–æ—è–¥–Ω—ã—Ö" –º–æ–∂–Ω–æ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å
            # –ü–æ–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –í–°–ï–ì–î–ê —Å–±—Ä–æ—Å
            return True

        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
        return True

    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

    def reset_navigation_state(self, emulator: Dict) -> bool:
        """
        –£–°–¢–ê–†–ï–í–®–ò–ô –º–µ—Ç–æ–¥ - –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–≤–∏–≥–∞—Ü–∏—é —á–µ—Ä–µ–∑ navigate_to_building() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (legacy)...")

        # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å—ë
        self.collapse_all_sections(emulator)

        # –°–≤–∞–π–ø—ã –≤–≤–µ—Ä—Ö
        metadata = self.config.get('metadata', {})
        scroll_to_top = metadata.get('scroll_to_top', [])
        self.execute_swipes(emulator, scroll_to_top)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.nav_state.mark_collapsed()
        self.nav_state.mark_scrolled_to_top()

        return True

    def get_building_level(self, emulator: Dict, building_name: str,
                          building_index: Optional[int] = None) -> Optional[int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–¥–∞–Ω–∏—è –ë–ï–ó –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–µ–º—É
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")
        emulator_id = emulator.get('id', 0)

        logger.info(f"[{emulator_name}] üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è: {building_name}" +
                   (f" #{building_index}" if building_index else ""))

        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        building_config = self.get_building_config(building_name)
        if not building_config:
            logger.error(f"[{emulator_name}] ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None

        # –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å
        if not self.open_navigation_panel(emulator):
            return None

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ä–∞–∑–¥–µ–ª—É (–Ω–æ –ù–ï –∫–ª–∏–∫–∞—Ç—å "–ü–µ—Ä–µ–π—Ç–∏")
        if building_config.get('from_tasks_tab'):
            self.switch_to_tasks_tab(emulator)
            time.sleep(0.5)
        else:
            self.switch_to_buildings_tab(emulator)
            time.sleep(0.5)

            # –ü–æ–ª–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ä–∞–∑–¥–µ–ª—É
            if not self.nav_state.is_collapsed:
                self.collapse_all_sections(emulator)

            if not self.nav_state.is_scrolled_to_top:
                metadata = self.config.get('metadata', {})
                scroll_to_top = metadata.get('scroll_to_top', [])
                self.execute_swipes(emulator, scroll_to_top)
                self.nav_state.mark_scrolled_to_top()

            section_name = building_config.get('section')
            if not self._open_section_by_name(emulator, section_name):
                return None

            if 'subsection' in building_config:
                subsection_name = building_config['subsection']
                subsection_data = building_config.get('subsection_data', {})

                if subsection_data.get('requires_scroll'):
                    scroll_swipes = subsection_data.get('scroll_to_subsection', [])
                    self.execute_swipes(emulator, scroll_swipes)

                if not self._open_section_by_name(emulator, subsection_name):
                    return None

                scroll_swipes = building_config.get('scroll_in_subsection', [])
                self.execute_swipes(emulator, scroll_swipes)
            else:
                scroll_swipes = building_config.get('scroll_in_section', [])
                self.execute_swipes(emulator, scroll_swipes)

        # –ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –ø–∞—Ä—Å–∏—Ç—å
        screenshot = get_screenshot(emulator)
        if screenshot is None:
            return None

        buildings = self.ocr.parse_navigation_panel(screenshot, emulator_id=emulator_id)

        if not buildings:
            logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–¥–∞–Ω–∏—è")
            return None

        # –ù–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
        ocr_pattern = building_config.get('ocr_pattern', building_name)
        is_multiple = building_config.get('multiple', False)

        ocr_pattern_normalized = ocr_pattern.lower().replace(' ', '')

        if is_multiple and building_index is not None:
            matching_buildings = []

            for building in buildings:
                building_name_normalized = building['name'].lower().replace(' ', '')
                if ocr_pattern_normalized in building_name_normalized:
                    matching_buildings.append(building)

            if not matching_buildings:
                logger.error(f"[{emulator_name}] ‚ùå –ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None

            matching_buildings.sort(key=lambda b: b['y'])

            if building_index > len(matching_buildings):
                logger.error(f"[{emulator_name}] ‚ùå –ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
                return None

            target_building = matching_buildings[building_index - 1]
            level = target_building['level']

            logger.success(f"[{emulator_name}] ‚úÖ {building_name} #{building_index}: Lv.{level}")
            return level
        else:
            for building in buildings:
                building_name_normalized = building['name'].lower().replace(' ', '')
                if ocr_pattern_normalized in building_name_normalized:
                    level = building['level']
                    logger.success(f"[{emulator_name}] ‚úÖ {building['name']}: Lv.{level}")
                    return level

        logger.error(f"[{emulator_name}] ‚ùå –ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None

    def get_all_testable_buildings(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö testable –∑–¥–∞–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        testable = []

        if not self.config:
            return testable

        navigation = self.config.get('navigation', {})
        sections = navigation.get('sections', {})

        for section_name, section_data in sections.items():
            buildings = section_data.get('buildings', [])
            for building in buildings:
                if building.get('testable', False):
                    building['section'] = section_name
                    building['from_tasks_tab'] = False
                    testable.append(building.copy())

            if section_data.get('has_subsections'):
                subsections = section_data.get('subsections', {})
                for subsection_name, subsection_data in subsections.items():
                    buildings = subsection_data.get('buildings', [])
                    for building in buildings:
                        if building.get('testable', False):
                            building['section'] = section_name
                            building['subsection'] = subsection_name
                            building['from_tasks_tab'] = False
                            testable.append(building.copy())

        tasks_tab = self.config.get('tasks_tab', {})
        buildings = tasks_tab.get('buildings', [])
        for building in buildings:
            if building.get('testable', False):
                building['from_tasks_tab'] = True
                testable.append(building.copy())

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ testable –∑–¥–∞–Ω–∏–π: {len(testable)}")
        return testable