"""
–ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—å—é –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–¥–∞–Ω–∏—è–º
–í–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import os
import time
import yaml
from typing import List, Dict, Any, Optional, Tuple
from utils.adb_controller import tap, swipe, press_key
from utils.image_recognition import find_image, get_screenshot
from utils.ocr_engine import OCREngine
from utils.logger import logger

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class NavigationPanel:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–Ω–µ–ª—å—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Å–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π)

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ù–∞–≤–∏–≥–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é YAML
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–∞–π–ø—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª–∞–º
    - –†–∞–±–æ—Ç—É —Å –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –†–µ—Å—É—Ä—Å—ã)
    - –£–º–Ω–æ–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤
    """

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    PANEL_ICON_COORDS = (29, 481)
    TAB_TASKS_COORDS = (95, 252)
    TAB_BUILDINGS_COORDS = (291, 250)
    BUTTON_GO_X = 330  # X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏"
    BUILDING_CENTER = (268, 517)  # –¶–µ–Ω—Ç—Ä –∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ "–ü–µ—Ä–µ–π—Ç–∏"

    # –®–∞–±–ª–æ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    TEMPLATES = {
        'panel_icon': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'navigation_icon.png'),
        'arrow_down': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'arrow_down.png'),
        'arrow_right': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'arrow_right.png'),
        'arrow_down_sub': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'arrow_down_sub.png'),
        'arrow_right_sub': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'arrow_right_sub.png'),
    }

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        self.ocr = OCREngine()
        self.config = self._load_config()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω
        if not self.config:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é building_navigation.yaml")
        else:
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è building_navigation.yaml –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω—ã
        for name, path in self.TEMPLATES.items():
            exists = os.path.exists(path)
            status = "‚úÖ" if exists else "‚ùå"
            logger.debug(f"{status} –®–∞–±–ª–æ–Ω '{name}': {path}")

        logger.info("‚úÖ NavigationPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def _load_config(self) -> Optional[Dict]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ building_navigation.yaml

        Returns:
            dict: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        config_path = os.path.join(BASE_DIR, 'configs', 'building_navigation.yaml')

        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            logger.debug(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {config_path}")
            return config
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            return None
        except yaml.YAMLError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {e}")
            return None

    def get_building_config(self, building_name: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–¥–∞–Ω–∏—è –∏–∑ YAML

        Args:
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è

        Returns:
            dict: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–¥–∞–Ω–∏—è –∏–ª–∏ None
        """
        if not self.config:
            return None

        # –ü–æ–∏—Å–∫ –≤ navigation.sections
        navigation = self.config.get('navigation', {})
        sections = navigation.get('sections', {})

        for section_name, section_data in sections.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–∞–Ω–∏—è –≤ —Å–µ–∫—Ü–∏–∏
            buildings = section_data.get('buildings', [])
            for building in buildings:
                if building['name'] == building_name:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∫—Ü–∏–∏
                    building['section'] = section_name
                    building['section_data'] = section_data
                    return building

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
            if section_data.get('has_subsections'):
                subsections = section_data.get('subsections', {})
                for subsection_name, subsection_data in subsections.items():
                    buildings = subsection_data.get('buildings', [])
                    for building in buildings:
                        if building['name'] == building_name:
                            building['section'] = section_name
                            building['subsection'] = subsection_name
                            building['section_data'] = section_data
                            building['subsection_data'] = subsection_data
                            return building

        # –ü–æ–∏—Å–∫ –≤ tasks_tab
        tasks_tab = self.config.get('tasks_tab', {})
        buildings = tasks_tab.get('buildings', [])
        for building in buildings:
            if building['name'] == building_name:
                building['from_tasks_tab'] = True
                return building

        logger.warning(f"‚ö†Ô∏è –ó–¥–∞–Ω–∏–µ '{building_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return None

    def get_all_testable_buildings(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö testable –∑–¥–∞–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

        Returns:
            list: [{"name": "...", "section": "...", ...}, ...]
        """
        testable = []

        if not self.config:
            return testable

        # –ò–∑ navigation.sections
        navigation = self.config.get('navigation', {})
        sections = navigation.get('sections', {})

        for section_name, section_data in sections.items():
            # –ó–¥–∞–Ω–∏—è –≤ —Å–µ–∫—Ü–∏–∏
            buildings = section_data.get('buildings', [])
            for building in buildings:
                if building.get('testable', False):
                    building['section'] = section_name
                    building['from_tasks_tab'] = False
                    testable.append(building.copy())

            # –ü–æ–¥–≤–∫–ª–∞–¥–∫–∏
            if section_data.get('has_subsections'):
                subsections = section_data.get('subsections', {})
                for subsection_name, subsection_data in subsections.items():
                    buildings = subsection_data.get('buildings', [])
                    for building in buildings:
                        if building.get('testable', False):
                            building['section'] = section_name
                            building['subsection'] = subsection_name
                            building['from_tasks_tab'] = False
                            testable.append(building.copy())

        # –ò–∑ tasks_tab
        tasks_tab = self.config.get('tasks_tab', {})
        buildings = tasks_tab.get('buildings', [])
        for building in buildings:
            if building.get('testable', False):
                building['from_tasks_tab'] = True
                testable.append(building.copy())

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ testable –∑–¥–∞–Ω–∏–π: {len(testable)}")
        return testable

    def open_navigation_panel(self, emulator: Dict) -> bool:
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        if self.is_navigation_open(emulator):
            logger.debug(f"[{emulator_name}] –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")
            return True

        logger.info(f"[{emulator_name}] –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
        tap(emulator, x=self.PANEL_ICON_COORDS[0], y=self.PANEL_ICON_COORDS[1])
        time.sleep(1.5)

        if self.is_navigation_open(emulator):
            logger.success(f"[{emulator_name}] ‚úÖ –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∞")
            return True
        else:
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
            return False

    def close_navigation_panel(self, emulator: Dict) -> bool:
        """–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
        press_key(emulator, "ESC")
        time.sleep(0.5)

        if not self.is_navigation_open(emulator):
            logger.debug(f"[{emulator_name}] ‚úÖ –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∞")
            return True
        else:
            logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å")
            return False

    def is_navigation_open(self, emulator: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        screenshot = get_screenshot(emulator)
        if screenshot is None:
            return False

        elements = self.ocr.recognize_text(screenshot, min_confidence=0.5)

        for elem in elements:
            text = elem['text'].lower()
            if '—Å–ø–∏—Å–æ–∫' in text and ('–∑–¥–∞–Ω–∏–π' in text or '–¥–µ–ª' in text):
                return True

        return False

    def switch_to_buildings_tab(self, emulator: Dict) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π'"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ '–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π'")
        tap(emulator, x=self.TAB_BUILDINGS_COORDS[0], y=self.TAB_BUILDINGS_COORDS[1])
        time.sleep(0.5)

        return True

    def switch_to_tasks_tab(self, emulator: Dict) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–°–ø–∏—Å–æ–∫ –¥–µ–ª'"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ '–°–ø–∏—Å–æ–∫ –¥–µ–ª'")
        tap(emulator, x=self.TAB_TASKS_COORDS[0], y=self.TAB_TASKS_COORDS[1])
        time.sleep(0.5)

        return True

    def collapse_all_sections(self, emulator: Dict, max_attempts: int = 15) -> bool:
        """
        –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ —Ä–∞–∑–¥–µ–ª—ã

        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ò—â–µ–º —Å—Ç—Ä–µ–ª–∫–∏ "–≤–Ω–∏–∑" (—Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ —Ä–∞–∑–¥–µ–ª—ã)
        2. –ö–ª–∏–∫–∞–µ–º –ø–æ —Å–∞–º–æ–π –≤–µ—Ä—Ö–Ω–µ–π
        3. –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∫–∞ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–µ–ª–∫–∏ "–≤–ø—Ä–∞–≤–æ"
        4. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 7 —Å—Ç—Ä–µ–ª–æ–∫ "–≤–ø—Ä–∞–≤–æ"
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.info(f"[{emulator_name}] –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤...")

        for attempt in range(1, max_attempts + 1):
            # –ü–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª–æ–∫ "–≤–Ω–∏–∑" (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã)
            arrow_down_coords = find_image(emulator, self.TEMPLATES['arrow_down'], threshold=0.8)

            # –ü–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª–æ–∫ "–≤–Ω–∏–∑" (–ø–æ–¥–≤–∫–ª–∞–¥–∫–∏)
            arrow_down_sub_coords = find_image(emulator, self.TEMPLATES['arrow_down_sub'], threshold=0.8)

            if arrow_down_coords is not None:
                # –ï—Å—Ç—å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
                x, y = arrow_down_coords
                logger.debug(f"[{emulator_name}] –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑ (–æ—Å–Ω–æ–≤–Ω–∞—è) –≤ ({x}, {y}), —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º...")
                tap(emulator, x=int(x), y=int(y))
                time.sleep(0.8)

            elif arrow_down_sub_coords is not None:
                # –ï—Å—Ç—å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
                x, y = arrow_down_sub_coords
                logger.debug(f"[{emulator_name}] –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑ (–ø–æ–¥–≤–∫–ª–∞–¥–∫–∞) –≤ ({x}, {y}), —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º...")
                tap(emulator, x=int(x), y=int(y))
                time.sleep(0.8)

            else:
                # –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Å–≤—ë—Ä–Ω—É—Ç—ã
                logger.success(f"[{emulator_name}] ‚úÖ –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Å–≤—ë—Ä–Ω—É—Ç—ã (–ø–æ–ø—ã—Ç–æ–∫: {attempt})")
                break

        if attempt >= max_attempts:
            logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ ({max_attempts})")
            return False

        return True

    def execute_swipes(self, emulator: Dict, swipes: List[Dict]) -> bool:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–∞–π–ø–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            swipes: —Å–ø–∏—Å–æ–∫ —Å–≤–∞–π–ø–æ–≤ [{"direction": "down", "start_x": ..., ...}, ...]

        Returns:
            bool: True –µ—Å–ª–∏ –≤—Å–µ —Å–≤–∞–π–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        if not swipes:
            return True

        for swipe_data in swipes:
            direction = swipe_data.get('direction', 'down')
            start_x = swipe_data.get('start_x', 270)
            start_y = swipe_data.get('start_y', 700)
            end_x = swipe_data.get('end_x', 270)
            end_y = swipe_data.get('end_y', 300)
            duration = swipe_data.get('duration', 300)
            repeat = swipe_data.get('repeat', 1)

            for _ in range(repeat):
                swipe(emulator, x1=start_x, y1=start_y, x2=end_x, y2=end_y, duration=duration)
                logger.debug(f"[{emulator_name}] –°–≤–∞–π–ø {direction}: ({start_x},{start_y}) ‚Üí ({end_x},{end_y})")
                time.sleep(0.5)

        return True

    def navigate_to_building(self, emulator: Dict, building_name: str) -> bool:
        """
        –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∑–¥–∞–Ω–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

        –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å:
        1. –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        2. –í—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–∫–ª–∞–¥–∫—É (–°–ø–∏—Å–æ–∫ –¥–µ–ª / –°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π)
        3. –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
        4. –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–∞–π–ø—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        5. –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª
        6. –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–∞–π–ø—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        7. –û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–≤–∫–ª–∞–¥–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        8. –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–∞–π–ø—ã –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        9. –ù–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OCR
        10. –ö–ª–∏–∫–Ω—É—Ç—å "–ü–µ—Ä–µ–π—Ç–∏"

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –∫ –∑–¥–∞–Ω–∏—é
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.info(f"[{emulator_name}] üéØ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∑–¥–∞–Ω–∏—é: {building_name}")

        # 1. –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–¥–∞–Ω–∏—è
        building_config = self.get_building_config(building_name)
        if not building_config:
            logger.error(f"[{emulator_name}] ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        # 2. –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if not self.open_navigation_panel(emulator):
            return False

        # 3. –í—ã–±—Ä–∞—Ç—å –≤–∫–ª–∞–¥–∫—É
        if building_config.get('from_tasks_tab'):
            # –ó–¥–∞–Ω–∏–µ –≤ "–°–ø–∏—Å–æ–∫ –¥–µ–ª"
            self.switch_to_tasks_tab(emulator)
            time.sleep(0.5)

            # –ù–∞–π—Ç–∏ —á–µ—Ä–µ–∑ OCR –∏ –∫–ª–∏–∫–Ω—É—Ç—å "–ü–µ—Ä–µ–π—Ç–∏"
            screenshot = get_screenshot(emulator)
            if screenshot is None:
                return False

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            button_coords = building_config.get('button_coords', {})
            x = button_coords.get('x', 330)
            y = button_coords.get('y', 390)

            logger.debug(f"[{emulator_name}] –ö–ª–∏–∫ '–ü–µ—Ä–µ–π—Ç–∏' –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º ({x}, {y})")
            tap(emulator, x=x, y=y)
            time.sleep(2)

            logger.success(f"[{emulator_name}] ‚úÖ –ü–µ—Ä–µ—à–ª–∏ –∫ –∑–¥–∞–Ω–∏—é: {building_name}")
            return True

        else:
            # –ó–¥–∞–Ω–∏–µ –≤ "–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π"
            self.switch_to_buildings_tab(emulator)
            time.sleep(0.5)

            # 4. –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
            if not self.collapse_all_sections(emulator):
                logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã")

            # 5. –°–≤–∞–π–ø—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            section_data = building_config.get('section_data', {})
            if section_data.get('requires_scroll'):
                scroll_swipes = section_data.get('scroll_to_section', [])
                self.execute_swipes(emulator, scroll_swipes)

            # 6. –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª
            section_name = building_config.get('section')
            if not self._open_section_by_name(emulator, section_name):
                return False

            # 7. –†–∞–±–æ—Ç–∞ —Å –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if 'subsection' in building_config:
                subsection_name = building_config['subsection']
                subsection_data = building_config.get('subsection_data', {})

                # –°–≤–∞–π–ø—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ
                if subsection_data.get('requires_scroll'):
                    scroll_swipes = subsection_data.get('scroll_to_subsection', [])
                    self.execute_swipes(emulator, scroll_swipes)

                # –û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–≤–∫–ª–∞–¥–∫—É
                if not self._open_section_by_name(emulator, subsection_name):
                    return False

                # –°–≤–∞–π–ø—ã –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
                scroll_swipes = building_config.get('scroll_in_subsection', [])
                self.execute_swipes(emulator, scroll_swipes)

            else:
                # –°–≤–∞–π–ø—ã –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫)
                scroll_swipes = building_config.get('scroll_in_section', [])
                self.execute_swipes(emulator, scroll_swipes)

            # 8. –ù–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OCR –∏ –∫–ª–∏–∫–Ω—É—Ç—å "–ü–µ—Ä–µ–π—Ç–∏"
            return self._find_and_click_building(emulator, building_name, building_config)

    def _open_section_by_name(self, emulator: Dict, section_name: str) -> bool:
        """
        –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª/–ø–æ–¥–≤–∫–ª–∞–¥–∫—É –ø–æ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ OCR

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            section_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞

        Returns:
            bool: True –µ—Å–ª–∏ —Ä–∞–∑–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–¥–µ–ª–∞: {section_name}")

        screenshot = get_screenshot(emulator)
        if screenshot is None:
            return False

        # –ù–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª —á–µ—Ä–µ–∑ OCR
        elements = self.ocr.recognize_text(screenshot, min_confidence=0.5)

        for elem in elements:
            if section_name.lower() in elem['text'].lower():
                # –ù–∞—à–ª–∏ —Ä–∞–∑–¥–µ–ª, –∫–ª–∏–∫–∞–µ–º
                tap(emulator, x=elem['x'], y=elem['y'])
                time.sleep(0.8)
                logger.debug(f"[{emulator_name}] ‚úÖ –†–∞–∑–¥–µ–ª '{section_name}' –æ—Ç–∫—Ä—ã—Ç")
                return True

        logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –†–∞–∑–¥–µ–ª '{section_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
        return False

    def _find_and_click_building(self, emulator: Dict, building_name: str, building_config: Dict) -> bool:
        """
        –ù–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OCR –∏ –∫–ª–∏–∫–Ω—É—Ç—å "–ü–µ—Ä–µ–π—Ç–∏"

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
            building_config: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–¥–∞–Ω–∏—è

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")
        emulator_id = emulator.get('id', 0)

        screenshot = get_screenshot(emulator)
        if screenshot is None:
            return False

        # –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ OCR
        buildings = self.ocr.parse_navigation_panel(screenshot, emulator_id=emulator_id)

        # –ü–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è
        ocr_pattern = building_config.get('ocr_pattern', building_name)
        is_multiple = building_config.get('multiple', False)

        target_building = None

        for building in buildings:
            if ocr_pattern.lower() in building['name'].lower():
                # –ù–∞—à–ª–∏ –∑–¥–∞–Ω–∏–µ
                if is_multiple:
                    # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π - –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ø–∞–≤—à–µ–µ—Å—è
                    target_building = building
                    break
                else:
                    # –î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    target_building = building
                    break

        if not target_building:
            logger.error(f"[{emulator_name}] ‚ùå –ó–¥–∞–Ω–∏–µ '{building_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ")
            return False

        # –ö–ª–∏–∫ "–ü–µ—Ä–µ–π—Ç–∏"
        y_coord = target_building['y']
        tap(emulator, x=self.BUTTON_GO_X, y=y_coord)
        time.sleep(2)

        logger.success(f"[{emulator_name}] ‚úÖ –ü–µ—Ä–µ—à–ª–∏ –∫ –∑–¥–∞–Ω–∏—é: {building_name} (Lv.{target_building['level']})")
        return True

    def reset_navigation_state(self, emulator: Dict) -> bool:
        """
        –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        –î–µ–π—Å—Ç–≤–∏—è:
        1. –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª—ã
        2. –°–≤–∞–π–ø –≤–≤–µ—Ä—Ö 2 —Ä–∞–∑–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ
        3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ —Å–≤—ë—Ä–Ω—É—Ç–æ

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")

        # 1. –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
        self.collapse_all_sections(emulator)

        # 2. –°–≤–∞–π–ø –≤–≤–µ—Ä—Ö 2 —Ä–∞–∑–∞
        metadata = self.config.get('metadata', {})
        scroll_to_top = metadata.get('scroll_to_top', [])
        self.execute_swipes(emulator, scroll_to_top)

        # 3. –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å–≤–µ—Ä–Ω—É—Ç—å
        self.collapse_all_sections(emulator)

        logger.debug(f"[{emulator_name}] ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω–æ")
        return True