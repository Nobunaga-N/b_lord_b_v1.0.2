"""
–ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—å—é –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–¥–∞–Ω–∏—è–º
–í–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ + Recovery System

–í–µ—Ä—Å–∏—è: 1.1
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-01-07
–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 2025-01-16 (–¥–æ–±–∞–≤–ª–µ–Ω–∞ Recovery System)
"""

import os
import time
import yaml
from typing import List, Dict, Any, Optional, Tuple
from utils.adb_controller import tap, swipe, press_key
from utils.image_recognition import find_image, get_screenshot
from utils.ocr_engine import OCREngine
from utils.logger import logger
from utils.recovery_manager import recovery_manager, retry_with_recovery  # –ù–û–í–û–ï: Recovery System

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class NavigationPanel:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–Ω–µ–ª—å—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Å–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π)

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ù–∞–≤–∏–≥–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é YAML
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–∞–π–ø—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª–∞–º
    - –†–∞–±–æ—Ç—É —Å –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –†–µ—Å—É—Ä—Å—ã)
    - –£–º–Ω–æ–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤
    - Recovery –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)
    """

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    PANEL_ICON_COORDS = (29, 481)
    TAB_TASKS_COORDS = (95, 252)
    TAB_BUILDINGS_COORDS = (291, 250)
    BUTTON_GO_X = 330  # X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏"
    BUILDING_CENTER = (268, 517)  # –¶–µ–Ω—Ç—Ä –∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ "–ü–µ—Ä–µ–π—Ç–∏"

    # –®–∞–±–ª–æ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    TEMPLATES = {
        'panel_icon': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'navigation_icon.png'),
        'arrow_down': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'arrow_down.png'),
        'arrow_right': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'arrow_right.png'),
        'arrow_down_sub': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'arrow_down_sub.png'),
        'arrow_right_sub': os.path.join(BASE_DIR, 'data', 'templates', 'building', 'arrow_right_sub.png'),
    }

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        self.ocr = OCREngine()
        self.config = self._load_config()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω
        if not self.config:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é building_navigation.yaml")
        else:
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è building_navigation.yaml –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω—ã
        for name, path in self.TEMPLATES.items():
            exists = os.path.exists(path)
            status = "‚úÖ" if exists else "‚ùå"
            logger.debug(f"{status} –®–∞–±–ª–æ–Ω '{name}': {path}")

        logger.info("‚úÖ NavigationPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def _load_config(self) -> Optional[Dict]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ building_navigation.yaml

        Returns:
            dict: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        config_path = os.path.join(BASE_DIR, 'configs', 'building_navigation.yaml')

        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            logger.debug(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {config_path}")
            return config
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            return None
        except yaml.YAMLError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {e}")
            return None

    def get_building_config(self, building_name: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–¥–∞–Ω–∏—è –∏–∑ YAML

        Args:
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è

        Returns:
            dict: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–¥–∞–Ω–∏—è –∏–ª–∏ None
        """
        if not self.config:
            return None

        # –ü–æ–∏—Å–∫ –≤ navigation.sections
        navigation = self.config.get('navigation', {})
        sections = navigation.get('sections', {})

        for section_name, section_data in sections.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–∞–Ω–∏—è –≤ —Å–µ–∫—Ü–∏–∏
            buildings = section_data.get('buildings', [])
            for building in buildings:
                if building['name'] == building_name:
                    result = building.copy()
                    result['section'] = section_name
                    result['from_tasks_tab'] = False
                    return result

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
            if section_data.get('has_subsections'):
                subsections = section_data.get('subsections', {})
                for subsection_name, subsection_data in subsections.items():
                    buildings = subsection_data.get('buildings', [])
                    for building in buildings:
                        if building['name'] == building_name:
                            result = building.copy()
                            result['section'] = section_name
                            result['subsection'] = subsection_name
                            result['subsection_data'] = subsection_data
                            result['from_tasks_tab'] = False
                            return result

        # –ü–æ–∏—Å–∫ –≤ tasks_tab
        tasks_tab = self.config.get('tasks_tab', {})
        buildings = tasks_tab.get('buildings', [])
        for building in buildings:
            if building['name'] == building_name:
                result = building.copy()
                result['from_tasks_tab'] = True
                return result

        return None

    def get_buildings_in_section(self, emulator: Dict, section_name: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ —á–µ—Ä–µ–∑ OCR –ø–∞—Ä—Å–∏–Ω–≥

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            section_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞

        Returns:
            list: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–¥–∞–Ω–∏—è—Ö
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")
        emulator_id = emulator.get('id', 0)

        logger.info(f"[{emulator_name}] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–¥–∞–Ω–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ: {section_name}")

        # –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if not self.open_navigation_panel(emulator):
            return []

        # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ "–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π"
        self.switch_to_buildings_tab(emulator)

        # –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
        self.collapse_all_sections(emulator)

        # –ù–∞–π—Ç–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª
        if not self._open_section_by_name(emulator, section_name):
            logger.error(f"[{emulator_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª: {section_name}")
            return []

        # –ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot = get_screenshot(emulator)
        if screenshot is None:
            return []

        # –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ OCR
        buildings = self.ocr.parse_navigation_panel(screenshot, emulator_id=emulator_id)

        logger.info(f"[{emulator_name}] –ù–∞–π–¥–µ–Ω–æ –∑–¥–∞–Ω–∏–π: {len(buildings)}")
        return buildings

    def get_all_testable_buildings(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö testable –∑–¥–∞–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

        Returns:
            list: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ testable –∑–¥–∞–Ω–∏—è—Ö
        """
        testable = []

        if not self.config:
            return testable

        # –ò–∑ navigation.sections
        navigation = self.config.get('navigation', {})
        sections = navigation.get('sections', {})

        for section_name, section_data in sections.items():
            # –ó–¥–∞–Ω–∏—è –≤ —Å–µ–∫—Ü–∏–∏
            buildings = section_data.get('buildings', [])
            for building in buildings:
                if building.get('testable', False):
                    building['section'] = section_name
                    building['from_tasks_tab'] = False
                    testable.append(building.copy())

            # –ü–æ–¥–≤–∫–ª–∞–¥–∫–∏
            if section_data.get('has_subsections'):
                subsections = section_data.get('subsections', {})
                for subsection_name, subsection_data in subsections.items():
                    buildings = subsection_data.get('buildings', [])
                    for building in buildings:
                        if building.get('testable', False):
                            building['section'] = section_name
                            building['subsection'] = subsection_name
                            building['from_tasks_tab'] = False
                            testable.append(building.copy())

        # –ò–∑ tasks_tab
        tasks_tab = self.config.get('tasks_tab', {})
        buildings = tasks_tab.get('buildings', [])
        for building in buildings:
            if building.get('testable', False):
                building['from_tasks_tab'] = True
                testable.append(building.copy())

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ testable –∑–¥–∞–Ω–∏–π: {len(testable)}")
        return testable

    def open_navigation_panel(self, emulator: Dict) -> bool:
        """
        –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π recovery –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        if self.is_navigation_open(emulator):
            logger.debug(f"[{emulator_name}] –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")
            return True

        logger.info(f"[{emulator_name}] –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")

        # –ü–û–ü–´–¢–ö–ê 1: –û–±—ã—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ
        tap(emulator, x=self.PANEL_ICON_COORDS[0], y=self.PANEL_ICON_COORDS[1])
        time.sleep(1.5)

        if self.is_navigation_open(emulator):
            logger.success(f"[{emulator_name}] ‚úÖ –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∞")
            return True

        # –ü–û–ü–´–¢–ö–ê 2: –° recovery (–ù–û–í–û–ï)
        logger.warning(f"[{emulator_name}] –ü–∞–Ω–µ–ª—å –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å, –ø—Ä–æ–±—É—é —Å recovery...")
        recovery_manager.clear_ui_state(emulator)
        time.sleep(1)

        tap(emulator, x=self.PANEL_ICON_COORDS[0], y=self.PANEL_ICON_COORDS[1])
        time.sleep(1.5)

        if self.is_navigation_open(emulator):
            logger.success(f"[{emulator_name}] ‚úÖ –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∞ (–ø–æ—Å–ª–µ recovery)")
            return True
        else:
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
            # –ù–û–í–û–ï: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è
            recovery_manager.request_emulator_restart(emulator, "–ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è")
            return False

    def close_navigation_panel(self, emulator: Dict) -> bool:
        """–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
        press_key(emulator, "ESC")
        time.sleep(0.5)

        if not self.is_navigation_open(emulator):
            logger.debug(f"[{emulator_name}] ‚úÖ –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∞")
            return True
        else:
            logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å")
            return False

    def is_navigation_open(self, emulator: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        screenshot = get_screenshot(emulator)
        if screenshot is None:
            return False

        elements = self.ocr.recognize_text(screenshot, min_confidence=0.5)

        for elem in elements:
            text = elem['text'].lower()
            if '—Å–ø–∏—Å–æ–∫' in text and ('–∑–¥–∞–Ω–∏–π' in text or '–¥–µ–ª' in text):
                return True

        return False

    def switch_to_buildings_tab(self, emulator: Dict) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π'"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ '–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π'")
        tap(emulator, x=self.TAB_BUILDINGS_COORDS[0], y=self.TAB_BUILDINGS_COORDS[1])
        time.sleep(0.5)

        return True

    def switch_to_tasks_tab(self, emulator: Dict) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–°–ø–∏—Å–æ–∫ –¥–µ–ª'"""
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ '–°–ø–∏—Å–æ–∫ –¥–µ–ª'")
        tap(emulator, x=self.TAB_TASKS_COORDS[0], y=self.TAB_TASKS_COORDS[1])
        time.sleep(0.5)

        return True

    def collapse_all_sections(self, emulator: Dict, max_attempts: int = 20) -> bool:
        """
        –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∏ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏

        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ò—â–µ–º —Å—Ç—Ä–µ–ª–∫–∏ "–≤–Ω–∏–∑" (–æ—Å–Ω–æ–≤–Ω—ã–µ –ò –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏)
        2. –ü–†–ò–û–†–ò–¢–ï–¢ –£ –ü–û–î–í–ö–õ–ê–î–û–ö (arrow_down_sub)!
           - –ï—Å–ª–∏ –µ—Å—Ç—å sub ‚Üí —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –µ—ë
           - –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–∞—è ‚Üí —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –µ—ë
        3. –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∫–∞ –ù–ï –û–°–¢–ê–ù–ï–¢–°–Ø –ù–ò –û–î–ù–û–ô —Å—Ç—Ä–µ–ª–∫–∏ "–≤–Ω–∏–∑"
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤...")

        for attempt in range(1, max_attempts + 1):
            # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ò—â–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ (arrow_down_sub)
            arrow_down_sub = find_image(emulator, self.TEMPLATES['arrow_down_sub'], threshold=0.8)

            if arrow_down_sub is not None:
                # –ù–∞—à–ª–∏ –ø–æ–¥–≤–∫–ª–∞–¥–∫—É - —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
                logger.debug(f"[{emulator_name}] –ö–ª–∏–∫ –ø–æ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ (—Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑): {arrow_down_sub}")
                tap(emulator, x=arrow_down_sub[0], y=arrow_down_sub[1])
                time.sleep(0.5)
                continue

            # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã (arrow_down)
            arrow_down = find_image(emulator, self.TEMPLATES['arrow_down'], threshold=0.8)

            if arrow_down is not None:
                # –ù–∞—à–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–¥–µ–ª - —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
                logger.debug(f"[{emulator_name}] –ö–ª–∏–∫ –ø–æ —Ä–∞–∑–¥–µ–ª—É (—Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑): {arrow_down}")
                tap(emulator, x=arrow_down[0], y=arrow_down[1])
                time.sleep(0.5)
                continue

            # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤—Å—ë —Å–≤—ë—Ä–Ω—É—Ç–æ
            logger.success(f"[{emulator_name}] ‚úÖ –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Å–≤—ë—Ä–Ω—É—Ç—ã (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
            return True

        logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∑–∞ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    def execute_swipes(self, emulator: Dict, swipes: List[Dict]) -> bool:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–∞–π–ø–æ–≤

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            swipes: —Å–ø–∏—Å–æ–∫ —Å–≤–∞–π–ø–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        if not swipes:
            return True

        for swipe_data in swipes:
            direction = swipe_data.get('direction', 'down')
            start_x = swipe_data.get('start_x', 270)
            start_y = swipe_data.get('start_y', 700)
            end_x = swipe_data.get('end_x', 270)
            end_y = swipe_data.get('end_y', 300)
            duration = swipe_data.get('duration', 300)
            repeat = swipe_data.get('repeat', 1)

            for _ in range(repeat):
                swipe(emulator, x1=start_x, y1=start_y, x2=end_x, y2=end_y, duration=duration)
                logger.debug(f"[{emulator_name}] –°–≤–∞–π–ø {direction}: ({start_x},{start_y}) ‚Üí ({end_x},{end_y})")
                time.sleep(0.5)

        return True

    @retry_with_recovery(max_attempts=2, recovery_between_attempts=True)
    def navigate_to_building(self, emulator: Dict, building_name: str,
                             building_index: Optional[int] = None) -> bool:
        """
        –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∑–¥–∞–Ω–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        –° –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º recovery –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ (—á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä)

        –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å:
        1. –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        2. –í—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–∫–ª–∞–¥–∫—É (–°–ø–∏—Å–æ–∫ –¥–µ–ª / –°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π)
        3. –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã + —Å–≤–∞–π–ø—ã –≤–≤–µ—Ä—Ö –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
        4. –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–∞–π–ø—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        5. –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª
        6. –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–∞–π–ø—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        7. –û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–≤–∫–ª–∞–¥–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        8. –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–∞–π–ø—ã –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        9. –ù–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OCR
        10. –ö–ª–∏–∫–Ω—É—Ç—å "–ü–µ—Ä–µ–π—Ç–∏"

        –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä building_index –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
            building_index: –∏–Ω–¥–µ–∫—Å –∑–¥–∞–Ω–∏—è (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π)

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –∫ –∑–¥–∞–Ω–∏—é
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.info(f"[{emulator_name}] üéØ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∑–¥–∞–Ω–∏—é: {building_name}" +
                    (f" #{building_index}" if building_index else ""))

        # 1. –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–¥–∞–Ω–∏—è
        building_config = self.get_building_config(building_name)
        if not building_config:
            logger.error(f"[{emulator_name}] ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        # 2. –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if not self.open_navigation_panel(emulator):
            return False

        # 3. –í—ã–±—Ä–∞—Ç—å –≤–∫–ª–∞–¥–∫—É
        if building_config.get('from_tasks_tab'):
            # –ó–¥–∞–Ω–∏–µ –≤ "–°–ø–∏—Å–æ–∫ –¥–µ–ª"
            self.switch_to_tasks_tab(emulator)
            time.sleep(0.5)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            button_coords = building_config.get('button_coords', {})
            x = button_coords.get('x', 330)
            y = button_coords.get('y', 390)

            tap(emulator, x=x, y=y)
            time.sleep(2)

            logger.success(f"[{emulator_name}] ‚úÖ –ü–µ—Ä–µ—à–ª–∏ –∫ –∑–¥–∞–Ω–∏—é: {building_name}")
            return True

        else:
            # –ó–¥–∞–Ω–∏–µ –≤ "–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π"
            self.switch_to_buildings_tab(emulator)
            time.sleep(0.5)

            # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            self.reset_navigation_state(emulator)

            # –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª
            section_name = building_config.get('section')
            if not self._open_section_by_name(emulator, section_name):
                return False

            # –†–∞–±–æ—Ç–∞ —Å –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞–º–∏
            if 'subsection' in building_config:
                subsection_name = building_config['subsection']
                subsection_data = building_config.get('subsection_data', {})

                if subsection_data.get('requires_scroll'):
                    scroll_swipes = subsection_data.get('scroll_to_subsection', [])
                    self.execute_swipes(emulator, scroll_swipes)

                if not self._open_section_by_name(emulator, subsection_name):
                    return False

                scroll_swipes = building_config.get('scroll_in_subsection', [])
                self.execute_swipes(emulator, scroll_swipes)
            else:
                scroll_swipes = building_config.get('scroll_in_section', [])
                self.execute_swipes(emulator, scroll_swipes)

            # 8. –ù–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OCR –∏ –∫–ª–∏–∫–Ω—É—Ç—å "–ü–µ—Ä–µ–π—Ç–∏"
            # –ü–ï–†–ï–î–ê–ï–ú building_index –≤ –º–µ—Ç–æ–¥!
            return self._find_and_click_building(emulator, building_name,
                                                 building_config, building_index)

    def _open_section_by_name(self, emulator: Dict, section_name: str) -> bool:
        """
        –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª/–ø–æ–¥–≤–∫–ª–∞–¥–∫—É –ø–æ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ OCR

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            section_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞

        Returns:
            bool: True –µ—Å–ª–∏ —Ä–∞–∑–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–¥–µ–ª–∞: {section_name}")

        screenshot = get_screenshot(emulator)
        if screenshot is None:
            return False

        # –ù–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª —á–µ—Ä–µ–∑ OCR (–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã —Ç–µ–ø–µ—Ä—å –≤ OCR –¥–≤–∏–∂–∫–µ)
        elements = self.ocr.recognize_text(screenshot, min_confidence=0.5)

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è —Ä–∞–∑–¥–µ–ª–∞ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)
        section_name_normalized = section_name.lower().replace(' ', '')

        for elem in elements:
            elem_text_normalized = elem['text'].lower().replace(' ', '')

            if section_name_normalized in elem_text_normalized:
                # –ù–∞—à–ª–∏ —Ä–∞–∑–¥–µ–ª, –∫–ª–∏–∫–∞–µ–º
                tap(emulator, x=elem['x'], y=elem['y'])
                time.sleep(0.8)
                logger.debug(f"[{emulator_name}] ‚úÖ –†–∞–∑–¥–µ–ª '{section_name}' –æ—Ç–∫—Ä—ã—Ç")
                return True

        logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –†–∞–∑–¥–µ–ª '{section_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
        return False

    def _find_and_click_building(self, emulator: Dict, building_name: str,
                                 building_config: Dict,
                                 building_index: Optional[int] = None) -> bool:
        """
        –ù–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OCR –∏ –∫–ª–∏–∫–Ω—É—Ç—å "–ü–µ—Ä–µ–π—Ç–∏"

        –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç –∑–¥–∞–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É,
        –∞ –Ω–µ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–∞–≤—à–µ–µ—Å—è

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
            building_config: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–¥–∞–Ω–∏—è
            building_index: –∏–Ω–¥–µ–∫—Å –∑–¥–∞–Ω–∏—è (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö)

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")
        emulator_id = emulator.get('id', 0)

        screenshot = get_screenshot(emulator)
        if screenshot is None:
            return False

        # –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ OCR
        buildings = self.ocr.parse_navigation_panel(screenshot, emulator_id=emulator_id)

        # –ü–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è
        ocr_pattern = building_config.get('ocr_pattern', building_name)
        is_multiple = building_config.get('multiple', False)

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
        ocr_pattern_normalized = ocr_pattern.lower().replace(' ', '')

        target_building = None

        if is_multiple and building_index is not None:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π —Å –∏–Ω–¥–µ–∫—Å–æ–º
            # –ù–∞—Ö–æ–¥–∏–º –í–°–ï —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —ç—Ç–æ–≥–æ –∑–¥–∞–Ω–∏—è
            matching_buildings = []

            for building in buildings:
                building_name_normalized = building['name'].lower().replace(' ', '')

                if ocr_pattern_normalized in building_name_normalized:
                    matching_buildings.append(building)

            if not matching_buildings:
                logger.error(f"[{emulator_name}] ‚ùå –ó–¥–∞–Ω–∏–µ '{building_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ")
                return False

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
            matching_buildings.sort(key=lambda b: b['y'])

            # –í—ã–±–∏—Ä–∞–µ–º –∑–¥–∞–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É (–∏–Ω–¥–µ–∫—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
            if building_index > len(matching_buildings):
                logger.error(f"[{emulator_name}] ‚ùå –ò–Ω–¥–µ–∫—Å {building_index} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ "
                             f"(–Ω–∞–π–¥–µ–Ω–æ {len(matching_buildings)} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤)")
                return False

            target_building = matching_buildings[building_index - 1]

            logger.debug(f"[{emulator_name}] üìç –í—ã–±—Ä–∞–Ω–æ –∑–¥–∞–Ω–∏–µ #{building_index} –∏–∑ {len(matching_buildings)} "
                         f"(Y={target_building['y']}, Lv.{target_building['level']})")

        else:
            # –î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–¥–∞–Ω–∏–π - –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for building in buildings:
                building_name_normalized = building['name'].lower().replace(' ', '')

                if ocr_pattern_normalized in building_name_normalized:
                    target_building = building
                    break

        if not target_building:
            logger.error(f"[{emulator_name}] ‚ùå –ó–¥–∞–Ω–∏–µ '{building_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ")
            return False

        # –ö–ª–∏–∫ "–ü–µ—Ä–µ–π—Ç–∏"
        y_coord = target_building['y']
        tap(emulator, x=self.BUTTON_GO_X, y=y_coord)
        time.sleep(2)

        logger.success(f"[{emulator_name}] ‚úÖ –ü–µ—Ä–µ—à–ª–∏ –∫ –∑–¥–∞–Ω–∏—é: {building_name}" +
                       (f" #{building_index}" if building_index else "") +
                       f" (Lv.{target_building['level']})")
        return True

    def get_building_level(self, emulator: dict, building_name: str,
                           building_index: Optional[int] = None) -> Optional[int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–¥–∞–Ω–∏—è –ë–ï–ó –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–µ–º—É

        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π –ø–æ –∏–Ω–¥–µ–∫—Å—É

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
            building_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
            building_index: –∏–Ω–¥–µ–∫—Å –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π (1, 2, 3, 4)

        Returns:
            int: —É—Ä–æ–≤–µ–Ω—å –∑–¥–∞–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")
        emulator_id = emulator.get('id', 0)

        logger.info(f"[{emulator_name}] üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è: {building_name}" +
                    (f" #{building_index}" if building_index else ""))

        # 1. –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–¥–∞–Ω–∏—è
        building_config = self.get_building_config(building_name)
        if not building_config:
            logger.error(f"[{emulator_name}] ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None

        # 2. –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if not self.open_navigation_panel(emulator):
            return None

        # 3. –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É (–Ω–æ –ù–ï –∫–ª–∏–∫–∞—Ç—å "–ü–µ—Ä–µ–π—Ç–∏")
        if building_config.get('from_tasks_tab'):
            self.switch_to_tasks_tab(emulator)
            time.sleep(0.5)
        else:
            self.switch_to_buildings_tab(emulator)
            time.sleep(0.5)

            self.reset_navigation_state(emulator)

            section_name = building_config.get('section')
            if not self._open_section_by_name(emulator, section_name):
                return None

            if 'subsection' in building_config:
                subsection_name = building_config['subsection']
                subsection_data = building_config.get('subsection_data', {})

                if subsection_data.get('requires_scroll'):
                    scroll_swipes = subsection_data.get('scroll_to_subsection', [])
                    self.execute_swipes(emulator, scroll_swipes)

                if not self._open_section_by_name(emulator, subsection_name):
                    return None

                scroll_swipes = building_config.get('scroll_in_subsection', [])
                self.execute_swipes(emulator, scroll_swipes)
            else:
                scroll_swipes = building_config.get('scroll_in_section', [])
                self.execute_swipes(emulator, scroll_swipes)

        # 4. –ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –ø–∞—Ä—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π
        screenshot = get_screenshot(emulator)
        if screenshot is None:
            return None

        # –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ OCR
        buildings = self.ocr.parse_navigation_panel(screenshot, emulator_id=emulator_id)

        if not buildings:
            logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–¥–∞–Ω–∏—è")
            return None

        # 5. –ù–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
        ocr_pattern = building_config.get('ocr_pattern', building_name)
        is_multiple = building_config.get('multiple', False)

        ocr_pattern_normalized = ocr_pattern.lower().replace(' ', '')

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º
        if is_multiple and building_index is not None:
            # –ù–∞—Ö–æ–¥–∏–º –í–°–ï —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
            matching_buildings = []

            for building in buildings:
                building_name_normalized = building['name'].lower().replace(' ', '')

                if ocr_pattern_normalized in building_name_normalized:
                    matching_buildings.append(building)

            if not matching_buildings:
                logger.error(f"[{emulator_name}] ‚ùå –ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ")
                return None

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ Y (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
            matching_buildings.sort(key=lambda b: b['y'])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            if building_index > len(matching_buildings):
                logger.error(f"[{emulator_name}] ‚ùå –ò–Ω–¥–µ–∫—Å {building_index} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ "
                             f"(–Ω–∞–π–¥–µ–Ω–æ {len(matching_buildings)})")
                return None

            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
            target_building = matching_buildings[building_index - 1]
            level = target_building['level']

            logger.success(f"[{emulator_name}] ‚úÖ {building_name} #{building_index}: Lv.{level}")
            return level

        else:
            # –î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–¥–∞–Ω–∏–π
            for building in buildings:
                building_name_normalized = building['name'].lower().replace(' ', '')

                if ocr_pattern_normalized in building_name_normalized:
                    level = building['level']
                    logger.success(f"[{emulator_name}] ‚úÖ {building['name']}: Lv.{level}")
                    return level

        logger.error(f"[{emulator_name}] ‚ùå –ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ")
        return None

    def reset_navigation_state(self, emulator: Dict) -> bool:
        """
        –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        –î–µ–π—Å—Ç–≤–∏—è:
        1. –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ)
        2. –°–≤–∞–π–ø –≤–≤–µ—Ä—Ö 2 —Ä–∞–∑–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ
        3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ —Å–≤—ë—Ä–Ω—É—Ç–æ

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        emulator_name = emulator.get('name', f"id:{emulator.get('id', '?')}")

        logger.debug(f"[{emulator_name}] –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        arrow_down = find_image(emulator, self.TEMPLATES['arrow_down'], threshold=0.8)
        arrow_down_sub = find_image(emulator, self.TEMPLATES['arrow_down_sub'], threshold=0.8)

        has_open_sections = (arrow_down is not None or arrow_down_sub is not None)

        if has_open_sections:
            logger.debug(f"[{emulator_name}] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ä–∞–∑–¥–µ–ª—ã, —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º...")
            self.collapse_all_sections(emulator)
        else:
            logger.debug(f"[{emulator_name}] –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã —É–∂–µ —Å–≤–µ—Ä–Ω—É—Ç—ã")

        # 2. –°–≤–∞–π–ø –≤–≤–µ—Ä—Ö 2 —Ä–∞–∑–∞ (–≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏)
        metadata = self.config.get('metadata', {})
        scroll_to_top = metadata.get('scroll_to_top', [])
        self.execute_swipes(emulator, scroll_to_top)

        # 3. –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å–≤–µ—Ä–Ω—É—Ç—å (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å)
        arrow_down = find_image(emulator, self.TEMPLATES['arrow_down'], threshold=0.8)
        arrow_down_sub = find_image(emulator, self.TEMPLATES['arrow_down_sub'], threshold=0.8)

        if arrow_down is not None or arrow_down_sub is not None:
            logger.debug(f"[{emulator_name}] –ü–æ—Å–ª–µ —Å–≤–∞–π–ø–∞ –ø–æ—è–≤–∏–ª–∏—Å—å –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ä–∞–∑–¥–µ–ª—ã, —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º...")
            self.collapse_all_sections(emulator)

        logger.debug(f"[{emulator_name}] ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω–æ")
        return True

    # –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def go_to_building(self, emulator: Dict, building_name: str,
                       building_index: Optional[int] = None) -> bool:
        """–ê–ª–∏–∞—Å –¥–ª—è navigate_to_building (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self.navigate_to_building(emulator, building_name, building_index)