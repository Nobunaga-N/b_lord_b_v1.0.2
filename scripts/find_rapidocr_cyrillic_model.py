"""
–ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–µ–π cyrillic rec_model –≤ rapidocr

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    pip install rapidocr-onnxruntime
    python scripts/find_rapidocr_cyrillic_model.py

–†–µ–∑—É–ª—å—Ç–∞—Ç:
    - –ù–∞–π–¥–µ—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ rapidocr
    - –°–∫–æ–ø–∏—Ä—É–µ—Ç cyrillic rec –º–æ–¥–µ–ª—å –≤ data/models/onnx/rec_model.onnx
    - –ó–∞–º–µ–Ω–∏—Ç —Å–ª–æ–º–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –Ω–∞ —Ä–∞–±–æ—á—É—é
"""

import importlib.util
import shutil
from pathlib import Path


def find_and_copy_cyrillic_model():
    print("\n" + "=" * 70)
    print("üîç –ü–û–ò–°–ö –†–ê–ë–û–ß–ï–ô CYRILLIC REC_MODEL –í RAPIDOCR")
    print("=" * 70 + "\n")

    # 1. –ù–∞–π—Ç–∏ rapidocr (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∞)
    rapidocr_module = None

    # –í–∞—Ä–∏–∞–Ω—Ç 1: rapidocr_onnxruntime
    try:
        import rapidocr_onnxruntime
        rapidocr_module = rapidocr_onnxruntime
        print("‚úÖ –ù–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å: rapidocr_onnxruntime")
    except ImportError:
        pass

    # –í–∞—Ä–∏–∞–Ω—Ç 2: rapidocr
    if rapidocr_module is None:
        try:
            import rapidocr
            rapidocr_module = rapidocr
            print("‚úÖ –ù–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å: rapidocr")
        except ImportError:
            pass

    # –í–∞—Ä–∏–∞–Ω—Ç 3: RapidOCR
    if rapidocr_module is None:
        try:
            from rapidocr_onnxruntime import RapidOCR
            rapidocr_module = True  # –ù–∞—à–ª–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ
            print("‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å: RapidOCR")
        except ImportError:
            pass

    if rapidocr_module is None:
        print("‚ùå rapidocr –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É:")
        print("   pip list | grep rapid")
        print("\n–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:")
        print("   pip uninstall rapidocr-onnxruntime -y")
        print("   pip install rapidocr-onnxruntime\n")
        return False

    # 2. –ù–∞–π—Ç–∏ –ø—É—Ç—å –∫ –º–æ–¥–µ–ª—è–º (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
    models_src = None

    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ß–µ—Ä–µ–∑ importlib
    for module_name in ['rapidocr_onnxruntime', 'rapidocr']:
        spec = importlib.util.find_spec(module_name)
        if spec and spec.origin:
            rapidocr_path = Path(spec.origin).parent
            models_candidate = rapidocr_path / 'models'

            if models_candidate.exists():
                models_src = models_candidate
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ rapidocr: {models_src}\n")
                break
            else:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
                models_candidate = rapidocr_path.parent / 'models'
                if models_candidate.exists():
                    models_src = models_candidate
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ rapidocr: {models_src}\n")
                    break

    if models_src is None:
        print("‚ùå –ü–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –≤—Ä—É—á–Ω—É—é:")
        print("   1. –ù–∞–π–¥–∏—Ç–µ –ø–∞–ø–∫—É rapidocr –≤ –≤–∞—à–µ–º .venv:")
        print("      .venv/Lib/site-packages/rapidocr*/")
        print("   2. –¢–∞–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–∞–ø–∫–∞ models/ —Å .onnx —Ñ–∞–π–ª–∞–º–∏\n")
        return False

    # 3. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ rapidocr:\n")
    all_models = list(models_src.glob('*.onnx'))

    if not all_models:
        print("‚ö†Ô∏è –ù–µ—Ç ONNX –º–æ–¥–µ–ª–µ–π –≤ rapidocr!")
        return False

    for model_file in all_models:
        size_mb = model_file.stat().st_size / (1024 * 1024)
        print(f"   ‚Ä¢ {model_file.name} ({size_mb:.1f} –ú–ë)")

    # 4. –ù–∞–π—Ç–∏ cyrillic rec –º–æ–¥–µ–ª—å
    print("\nüîç –ü–æ–∏—Å–∫ cyrillic rec –º–æ–¥–µ–ª–∏...\n")

    # –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π
    cyrillic_patterns = [
        'cyrillic*rec*.onnx',
        'russian*rec*.onnx',
        'ru*rec*.onnx',
        'eslav*rec*.onnx',
        '*cyrillic*.onnx'
    ]

    cyrillic_model = None
    for pattern in cyrillic_patterns:
        matches = list(models_src.glob(pattern))
        if matches:
            cyrillic_model = matches[0]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ cyrillic –º–æ–¥–µ–ª—å: {cyrillic_model.name}")
            break

    if not cyrillic_model:
        print("‚ö†Ô∏è Cyrillic –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ rapidocr!")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ rec –º–æ–¥–µ–ª–∏:")
        rec_models = [m for m in all_models if 'rec' in m.name.lower()]
        if rec_models:
            for model in rec_models:
                print(f"   ‚Ä¢ {model.name}")
            print("\n–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é rec –º–æ–¥–µ–ª—å...")
            cyrillic_model = rec_models[0]
        else:
            print("‚ùå –ù–µ—Ç rec –º–æ–¥–µ–ª–µ–π –≤ rapidocr!")
            return False

    # 5. –ü—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    dst_dir = project_root / "data" / "models" / "onnx"
    dst_dir.mkdir(parents=True, exist_ok=True)

    dst_file = dst_dir / "rec_model.onnx"

    # 6. –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏
    if dst_file.exists():
        backup_file = dst_dir / "rec_model_old_BROKEN.onnx"
        print(f"\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏...")
        print(f"   {dst_file} ‚Üí {backup_file}")
        shutil.copy2(dst_file, backup_file)

    # 7. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"\nüìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏:")
    print(f"   {cyrillic_model}")
    print(f"   ‚Üí {dst_file}")

    shutil.copy2(cyrillic_model, dst_file)

    size_mb = dst_file.stat().st_size / (1024 * 1024)
    print(f"\n‚úÖ –ú–æ–¥–µ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ ({size_mb:.1f} –ú–ë)")

    # 8. –°–ª–æ–≤–∞—Ä—å —Å–∏–º–≤–æ–ª–æ–≤
    print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞—Ä—è —Å–∏–º–≤–æ–ª–æ–≤...")
    dict_file = dst_dir / "ppocr_keys_v1.txt"

    if not dict_file.exists():
        print("‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π...")

        # –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å (—Ü–∏—Ñ—Ä—ã + –ª–∞—Ç–∏–Ω–∏—Ü–∞ + –∫–∏—Ä–∏–ª–ª–∏—Ü–∞)
        chars = []
        chars.extend([str(i) for i in range(10)])
        chars.extend([chr(i) for i in range(ord('a'), ord('z') + 1)])
        chars.extend([chr(i) for i in range(ord('A'), ord('Z') + 1)])
        chars.extend([chr(i) for i in range(ord('–∞'), ord('—è') + 1)])
        chars.extend([chr(i) for i in range(ord('–ê'), ord('–Ø') + 1)])
        chars.extend(['—ë', '–Å'])
        chars.extend([' ', '.', ',', ':', '-', '(', ')', '/', '\\', 'v', 'V', 'L', 'l'])

        dict_file.write_text('\n'.join(chars), encoding='utf-8')
        print(f"‚úÖ –°–ª–æ–≤–∞—Ä—å —Å–æ–∑–¥–∞–Ω ({len(chars)} —Å–∏–º–≤–æ–ª–æ–≤)")
    else:
        print(f"‚úÖ –°–ª–æ–≤–∞—Ä—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    # 9. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
    print("\n" + "=" * 70)
    print("‚úÖ –ú–û–î–ï–õ–¨ –ó–ê–ú–ï–ù–ï–ù–ê!")
    print("=" * 70)

    print("\nüß™ –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ:")
    print("   python tests/test_onnx_raw_output.py")
    print("\n–ï—Å–ª–∏ —É–≤–∏–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–µ '0') - –∑–Ω–∞—á–∏—Ç –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚ú®")
    print("\n–ï—Å–ª–∏ –º–æ–¥–µ–ª—å –ù–ï –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞:")
    print("   1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ rec –º–æ–¥–µ–ª–∏ –∏–∑ rapidocr")
    print("   2. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ PaddleOCR (–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ)")
    print("\n–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏:")
    print(f"   {dst_dir / 'rec_model_old_BROKEN.onnx'}\n")

    return True


if __name__ == "__main__":
    try:
        success = find_and_copy_cyrillic_model()
        exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚è∏Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ")
        exit(1)
    except Exception as e:
        print(f"\n\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        exit(1)