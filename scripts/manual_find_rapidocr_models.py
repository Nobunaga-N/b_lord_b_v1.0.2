"""
–†—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π rapidocr –≤ .venv

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/manual_find_rapidocr_models.py
"""

from pathlib import Path
import shutil


def manual_find_models():
    print("\n" + "=" * 70)
    print("üîç –†–£–ß–ù–û–ô –ü–û–ò–°–ö –ú–û–î–ï–õ–ï–ô RAPIDOCR")
    print("=" * 70 + "\n")

    # –ù–∞–π—Ç–∏ .venv (–∏–ª–∏ venv)
    project_root = Path(__file__).parent.parent

    venv_folders = [
        project_root / ".venv",
        project_root / "venv",
        project_root / ".env"
    ]

    site_packages = None

    for venv in venv_folders:
        if venv.exists():
            site_packages_candidate = venv / "Lib" / "site-packages"
            if site_packages_candidate.exists():
                site_packages = site_packages_candidate
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω venv: {venv}")
                print(f"   site-packages: {site_packages}\n")
                break

    if not site_packages:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω venv!")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é.\n")
        return False

    # –ü–æ–∏—Å–∫ rapidocr –ø–∞–ø–æ–∫
    print("üîç –ü–æ–∏—Å–∫ rapidocr –ø–∞–ø–æ–∫...\n")

    rapidocr_folders = list(site_packages.glob("rapid*"))

    if not rapidocr_folders:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã rapidocr –ø–∞–ø–∫–∏!")
        print("\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ rapidocr?")
        print("   pip list | findstr rapid\n")
        return False

    print(f"–ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫: {len(rapidocr_folders)}\n")

    for folder in rapidocr_folders:
        print(f"üìÅ {folder.name}")

        # –ü–æ–∏—Å–∫ models –≤–Ω—É—Ç—Ä–∏
        models_folder = folder / "models"
        if models_folder.exists():
            print(f"   ‚úÖ –ï—Å—Ç—å –ø–∞–ø–∫–∞ models/")

            # –ü–æ–∫–∞–∑–∞—Ç—å .onnx —Ñ–∞–π–ª—ã
            onnx_files = list(models_folder.glob("*.onnx"))
            if onnx_files:
                print(f"   üìã ONNX –º–æ–¥–µ–ª–∏ ({len(onnx_files)}):")
                for onnx_file in onnx_files:
                    size_mb = onnx_file.stat().st_size / (1024 * 1024)
                    print(f"      ‚Ä¢ {onnx_file.name} ({size_mb:.1f} –ú–ë)")

                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ rec –º–æ–¥–µ–ª—å
                rec_models = [f for f in onnx_files if 'rec' in f.name.lower()]

                if rec_models:
                    print(f"\n   üéØ –ù–∞–π–¥–µ–Ω—ã REC –º–æ–¥–µ–ª–∏:")
                    for i, rec_model in enumerate(rec_models, 1):
                        print(f"      {i}. {rec_model.name}")

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ cyrillic/russian
                        if any(keyword in rec_model.name.lower() for keyword in ['cyrillic', 'russian', 'ru', 'eslav']):
                            print(f"         ‚≠ê CYRILLIC –ú–û–î–ï–õ–¨!")

                    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                    print("\n   üí° –•–æ—Ç–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å?")
                    print(f"      –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä (1-{len(rec_models)}) –∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞: ", end='')

                    choice = input().strip()

                    if choice.isdigit() and 1 <= int(choice) <= len(rec_models):
                        selected_model = rec_models[int(choice) - 1]

                        # –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                        dst_dir = project_root / "data" / "models" / "onnx"
                        dst_dir.mkdir(parents=True, exist_ok=True)
                        dst_file = dst_dir / "rec_model.onnx"

                        # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
                        if dst_file.exists():
                            backup = dst_dir / "rec_model_old.onnx"
                            shutil.copy2(dst_file, backup)
                            print(f"\n      üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup.name}")

                        # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                        shutil.copy2(selected_model, dst_file)
                        print(f"      ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {dst_file}")
                        print(f"\n      üß™ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ:")
                        print(f"         python tests/test_onnx_raw_output.py\n")

                        return True
            else:
                print(f"   ‚ö†Ô∏è –ù–µ—Ç .onnx —Ñ–∞–π–ª–æ–≤")
        else:
            print(f"   ‚ö†Ô∏è –ù–µ—Ç –ø–∞–ø–∫–∏ models/")

        print()

    print("=" * 70)
    print("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
    print("=" * 70 + "\n")

    return False


if __name__ == "__main__":
    try:
        manual_find_models()
    except KeyboardInterrupt:
        print("\n\n‚è∏Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"\n\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback

        traceback.print_exc()