"""
–≠–∫—Å–ø–æ—Ä—Ç ONNX –º–æ–¥–µ–ª–µ–π –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–µ—à–∞ PaddleX

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/download_onnx_models.py

–†–µ–∑—É–ª—å—Ç–∞—Ç:
    data/models/onnx/
        ‚îú‚îÄ‚îÄ det_model.onnx          (~8 –ú–ë)
        ‚îú‚îÄ‚îÄ rec_model.onnx          (~10 –ú–ë)
        ‚îú‚îÄ‚îÄ cls_model.onnx          (~2 –ú–ë)
        ‚îî‚îÄ‚îÄ ppocr_keys_v1.txt       (—Å–ª–æ–≤–∞—Ä—å —Å–∏–º–≤–æ–ª–æ–≤)

–ò—Å—Ç–æ—á–Ω–∏–∫: –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ –∫–µ—à–∞ PaddleX (~/.paddlex/official_models/)
"""

import os
import sys
import shutil
from pathlib import Path


def download_file(url, save_path):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

    Args:
        url: URL —Ñ–∞–π–ª–∞
        save_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    import urllib.request

    print(f"   üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ...")

    def progress_hook(count, block_size, total_size):
        if total_size > 0:
            percent = int(count * block_size * 100 / total_size)
            sys.stdout.write(f"\r      –ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}% ")
            sys.stdout.flush()

    urllib.request.urlretrieve(url, save_path, progress_hook)
    print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞


def copy_from_rapidocr():
    """
    –ö–æ–ø–∏—Ä—É–µ—Ç ONNX –º–æ–¥–µ–ª–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ rapidocr_onnxruntime

    Returns:
        bool: —É—Å–ø–µ—Ö –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    try:
        import rapidocr_onnxruntime
        import importlib.util

        # –ù–∞–π—Ç–∏ –ø—É—Ç—å –∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
        spec = importlib.util.find_spec('rapidocr_onnxruntime')
        if not spec or not spec.origin:
            return False

        rapidocr_path = Path(spec.origin).parent
        models_src = rapidocr_path / 'models'

        if not models_src.exists():
            return False

        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –º–æ–¥–µ–ª–µ–π (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ö–û–†–ù–Ø –ø—Ä–æ–µ–∫—Ç–∞)
        script_dir = Path(__file__).parent
        project_root = script_dir.parent
        models_dst = project_root / "data" / "models" / "onnx"
        models_dst.mkdir(parents=True, exist_ok=True)

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ rapidocr_onnxruntime")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {models_src}")
        print(f"   –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {models_dst}\n")

        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ:")
        available_models = list(models_src.glob('*.onnx'))
        for model_file in available_models:
            size_mb = model_file.stat().st_size / (1024 * 1024)
            print(f"   ‚Ä¢ {model_file.name} ({size_mb:.1f} –ú–ë)")
        print()

        # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞–∑–≤–∞–Ω–∏–π)
        models_to_copy = {
            'det_model.onnx': [
                'ch_PP-OCRv4_det_infer.onnx',
                'ch_PP-OCRv3_det_infer.onnx',
                'en_PP-OCRv3_det_infer.onnx'
            ],
            'rec_model.onnx': [
                'cyrillic_PP-OCRv4_rec_infer.onnx',
                'en_PP-OCRv4_rec_infer.onnx',
                'ch_PP-OCRv4_rec_infer.onnx',
                'ch_PP-OCRv3_rec_infer.onnx'
            ],
            'cls_model.onnx': [
                'ch_ppocr_mobile_v2.0_cls_infer.onnx'
            ]
        }

        copied = 0
        missing = []

        for dst_name, src_variants in models_to_copy.items():
            dst_file = models_dst / dst_name

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            if dst_file.exists():
                print(f"‚úÖ {dst_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–æ–ø—É—Å–∫–∞—é)")
                copied += 1
                continue

            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            src_file = None
            for variant in src_variants:
                candidate = models_src / variant
                if candidate.exists():
                    src_file = candidate
                    break

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏ - –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            if not src_file:
                # –ò–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                keywords = src_variants[0].replace('_infer.onnx', '').split('_')

                for model_file in available_models:
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    model_lower = model_file.name.lower()
                    if any(kw.lower() in model_lower for kw in keywords if len(kw) > 2):
                        src_file = model_file
                        break

            if not src_file:
                print(f"‚ö†Ô∏è  {dst_name} - –Ω–µ –Ω–∞–π–¥–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ")
                missing.append(dst_name)
                continue

            print(f"üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {src_file.name} ‚Üí {dst_name}")
            shutil.copy2(src_file, dst_file)

            size_mb = dst_file.stat().st_size / (1024 * 1024)
            print(f"   ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ({size_mb:.1f} –ú–ë)\n")
            copied += 1

        if missing:
            print(f"\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å: {', '.join(missing)}")
            return False

        return copied >= len(models_to_copy)

    except ImportError:
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False


def convert_to_onnx():
    """
    –ü–æ–ª—É—á–∞–µ—Ç ONNX –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—è rapidocr_onnxruntime
    –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    """
    print("\n" + "="*70)
    print("üöÄ –ü–û–õ–£–ß–ï–ù–ò–ï ONNX –ú–û–î–ï–õ–ï–ô")
    print("="*70 + "\n")

    # –í–ê–ñ–ù–û: –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ö–û–†–ù–Ø –ø—Ä–æ–µ–∫—Ç–∞, –∞ –Ω–µ scripts/
    # –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ scripts/)
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    models_dir = project_root / "data" / "models" / "onnx"
    models_dir.mkdir(parents=True, exist_ok=True)

    # –°–ü–û–°–û–ë 1: –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ rapidocr_onnxruntime
    print("üì¶ –°–ü–û–°–û–ë 1: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ rapidocr_onnxruntime\n")

    if copy_from_rapidocr():
        print("\n‚úÖ –ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ rapidocr_onnxruntime!")
    else:
        print("‚ö†Ô∏è  rapidocr_onnxruntime –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n")

        # –°–ü–û–°–û–ë 2: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        print("="*70)
        print("üìù –°–ü–û–°–û–ë 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ rapidocr_onnxruntime (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)")
        print("="*70 + "\n")

        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å –≥–æ—Ç–æ–≤—ã–º–∏ ONNX –º–æ–¥–µ–ª—è–º–∏:")
        print("   pip install rapidocr-onnxruntime\n")

        print("–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
        print("–ú–æ–¥–µ–ª–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã.\n")

        print("="*70)
        print("üìù –°–ü–û–°–û–ë 3: –†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–µ—Å–ª–∏ —Å–ø–æ—Å–æ–± 2 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
        print("="*70 + "\n")

        print("–°–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª–∏ –≤—Ä—É—á–Ω—É—é –ø–æ –ø—Ä—è–º—ã–º —Å—Å—ã–ª–∫–∞–º:\n")

        # –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–µ –º–æ–¥–µ–ª–∏
        manual_links = {
            'det_model.onnx': 'https://huggingface.co/spaces/PaddlePaddle/PaddleOCR/resolve/main/inference/det_mv3_db_v2.0.onnx',
            'rec_model.onnx': 'https://huggingface.co/spaces/PaddlePaddle/PaddleOCR/resolve/main/inference/rec_crnn_ru.onnx',
            'cls_model.onnx': 'https://huggingface.co/spaces/PaddlePaddle/PaddleOCR/resolve/main/inference/cls_mv3.onnx'
        }

        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º –∏ —Å–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª—ã:")
        for filename, url in manual_links.items():
            print(f"\n   {filename}:")
            print(f"   {url}")

        print(f"\n2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É:\n   {models_dir.absolute()}\n")

        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n")

        return False

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ª–∏ –º–æ–¥–µ–ª–∏ –Ω–∞ –º–µ—Å—Ç–µ
    required_files = ['det_model.onnx', 'rec_model.onnx', 'cls_model.onnx']
    missing = [f for f in required_files if not (models_dir / f).exists()]

    if missing:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥–µ–ª–∏: {', '.join(missing)}")
        return False

    # –°–æ–∑–¥–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å–∏–º–≤–æ–ª–æ–≤
    dict_path = models_dir / 'ppocr_keys_v1.txt'

    if not dict_path.exists():
        print("\nüì• –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å–∏–º–≤–æ–ª–æ–≤...")

        # –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
        chars = []
        chars.extend([str(i) for i in range(10)])
        chars.extend([chr(i) for i in range(ord('a'), ord('z')+1)])
        chars.extend([chr(i) for i in range(ord('A'), ord('Z')+1)])
        chars.extend([chr(i) for i in range(ord('–∞'), ord('—è')+1)])
        chars.extend([chr(i) for i in range(ord('–ê'), ord('–Ø')+1)])
        chars.extend(['—ë', '–Å'])
        chars.extend([' ', '.', ',', ':', '-', '(', ')', '/', '\\', 'v', 'V', 'L', 'l'])

        dict_path.write_text('\n'.join(chars), encoding='utf-8')
        print(f"   ‚úÖ –°–ª–æ–≤–∞—Ä—å —Å–æ–∑–¥–∞–Ω ({len(chars)} —Å–∏–º–≤–æ–ª–æ–≤)\n")

    print("\n" + "="*70)
    print("‚úÖ –í–°–ï –ú–û–î–ï–õ–ò –ì–û–¢–û–í–´!")
    print("="*70 + "\n")

    print(f"üìÅ –ú–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {models_dir.absolute()}\n")
    print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
    for file in sorted(models_dir.iterdir()):
        if file.is_file():
            size_mb = file.stat().st_size / (1024 * 1024)
            print(f"   ‚Ä¢ {file.name} ({size_mb:.1f} –ú–ë)")

    print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å OCREngine –Ω–∞ ONNX Runtime!")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python tests/test_ocr_onnx.py\n")

    return True


if __name__ == "__main__":
    try:
        success = convert_to_onnx()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚è∏Ô∏è  –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)