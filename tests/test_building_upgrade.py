"""
–¢–µ—Å—Ç –º–æ–¥—É–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–¥–∞–Ω–∏–π
–ó–∞–ø—É—Å–∫: python tests/test_building_upgrade.py
"""

import sys
import time
from utils.logger import logger
from functions.building.navigation_panel import NavigationPanel
from functions.building.building_upgrade import BuildingUpgrade
from functions.building.building_database import BuildingDatabase

# –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()
logger.add(
    sys.stderr,
    format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
    level="INFO"
)


def test_upgrade_building():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏—è –∑–¥–∞–Ω–∏—è"""

    # ========== –ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–°–¢–ê ==========
    emulator = {
        'id': 0,
        'name': 'LDPlayer',
        'port': 5556
    }

    # –ó–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ (–ò–ó–ú–ï–ù–ò –ù–ê –ù–£–ñ–ù–û–ï!)
    test_building_name = "–°–∫–ª–∞–¥ –ì—Ä—É–Ω—Ç–∞"  # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
    test_building_index = 1  # –ò–Ω–¥–µ–∫—Å (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π)

    # =====================================

    logger.info("=" * 80)
    logger.info("üß™ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ò–Ø –ó–î–ê–ù–ò–Ø")
    logger.info("=" * 80)
    logger.info(f"üìç –≠–º—É–ª—è—Ç–æ—Ä: {emulator['name']} (ID: {emulator['id']})")
    logger.info(f"üèóÔ∏è –ó–¥–∞–Ω–∏–µ: {test_building_name} #{test_building_index}")
    logger.info("=" * 80)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    panel = NavigationPanel()
    upgrade = BuildingUpgrade()
    db = BuildingDatabase()

    # –®–ê–ì 1: –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    logger.info("\nüìå –®–ê–ì 1: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
    if not panel.open_navigation_panel(emulator):
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        return

    input("‚úÖ –ü–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞. –ù–∞–∂–º–∏ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    # –®–ê–ì 2: –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–¥–∞–Ω–∏—é
    logger.info(f"\nüìå –®–ê–ì 2: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–¥–∞–Ω–∏—é '{test_building_name}'...")
    if not panel.navigate_to_building(emulator, test_building_name):
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–¥–∞–Ω–∏—é '{test_building_name}'")
        return

    logger.success(f"‚úÖ –ü–µ—Ä–µ—à–ª–∏ –∫ –∑–¥–∞–Ω–∏—é '{test_building_name}'")
    time.sleep(2)  # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å

    input("‚úÖ –ó–¥–∞–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞. –ù–∞–∂–º–∏ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ —É–ª—É—á—à–µ–Ω–∏—è...")

    # –®–ê–ì 3: –£–ª—É—á—à–∏—Ç—å –∑–¥–∞–Ω–∏–µ
    logger.info(f"\nüìå –®–ê–ì 3: –£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è...")
    success, timer_seconds = upgrade.upgrade_building(
        emulator,
        test_building_name,
        test_building_index
    )

    if success:
        if timer_seconds == 0:
            logger.success("üöÄ –£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ (–ø–æ–º–æ—â—å –∞–ª—å—è–Ω—Å–∞)")
        else:
            logger.success(f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!")
            logger.info(f"‚è±Ô∏è –¢–∞–π–º–µ—Ä: {timer_seconds} —Å–µ–∫—É–Ω–¥ ({timer_seconds // 60} –º–∏–Ω—É—Ç)")

            # –®–ê–ì 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î (—Å–∏–º—É–ª—è—Ü–∏—è)
            logger.info(f"\nüìå –®–ê–ì 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            logger.info("TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ db.set_building_upgrading(...)")
            logger.info(f"  - –≠–º—É–ª—è—Ç–æ—Ä: {emulator['id']}")
            logger.info(f"  - –ó–¥–∞–Ω–∏–µ: {test_building_name} #{test_building_index}")
            logger.info(f"  - –¢–∞–π–º–µ—Ä: {timer_seconds} —Å–µ–∫")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –∑–¥–∞–Ω–∏–µ")
        logger.warning("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.warning("  1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤")
        logger.warning("  2. –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π")
        logger.warning("  3. –ó–¥–∞–Ω–∏–µ —É–∂–µ —É–ª—É—á—à–∞–µ—Ç—Å—è")

    logger.info("\n" + "=" * 80)
    logger.success("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù!")
    logger.info("=" * 80)


def test_upgrade_sequence():
    """–¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–¥–∞–Ω–∏–π"""

    # ========== –ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–°–¢–ê ==========
    emulator = {
        'id': 0,
        'name': 'LDPlayer',
        'port': 5556
    }

    # –°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
    buildings_to_upgrade = [
        ("–°–∫–ª–∞–¥ –ì—Ä—É–Ω—Ç–∞", 1),
        ("–°–∫–ª–∞–¥ –ì—Ä—É–Ω—Ç–∞", 2),
        ("–°–∫–ª–∞–¥ –ì—Ä—É–Ω—Ç–∞", 1),
    ]

    # =====================================

    logger.info("=" * 80)
    logger.info("üß™ –¢–ï–°–¢ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ì–û –£–õ–£–ß–®–ï–ù–ò–Ø")
    logger.info("=" * 80)
    logger.info(f"üìç –≠–º—É–ª—è—Ç–æ—Ä: {emulator['name']} (ID: {emulator['id']})")
    logger.info(f"üèóÔ∏è –ó–¥–∞–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ: {len(buildings_to_upgrade)}")
    logger.info("=" * 80)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    panel = NavigationPanel()
    upgrade = BuildingUpgrade()

    # –°—á–µ—Ç—á–∏–∫–∏
    success_count = 0
    failed_count = 0

    for idx, (building_name, building_index) in enumerate(buildings_to_upgrade, 1):
        logger.info(f"\n{'=' * 80}")
        logger.info(f"üìç –ó–î–ê–ù–ò–ï {idx}/{len(buildings_to_upgrade)}: {building_name} #{building_index}")
        logger.info(f"{'=' * 80}")

        # –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å
        if not panel.open_navigation_panel(emulator):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å")
            failed_count += 1
            continue

        # –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–¥–∞–Ω–∏—é
        if not panel.navigate_to_building(emulator, building_name):
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ '{building_name}'")
            failed_count += 1
            continue

        time.sleep(2)

        # –£–ª—É—á—à–∏—Ç—å
        success, timer = upgrade.upgrade_building(emulator, building_name, building_index)

        if success:
            success_count += 1
            logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {building_name} #{building_index}")
        else:
            failed_count += 1
            logger.error(f"‚ùå –ü—Ä–æ–≤–∞–ª: {building_name} #{building_index}")

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–¥–∞–Ω–∏—è–º–∏
        time.sleep(3)

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 80)
    logger.info("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
    logger.info("=" * 80)
    logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
    logger.error(f"‚ùå –ü—Ä–æ–≤–∞–ª–æ–≤: {failed_count}")
    logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_count / len(buildings_to_upgrade) * 100:.1f}%")
    logger.info("=" * 80)


if __name__ == "__main__":
    print("\nüéØ –í–´–ë–ï–†–ò –†–ï–ñ–ò–ú –¢–ï–°–¢–ê:")
    print("1. –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è (—Å –ø–∞—É–∑–∞–º–∏)")
    print("2. –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–∞–Ω–∏–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
    print()

    choice = input("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()

    if choice == "1":
        test_upgrade_building()
    elif choice == "2":
        test_upgrade_sequence()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")