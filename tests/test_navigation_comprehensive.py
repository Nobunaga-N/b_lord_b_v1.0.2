"""
Comprehensive —Ç–µ—Å—Ç –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú testable –∑–¥–∞–Ω–∏—è–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import sys
import time
from datetime import datetime
from typing import List, Dict, Tuple
from utils.logger import logger
from functions.building.navigation_panel import NavigationPanel

# –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()
logger.add(
    sys.stderr,
    format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
    level="INFO"
)


class NavigationTester:
    """–ö–ª–∞—Å—Å –¥–ª—è comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""

    def __init__(self, emulator: Dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
        """
        self.emulator = emulator
        self.panel = NavigationPanel()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_buildings = 0
        self.success_count = 0
        self.failed_count = 0
        self.results = []  # [{"name": "...", "status": "‚úÖ/‚ùå", "time": X, "error": "..."}, ...]

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.pause_between_tests = 1.0  # –°–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        self.manual_check_mode = False  # –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–¥–∞–Ω–∏—è

    def run_full_test(self, filter_section: str = None, filter_subsection: str = None) -> Dict:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö testable –∑–¥–∞–Ω–∏–π

        Args:
            filter_section: —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–¥–µ–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–†–µ—Å—É—Ä—Å—ã")
            filter_subsection: —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–§—Ä—É–∫—Ç—ã")

        Returns:
            dict: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        logger.info("=" * 80)
        logger.info("üöÄ COMPREHENSIVE TEST - –ü–ê–ù–ï–õ–¨ –ù–ê–í–ò–ì–ê–¶–ò–ò")
        logger.info("=" * 80)

        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ testable –∑–¥–∞–Ω–∏—è
        all_buildings = self.panel.get_all_testable_buildings()

        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
        if filter_section:
            all_buildings = [b for b in all_buildings if b.get('section') == filter_section]
            logger.info(f"üìå –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–¥–µ–ª—É: {filter_section}")

        if filter_subsection:
            all_buildings = [b for b in all_buildings if b.get('subsection') == filter_subsection]
            logger.info(f"üìå –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–≤–∫–ª–∞–¥–∫–µ: {filter_subsection}")

        self.total_buildings = len(all_buildings)

        if self.total_buildings == 0:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∑–¥–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return self._generate_report()

        logger.info(f"üìä –í—Å–µ–≥–æ –∑–¥–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {self.total_buildings}")
        logger.info("-" * 80)

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∑–¥–∞–Ω–∏—è
        for idx, building in enumerate(all_buildings, 1):
            building_name = building['name']
            section = building.get('section', '???')
            subsection = building.get('subsection', '-')
            count = building.get('count', 1)
            from_tasks = building.get('from_tasks_tab', False)

            logger.info(f"\n[{idx}/{self.total_buildings}] üè¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {building_name}")
            logger.info(f"   –†–∞–∑–¥–µ–ª: {section} | –ü–æ–¥–≤–∫–ª–∞–¥–∫–∞: {subsection}")
            logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} | –ò–∑ '–°–ø–∏—Å–æ–∫ –¥–µ–ª': {from_tasks}")

            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            success, elapsed_time, error = self._test_single_building(building)

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'index': idx,
                'name': building_name,
                'section': section,
                'subsection': subsection,
                'count': count,
                'from_tasks_tab': from_tasks,
                'status': '‚úÖ' if success else '‚ùå',
                'elapsed_time': elapsed_time,
                'error': error
            }
            self.results.append(result)

            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if success:
                self.success_count += 1
                logger.success(f"   ‚úÖ –£–°–ü–ï–®–ù–û (–≤—Ä–µ–º—è: {elapsed_time:.2f}—Å)")
            else:
                self.failed_count += 1
                logger.error(f"   ‚ùå –û–®–ò–ë–ö–ê: {error} (–≤—Ä–µ–º—è: {elapsed_time:.2f}—Å)")

            # –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
            if self.manual_check_mode and idx < self.total_buildings:
                input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            if idx < self.total_buildings:
                time.sleep(self.pause_between_tests)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        return self._generate_report()

    def _test_single_building(self, building: Dict) -> Tuple[bool, float, str]:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è

        Args:
            building: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–¥–∞–Ω–∏—è

        Returns:
            tuple: (success, elapsed_time, error_message)
        """
        building_name = building['name']
        start_time = time.time()

        try:
            # 1. –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∑–¥–∞–Ω–∏—é
            success = self.panel.navigate_to_building(self.emulator, building_name)

            if not success:
                elapsed_time = time.time() - start_time
                return False, elapsed_time, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–¥–∞–Ω–∏—é"

            # 2. –ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –ø–µ—Ä–µ—à–ª–∏)
            time.sleep(0.5)
            self.panel.close_navigation_panel(self.emulator)
            time.sleep(0.5)

            # 3. –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —Å–Ω–æ–≤–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
            self.panel.open_navigation_panel(self.emulator)
            time.sleep(0.5)

            # 4. –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
            self.panel.switch_to_buildings_tab(self.emulator)
            self.panel.reset_navigation_state(self.emulator)

            elapsed_time = time.time() - start_time
            return True, elapsed_time, ""

        except Exception as e:
            elapsed_time = time.time() - start_time
            return False, elapsed_time, str(e)

    def _generate_report(self) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞

        Returns:
            dict: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        logger.info("\n" + "=" * 80)
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        logger.info("=" * 80)

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_rate = (self.success_count / self.total_buildings * 100) if self.total_buildings > 0 else 0

        logger.info(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {self.total_buildings}")
        logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.success_count}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∏: {self.failed_count}")
        logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
        logger.info("\n" + "-" * 80)
        logger.info("üìÇ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ê–ó–î–ï–õ–ê–ú")
        logger.info("-" * 80)

        sections_stats = {}
        for result in self.results:
            section = result['section']
            if section not in sections_stats:
                sections_stats[section] = {'total': 0, 'success': 0, 'failed': 0}

            sections_stats[section]['total'] += 1
            if result['status'] == '‚úÖ':
                sections_stats[section]['success'] += 1
            else:
                sections_stats[section]['failed'] += 1

        for section, stats in sections_stats.items():
            rate = (stats['success'] / stats['total'] * 100) if stats['total'] > 0 else 0
            logger.info(f"{section:20} | ‚úÖ {stats['success']:2} | ‚ùå {stats['failed']:2} | üìà {rate:5.1f}%")

        # –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("\n" + "-" * 80)
        logger.info("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        logger.info("-" * 80)
        logger.info(f"{'#':<4} {'–°—Ç–∞—Ç—É—Å':<7} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<30} {'–†–∞–∑–¥–µ–ª':<20} {'–í—Ä–µ–º—è':<8}")
        logger.info("-" * 80)

        for result in self.results:
            idx = result['index']
            status = result['status']
            name = result['name'][:29]  # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ
            section = result['section'][:19]
            elapsed = result['elapsed_time']

            log_method = logger.info if status == '‚úÖ' else logger.warning
            log_method(f"{idx:<4} {status:<7} {name:<30} {section:<20} {elapsed:>6.2f}—Å")

        # –û—à–∏–±–∫–∏
        failed_results = [r for r in self.results if r['status'] == '‚ùå']
        if failed_results:
            logger.info("\n" + "-" * 80)
            logger.error("‚ùå –°–ü–ò–°–û–ö –û–®–ò–ë–û–ö")
            logger.info("-" * 80)

            for result in failed_results:
                logger.error(f"[{result['index']}] {result['name']}")
                logger.error(f"    –û—à–∏–±–∫–∞: {result['error']}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        self._save_report_to_file()

        logger.info("\n" + "=" * 80)

        return {
            'total': self.total_buildings,
            'success': self.success_count,
            'failed': self.failed_count,
            'success_rate': success_rate,
            'results': self.results
        }

    def _save_report_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"navigation_test_report_{timestamp}.txt"

            with open(filename, 'w', encoding='utf-8') as f:
                f.write("=" * 80 + "\n")
                f.write("COMPREHENSIVE TEST - –ü–ê–ù–ï–õ–¨ –ù–ê–í–ò–ì–ê–¶–ò–ò\n")
                f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write("=" * 80 + "\n\n")

                f.write(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {self.total_buildings}\n")
                f.write(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.success_count}\n")
                f.write(f"‚ùå –û—à–∏–±–∫–∏: {self.failed_count}\n")
                f.write(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.success_count / self.total_buildings * 100):.1f}%\n\n")

                f.write("-" * 80 + "\n")
                f.write("–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´\n")
                f.write("-" * 80 + "\n")

                for result in self.results:
                    f.write(f"\n[{result['index']}] {result['status']} {result['name']}\n")
                    f.write(f"    –†–∞–∑–¥–µ–ª: {result['section']}\n")
                    f.write(f"    –ü–æ–¥–≤–∫–ª–∞–¥–∫–∞: {result['subsection']}\n")
                    f.write(f"    –í—Ä–µ–º—è: {result['elapsed_time']:.2f}—Å\n")
                    if result['error']:
                        f.write(f"    –û—à–∏–±–∫–∞: {result['error']}\n")

            logger.info(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    # –ù–ê–°–¢–†–û–ô–ö–ò –≠–ú–£–õ–Ø–¢–û–†–ê (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π!)
    emulator = {
        'id': 0,
        'name': 'LDPlayer',
        'port': 5556
    }

    # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–µ—Ä
    tester = NavigationTester(emulator)

    # –ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–°–¢–ê
    tester.pause_between_tests = 1.0  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–¥–∞–Ω–∏—è–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
    tester.manual_check_mode = False  # True = –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–¥–∞–Ω–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

    logger.info("\nüéØ –†–ï–ñ–ò–ú–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    logger.info("1. –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π")
    logger.info("2. –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞")
    logger.info("3. –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏")
    logger.info("4. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (–ø–µ—Ä–≤—ã–µ 5 –∑–¥–∞–Ω–∏–π)")

    mode = input("\n–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º (1-4): ").strip()

    if mode == '1':
        # –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
        logger.info("\nüöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
        stats = tester.run_full_test()

    elif mode == '2':
        # –¢–µ—Å—Ç —Ä–∞–∑–¥–µ–ª–∞
        logger.info("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:")
        logger.info("- –í–æ–∂–∞–∫")
        logger.info("- –ú–µ–≥–∞–∑–≤–µ—Ä—å")
        logger.info("- –ë–∏—Ç–≤–∞")
        logger.info("- –†–∞–∑–≤–∏—Ç–∏–µ")
        logger.info("- –ê–ª—å—è–Ω—Å")
        logger.info("- –†–µ—Å—É—Ä—Å—ã")
        logger.info("- –î—Ä—É–≥–∏–µ")

        section = input("\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞: ").strip()
        logger.info(f"\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–∞–∑–¥–µ–ª–∞ '{section}'...")
        stats = tester.run_full_test(filter_section=section)

    elif mode == '3':
        # –¢–µ—Å—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
        logger.info("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ (–†–µ—Å—É—Ä—Å—ã):")
        logger.info("- –§—Ä—É–∫—Ç—ã")
        logger.info("- –¢—Ä–∞–≤–∞")
        logger.info("- –õ–∏—Å—Ç—å—è")
        logger.info("- –ì—Ä—É–Ω—Ç")
        logger.info("- –ü–µ—Å–æ–∫")
        logger.info("- –í–æ–¥–∞")
        logger.info("- –ú–µ–¥")

        subsection = input("\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏: ").strip()
        logger.info(f"\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ '{subsection}'...")
        stats = tester.run_full_test(filter_section="–†–µ—Å—É—Ä—Å—ã", filter_subsection=subsection)

    elif mode == '4':
        # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
        logger.info("\nüöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ (–ø–µ—Ä–≤—ã–µ 5 –∑–¥–∞–Ω–∏–π)...")

        all_buildings = tester.panel.get_all_testable_buildings()
        tester.total_buildings = min(5, len(all_buildings))

        for idx, building in enumerate(all_buildings[:5], 1):
            building_name = building['name']
            logger.info(f"\n[{idx}/5] üè¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {building_name}")

            success, elapsed_time, error = tester._test_single_building(building)

            result = {
                'index': idx,
                'name': building_name,
                'section': building.get('section', '???'),
                'subsection': building.get('subsection', '-'),
                'count': building.get('count', 1),
                'from_tasks_tab': building.get('from_tasks_tab', False),
                'status': '‚úÖ' if success else '‚ùå',
                'elapsed_time': elapsed_time,
                'error': error
            }
            tester.results.append(result)

            if success:
                tester.success_count += 1
                logger.success(f"   ‚úÖ –£–°–ü–ï–®–ù–û (–≤—Ä–µ–º—è: {elapsed_time:.2f}—Å)")
            else:
                tester.failed_count += 1
                logger.error(f"   ‚ùå –û–®–ò–ë–ö–ê: {error}")

            time.sleep(1)

        stats = tester._generate_report()

    else:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º!")
        return

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if stats['success_rate'] >= 95:
        logger.success(f"\nüéâ –û–¢–õ–ò–ß–ù–û! –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1f}%")
    elif stats['success_rate'] >= 80:
        logger.warning(f"\n‚ö†Ô∏è –•–û–†–û–®–û, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∏. –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1f}%")
    else:
        logger.error(f"\n‚ùå –ü–õ–û–•–û! –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫. –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1f}%")


if __name__ == "__main__":
    main()