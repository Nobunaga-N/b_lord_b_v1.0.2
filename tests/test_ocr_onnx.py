"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OCREngineONNX –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —ç–º—É–ª—è—Ç–æ—Ä–µ

–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å —Å PaddleOCR –≤–µ—Ä—Å–∏–µ–π

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –≠–º—É–ª—è—Ç–æ—Ä —Å –ø–æ—Ä—Ç–æ–º 5556 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω
- –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –∏–≥—Ä–µ
- –í–∫–ª–∞–¥–∫–∞ "–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞
- ONNX –º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∫–∞—á–∞–Ω—ã (python scripts/download_onnx_models.py)
"""

import time
from utils.ocr_engine_onnx import get_ocr_engine_onnx
from utils.ocr_engine import get_ocr_engine  # –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
from utils.image_recognition import get_screenshot
from utils.logger import logger


def test_onnx_ocr():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç ONNX OCR –Ω–∞ —ç–º—É–ª—è—Ç–æ—Ä–µ —Å –ø–æ—Ä—Ç–æ–º 5556

    –®–∞–≥–∏:
    1. –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
    2. –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç
    3. –¢–µ—Å—Ç–∏—Ä—É–µ—Ç ONNX –≤–µ—Ä—Å–∏—é
    4. –¢–µ—Å—Ç–∏—Ä—É–µ—Ç PaddleOCR –≤–µ—Ä—Å–∏—é (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    5. –í—ã–≤–æ–¥–∏—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """

    print("\n" + "=" * 70)
    print("üß™ –¢–ï–°–¢ OCREngineONNX - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å PaddleOCR")
    print("=" * 70 + "\n")

    # ===== –®–ê–ì 1: –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞ =====
    emulator = {
        'id': 1,
        'name': 'LDPlayer-Test',
        'port': 5556
    }

    logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–º—É–ª—è—Ç–æ—Ä: {emulator['name']} (port: {emulator['port']})")

    # ===== –®–ê–ì 2: –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç =====
    print("\nüì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")
    screenshot = get_screenshot(emulator)

    if screenshot is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç!")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("  1. –≠–º—É–ª—è—Ç–æ—Ä —Å –ø–æ—Ä—Ç–æ–º 5556 –∑–∞–ø—É—â–µ–Ω?")
        print("  2. ADB –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç–º—É–ª—è—Ç–æ—Ä—É?")
        print("  3. –ö–æ–º–∞–Ω–¥–∞ 'adb devices' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä?")
        return

    print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω: {screenshot.shape[1]}x{screenshot.shape[0]}")

    # ===== –®–ê–ì 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ONNX –≤–µ—Ä—Å–∏–∏ =====
    print("\n" + "=" * 70)
    print("üöÄ –¢–ï–°–¢ 1: OCREngineONNX (ONNX Runtime)")
    print("=" * 70 + "\n")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ONNX OCR...")
        ocr_onnx = get_ocr_engine_onnx()
        ocr_onnx.set_debug_mode(True)
        print("‚úÖ ONNX OCR –≥–æ—Ç–æ–≤ (debug —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω)")
        print(f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {ocr_onnx.providers[0]}\n")

        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞–Ω–µ–ª–∏
        print("üèóÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (ONNX)...")
        start_time = time.time()
        buildings_onnx = ocr_onnx.parse_navigation_panel(screenshot, emulator['id'])
        elapsed_onnx = time.time() - start_time

        print(f"‚úÖ ONNX: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(buildings_onnx)} –∑–¥–∞–Ω–∏–π –∑–∞ {elapsed_onnx:.2f} —Å–µ–∫")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ONNX OCR: {e}")
        logger.exception(e)
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("  1. –ú–æ–¥–µ–ª–∏ —Å–∫–∞—á–∞–Ω—ã? (python scripts/download_onnx_models.py)")
        print("  2. onnxruntime-gpu —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω? (pip install onnxruntime-gpu)")
        buildings_onnx = []
        elapsed_onnx = 0

    # ===== –®–ê–ì 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PaddleOCR –≤–µ—Ä—Å–∏–∏ =====
    print("\n" + "=" * 70)
    print("üìä –¢–ï–°–¢ 2: OCREngine (PaddleOCR) - –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
    print("=" * 70 + "\n")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR...")
        ocr_paddle = get_ocr_engine()
        ocr_paddle.set_debug_mode(False)  # –í—ã–∫–ª—é—á–∞–µ–º debug —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
        print("‚úÖ PaddleOCR –≥–æ—Ç–æ–≤\n")

        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞–Ω–µ–ª–∏
        print("üèóÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (PaddleOCR)...")
        start_time = time.time()
        buildings_paddle = ocr_paddle.parse_navigation_panel(screenshot, emulator['id'])
        elapsed_paddle = time.time() - start_time

        print(f"‚úÖ PaddleOCR: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(buildings_paddle)} –∑–¥–∞–Ω–∏–π –∑–∞ {elapsed_paddle:.2f} —Å–µ–∫")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PaddleOCR: {e}")
        logger.exception(e)
        buildings_paddle = []
        elapsed_paddle = 0

    # ===== –®–ê–ì 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ =====
    print("\n" + "=" * 70)
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 70 + "\n")

    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("‚è±Ô∏è  –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
    print("‚îå" + "‚îÄ" * 25 + "‚î¨" + "‚îÄ" * 12 + "‚î¨" + "‚îÄ" * 12 + "‚î¨" + "‚îÄ" * 12 + "‚îê")
    print("‚îÇ –î–≤–∏–∂–æ–∫                  ‚îÇ –í—Ä–µ–º—è (—Å–µ–∫) ‚îÇ –ó–¥–∞–Ω–∏–π     ‚îÇ –£—Å–∫–æ—Ä–µ–Ω–∏–µ  ‚îÇ")
    print("‚îú" + "‚îÄ" * 25 + "‚îº" + "‚îÄ" * 12 + "‚îº" + "‚îÄ" * 12 + "‚îº" + "‚îÄ" * 12 + "‚î§")

    speedup = elapsed_paddle / elapsed_onnx if elapsed_onnx > 0 else 0

    print(f"‚îÇ {'ONNX Runtime':<23} ‚îÇ {elapsed_onnx:>10.2f} ‚îÇ {len(buildings_onnx):>10} ‚îÇ {speedup:>9.2f}x ‚îÇ")
    print(f"‚îÇ {'PaddleOCR':<23} ‚îÇ {elapsed_paddle:>10.2f} ‚îÇ {len(buildings_paddle):>10} ‚îÇ {'1.00x':>11} ‚îÇ")
    print("‚îî" + "‚îÄ" * 25 + "‚î¥" + "‚îÄ" * 12 + "‚î¥" + "‚îÄ" * 12 + "‚î¥" + "‚îÄ" * 12 + "‚îò")

    if speedup > 1:
        print(f"\nüöÄ ONNX Runtime –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ {speedup:.1f}x!")
    elif speedup < 1 and speedup > 0:
        print(f"\n‚ö†Ô∏è  ONNX Runtime –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ {1 / speedup:.1f}x")

    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–¥–∞–Ω–∏–π)
    print("\nüéØ –¢–û–ß–ù–û–°–¢–¨ –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø:")

    if buildings_onnx and buildings_paddle:
        # –°—Ä–∞–≤–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —É—Ä–æ–≤–Ω–∏
        onnx_names = {(b['name'], b['level'], b['index']) for b in buildings_onnx}
        paddle_names = {(b['name'], b['level'], b['index']) for b in buildings_paddle}

        matching = onnx_names & paddle_names
        onnx_only = onnx_names - paddle_names
        paddle_only = paddle_names - onnx_names

        accuracy = len(matching) / max(len(onnx_names), len(paddle_names)) * 100 if onnx_names or paddle_names else 0

        print(f"  ‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matching)}")
        print(f"  ‚Ä¢ –¢–æ–ª—å–∫–æ ONNX: {len(onnx_only)}")
        print(f"  ‚Ä¢ –¢–æ–ª—å–∫–æ PaddleOCR: {len(paddle_only)}")
        print(f"  ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {accuracy:.1f}%")

        if onnx_only:
            print("\n  üìù –ó–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ ONNX:")
            for name, level, index in onnx_only:
                print(f"     - {name} #{index} (Lv.{level})")

        if paddle_only:
            print("\n  üìù –ó–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ PaddleOCR:")
            for name, level, index in paddle_only:
                print(f"     - {name} #{index} (Lv.{level})")

    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ONNX
    if buildings_onnx:
        print("\n" + "=" * 70)
        print("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ (ONNX)")
        print("=" * 70 + "\n")

        print("‚îå" + "‚îÄ" * 4 + "‚î¨" + "‚îÄ" * 30 + "‚î¨" + "‚îÄ" * 8 + "‚î¨" + "‚îÄ" * 8 + "‚î¨" + "‚îÄ" * 20 + "‚îê")
        print("‚îÇ #  ‚îÇ –ù–∞–∑–≤–∞–Ω–∏–µ                     ‚îÇ –£—Ä–æ–≤–µ–Ω—å ‚îÇ –ò–Ω–¥–µ–∫—Å ‚îÇ –ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ–π—Ç–∏'    ‚îÇ")
        print("‚îú" + "‚îÄ" * 4 + "‚îº" + "‚îÄ" * 30 + "‚îº" + "‚îÄ" * 8 + "‚îº" + "‚îÄ" * 8 + "‚îº" + "‚îÄ" * 20 + "‚î§")

        for i, building in enumerate(buildings_onnx, 1):
            name = building['name'][:28]
            level = building['level']
            index = building['index']
            button = building['button_coord']

            print(f"‚îÇ {i:<2} ‚îÇ {name:<28} ‚îÇ {level:^7} ‚îÇ {index:^6} ‚îÇ {button}     ‚îÇ")

        print("‚îî" + "‚îÄ" * 4 + "‚î¥" + "‚îÄ" * 30 + "‚î¥" + "‚îÄ" * 8 + "‚î¥" + "‚îÄ" * 8 + "‚î¥" + "‚îÄ" * 20 + "‚îò")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        building_counts = {}
        for building in buildings_onnx:
            name = building['name']
            if name not in building_counts:
                building_counts[name] = 0
            building_counts[name] += 1

        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (ONNX):")
        print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–¥–∞–Ω–∏–π: {len(building_counts)}")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–¥–∞–Ω–∏–π: {len(buildings_onnx)}")

        multiple_buildings = {name: count for name, count in building_counts.items() if count > 1}
        if multiple_buildings:
            print("\n  üì¶ –ó–¥–∞–Ω–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏:")
            for name, count in sorted(multiple_buildings.items(), key=lambda x: -x[1]):
                print(f"     - {name}: {count} —à—Ç")

    # Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("\n" + "=" * 70)
    print("üîç DEBUG –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
    print("=" * 70 + "\n")

    print("üìÅ Debug —Å–∫—Ä–∏–Ω—à–æ—Ç ONNX —Å–æ—Ö—Ä–∞–Ω–µ–Ω:")
    print("   data/screenshots/debug/ocr/emu1_navigation_*.png")
    print("\n   –ù–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ:")
    print("   üü¢ –ó–µ–ª–µ–Ω—ã–π bbox = –æ—Ç–ª–∏—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (>0.9)")
    print("   üü° –ñ–µ–ª—Ç—ã–π bbox = —Ö–æ—Ä–æ—à–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (>0.7)")
    print("   üî¥ –ö—Ä–∞—Å–Ω—ã–π bbox = –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (<0.7)")

    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if buildings_onnx:
        print("\n" + "=" * 70)
        print("üí° –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
        print("=" * 70 + "\n")

        example = buildings_onnx[0]
        print("–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–µ—Ä–≤–æ–º—É –∑–¥–∞–Ω–∏—é:")
        print(f"  –ó–¥–∞–Ω–∏–µ: {example['name']} #{example['index']}")
        print(f"  –£—Ä–æ–≤–µ–Ω—å: {example['level']}")
        print(f"  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–Ω–æ–ø–∫–∏: {example['button_coord']}")
        print(f"\n  –ö–æ–¥:")
        print(f"  tap(emulator, {example['button_coord'][0]}, {example['button_coord'][1]})")

    print("\n" + "=" * 70)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 70 + "\n")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if speedup > 1.5:
        print("üéâ ONNX Runtime –ø–æ–∫–∞–∑–∞–ª –æ—Ç–ª–∏—á–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (8-10 —ç–º—É–ª—è—Ç–æ—Ä–æ–≤)")
    elif speedup > 1:
        print("‚úÖ ONNX Runtime –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
        print("   –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ GPU")
    else:
        print("‚ö†Ô∏è  ONNX Runtime –Ω–µ –ø–æ–∫–∞–∑–∞–ª –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞")
        print("   –í–æ–∑–º–æ–∂–Ω–æ GPU –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã")


if __name__ == "__main__":
    try:
        test_onnx_ocr()
    except KeyboardInterrupt:
        print("\n\n‚è∏Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        logger.exception(e)
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("  1. ONNX –º–æ–¥–µ–ª–∏ —Å–∫–∞—á–∞–Ω—ã? (python scripts/download_onnx_models.py)")
        print("  2. onnxruntime-gpu —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω? (pip install onnxruntime-gpu)")
        print("  3. –≠–º—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω?")
        print("  4. ADB –ø–æ–¥–∫–ª—é—á–µ–Ω?")