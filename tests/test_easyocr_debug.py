"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ EasyOCR

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ GPU
- –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ (raw —Ç–µ–∫—Å—Ç)
- –ü–æ—á–µ–º—É –Ω–µ –ø–∞—Ä—Å—è—Ç—Å—è –∑–¥–∞–Ω–∏—è
"""

import time
from utils.ocr_engine_easyocr import get_ocr_engine_easyocr
from utils.image_recognition import get_screenshot
from utils.logger import logger


def test_easyocr_debug():
    print("\n" + "=" * 70)
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê EasyOCR")
    print("=" * 70 + "\n")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU:")
    try:
        import torch
        print(f"   PyTorch: v{torch.__version__}")
        print(f"   CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.is_available()}")
        if torch.cuda.is_available():
            print(f"   GPU: {torch.cuda.get_device_name(0)}")
        print()
    except ImportError:
        print("   ‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n")

    # 2. –≠–º—É–ª—è—Ç–æ—Ä –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç
    emulator = {'id': 1, 'name': 'Test', 'port': 5556}

    print("üì∏ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")
    screenshot = get_screenshot(emulator)

    if screenshot is None:
        print("‚ùå –û—à–∏–±–∫–∞!\n")
        return

    print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot.shape[1]}x{screenshot.shape[0]}\n")

    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR
    print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EasyOCR...")
    ocr = get_ocr_engine_easyocr()
    print()

    # 4. RAW —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (–±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞)
    print("=" * 70)
    print("üìù RAW –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï (—á—Ç–æ –≤–∏–¥–∏—Ç EasyOCR)")
    print("=" * 70 + "\n")

    elements = ocr.recognize_text(screenshot, min_confidence=0.5)

    if not elements:
        print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!\n")
        return

    print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(elements)}\n")

    for i, elem in enumerate(elements, 1):
        print(f"{i:2}. '{elem['text']:<30}' (conf: {elem['confidence']:.2f}, y: {elem['y']:3})")

    # 5. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    print("\n" + "=" * 70)
    print("üìã –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –°–¢–†–û–ö–ê–ú")
    print("=" * 70 + "\n")

    rows = ocr.group_by_rows(elements, y_threshold=20)

    print(f"–°—Ç—Ä–æ–∫: {len(rows)}\n")

    for i, row in enumerate(rows, 1):
        full_text = ' '.join([elem['text'] for elem in row])
        y_coord = int(sum([elem['y'] for elem in row]) / len(row))
        print(f"{i:2}. (y={y_coord:3}) '{full_text}'")

    # 6. –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω–µ–π
    print("\n" + "=" * 70)
    print("üîç –ü–ê–†–°–ò–ù–ì –£–†–û–í–ù–ï–ô (—Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏)")
    print("=" * 70 + "\n")

    for i, row in enumerate(rows, 1):
        full_text = ' '.join([elem['text'] for elem in row])
        level = ocr.parse_level(full_text)
        building_name = ocr.parse_building_name(full_text)

        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        if level is not None:
            print(f"‚úÖ –°—Ç—Ä–æ–∫–∞ {i}: '{building_name}' Lv.{level}")
            print(f"   Raw: '{full_text}'")
        elif len(building_name) >= 3:
            print(f"‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ {i}: '{building_name}' (—É—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            print(f"   Raw: '{full_text}'")
        else:
            print(f"‚ùå –°—Ç—Ä–æ–∫–∞ {i}: level={level}, name='{building_name}' (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ)")


if __name__ == "__main__":
    try:
        test_easyocr_debug()
    except KeyboardInterrupt:
        print("\n‚è∏Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.exception(e)