"""
–¢–µ—Å—Ç OCR –Ω–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (PaddleX 3.2.x)

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é OCR —Å GPU
- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å —ç–º—É–ª—è—Ç–æ—Ä–∞
- –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–±–µ–Ω—á–º–∞—Ä–∫)
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ debug —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å bbox

–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å:
1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä LDPlayer (–ª—é–±–æ–π –ø–æ—Ä—Ç)
2. –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É Beast Lord
3. –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ‚Üí –≤–∫–ª–∞–¥–∫–∞ "–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π"
4. –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ª—é–±–æ–π —Ä–∞–∑–¥–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ë–∏—Ç–≤–∞")
5. python tests/test_ocr_navigation.py
"""

import sys
import time
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent.parent))

from loguru import logger
from utils.ocr_engine import OCREngine

try:
    from utils.image_recognition import get_screenshot
    from utils.adb_controller import execute_command
    ADB_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è ADB —É—Ç–∏–ª–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    ADB_AVAILABLE = False


def get_first_connected_emulator():
    """–ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π —ç–º—É–ª—è—Ç–æ—Ä"""
    result = execute_command("adb devices")
    lines = result.strip().split('\n')

    for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if 'device' in line:
            parts = line.split()
            if len(parts) >= 2:
                device = parts[0]
                # –ò–∑–≤–ª–µ—á—å –ø–æ—Ä—Ç
                if 'emulator-' in device:
                    port = int(device.split('-')[1])
                elif ':' in device:
                    port = int(device.split(':')[1])
                else:
                    continue

                return {
                    'id': 0,
                    'name': f'Test_Emu_{port}',
                    'port': port
                }
    return None


def test_with_emulator():
    """–¢–µ—Å—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —ç–º—É–ª—è—Ç–æ—Ä–µ"""
    logger.info("=" * 60)
    logger.info("üß™ –¢–ï–°–¢ OCR –ù–ê –≠–ú–£–õ–Ø–¢–û–†–ï")
    logger.info("=" * 60)

    # –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —ç–º—É–ª—è—Ç–æ—Ä
    emulator = get_first_connected_emulator()
    if not emulator:
        logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤!")
        logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∏–≥—Ä–µ")
        return False

    logger.info(f"üì± –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç–º—É–ª—è—Ç–æ—Ä: {emulator['name']} (–ø–æ—Ä—Ç {emulator['port']})")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR
    logger.info("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR...")
    ocr = OCREngine(lang='ru', force_cpu=False)
    ocr.set_debug_mode(True)  # –í–∫–ª—é—á–∏—Ç—å debug —Ä–µ–∂–∏–º

    # –ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
    logger.info("\nüì∏ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")
    logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω: {emulator['name']} (540x960)")

    screenshot = get_screenshot(emulator)

    if screenshot is None:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
        return False

    logger.success(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω: {screenshot.shape}")

    # –ë–µ–Ω—á–º–∞—Ä–∫: 3 –ø—Ä–æ–≥–æ–Ω–∞
    logger.info("\n‚ö° –ë–ï–ù–ß–ú–ê–†–ö (3 –ø—Ä–æ–≥–æ–Ω–∞):")
    times = []
    all_buildings = []

    for i in range(3):
        start_time = time.time()
        buildings = ocr.parse_navigation_panel(screenshot, emulator_id=1)
        elapsed = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        times.append(elapsed)

        if i == 0:
            all_buildings = buildings  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞

        logger.info(f"   –ü—Ä–æ–≥–æ–Ω {i+1}: {elapsed:.0f} –º—Å")

    avg_time = sum(times) / len(times)
    logger.info(f"\n   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.0f} –º—Å")

    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if avg_time < 200:
        logger.success("   üèÜ –û–¢–õ–ò–ß–ù–û! GPU —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ–ª–Ω—É—é!")
    elif avg_time < 500:
        logger.info("   ‚ö° –•–û–†–û–®–û! GPU —É—Å–∫–æ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É")
    elif avg_time < 1000:
        logger.warning("   ‚ö†Ô∏è –°–†–ï–î–ù–ï. –í–æ–∑–º–æ–∂–Ω–æ GPU –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
    else:
        logger.error("   ‚ùå –ú–ï–î–õ–ï–ù–ù–û! GPU —Ç–æ—á–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    logger.info("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø:")
    logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –∑–¥–∞–Ω–∏–π: {len(all_buildings)}")

    if all_buildings:
        logger.info("\n   –°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π:")
        for i, building in enumerate(all_buildings, 1):
            logger.info(
                f"   {i}. {building['name']:30} "
                f"Lv.{building['level']:2} "
                f"(Y: {building['y_coord']:3})"
            )

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        save_results_to_file(all_buildings)
    else:
        logger.warning("   ‚ö†Ô∏è –ó–¥–∞–Ω–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã!")
        logger.info("   üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        logger.info("      - –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        logger.info("      - –í—ã–±—Ä–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ '–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π'")
        logger.info("      - –û–¥–∏–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç")

    return True


def test_with_sample_image():
    """–¢–µ—Å—Ç –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (–µ—Å–ª–∏ –Ω–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞)"""
    logger.info("=" * 60)
    logger.info("üß™ –¢–ï–°–¢ OCR –ù–ê –¢–ï–°–¢–û–í–û–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ò")
    logger.info("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    sample_path = Path("data/screenshots/debug/navigation_sample.png")

    if not sample_path.exists():
        logger.error(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {sample_path}")
        logger.info("üí° –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ —ç—Ç–æ–º—É –ø—É—Ç–∏")
        return False

    import cv2
    screenshot = cv2.imread(str(sample_path))

    if screenshot is None:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return False

    logger.success(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {screenshot.shape}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR
    logger.info("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR...")
    ocr = OCREngine(lang='ru', force_cpu=False)
    ocr.set_debug_mode(True)

    # –ü–∞—Ä—Å–∏–Ω–≥
    logger.info("\nüìä –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
    start_time = time.time()
    buildings = ocr.parse_navigation_panel(screenshot, emulator_id=99)
    elapsed = (time.time() - start_time) * 1000

    logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {elapsed:.0f} –º—Å")
    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–¥–∞–Ω–∏–π: {len(buildings)}")

    if buildings:
        logger.info("\n   –°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π:")
        for i, building in enumerate(buildings, 1):
            logger.info(
                f"   {i}. {building['name']:30} "
                f"Lv.{building['level']:2} "
                f"(Y: {building['y_coord']:3})"
            )

        save_results_to_file(buildings)
    else:
        logger.warning("   ‚ö†Ô∏è –ó–¥–∞–Ω–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã!")
        logger.info("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞ –Ω—ë–º –≤–∏–¥–Ω–∞ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

    return True


def save_results_to_file(buildings: list):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    results_dir = Path("data/screenshots/debug/ocr")
    results_dir.mkdir(parents=True, exist_ok=True)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = results_dir / f"results_{timestamp}.txt"

    with open(filename, 'w', encoding='utf-8') as f:
        f.write("=" * 60 + "\n")
        f.write("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –ü–ê–ù–ï–õ–ò –ù–ê–í–ò–ì–ê–¶–ò–ò\n")
        f.write("=" * 60 + "\n")
        f.write(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"–ù–∞–π–¥–µ–Ω–æ –∑–¥–∞–Ω–∏–π: {len(buildings)}\n\n")

        for i, building in enumerate(buildings, 1):
            f.write(f"{i}. {building['name']} - Lv.{building['level']}\n")
            f.write(f"   Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞: {building['y_coord']}\n")
            f.write(f"   –ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ–π—Ç–∏': {building['button_coord']}\n\n")

    logger.success(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    logger.remove()  # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π handler
    logger.add(
        sys.stderr,
        format="<green>{time:HH:mm:ss}</green> | <level>{message}</level>",
        level="DEBUG"
    )

    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∞
    if ADB_AVAILABLE:
        success = test_with_emulator()
    else:
        success = test_with_sample_image()

    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "=" * 60)
    if success:
        logger.success("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û!")
        logger.info("\nüí° Debug —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: data/screenshots/debug/ocr/")
        logger.info("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å bbox –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
    else:
        logger.error("‚ùå –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù –° –û–®–ò–ë–ö–ê–ú–ò")

    logger.info("=" * 60)


if __name__ == "__main__":
    main()