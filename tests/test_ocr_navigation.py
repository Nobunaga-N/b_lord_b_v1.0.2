"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OCREngine –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —ç–º—É–ª—è—Ç–æ—Ä–µ

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –≠–º—É–ª—è—Ç–æ—Ä —Å –ø–æ—Ä—Ç–æ–º 5556 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω
- –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –∏–≥—Ä–µ
- –í–∫–ª–∞–¥–∫–∞ "–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞
"""

from utils.ocr_engine import get_ocr_engine
from utils.image_recognition import get_screenshot
from utils.logger import logger


def test_ocr_on_emulator():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç OCR –Ω–∞ —ç–º—É–ª—è—Ç–æ—Ä–µ —Å –ø–æ—Ä—Ç–æ–º 5556

    –®–∞–≥–∏:
    1. –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞
    2. –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç
    3. –í–∫–ª—é—á–∞–µ—Ç debug —Ä–µ–∂–∏–º OCR
    4. –ü–∞—Ä—Å–∏—Ç –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    5. –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """

    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢ OCREngine - –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    print("="*70 + "\n")

    # ===== –®–ê–ì 1: –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞ =====
    emulator = {
        'id': 1,  # ID –¥–ª—è debug —Ñ–∞–π–ª–æ–≤
        'name': 'LDPlayer-Test',
        'port': 5556
    }

    logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–º—É–ª—è—Ç–æ—Ä: {emulator['name']} (port: {emulator['port']})")

    # ===== –®–ê–ì 2: –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç =====
    print("\nüì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")
    screenshot = get_screenshot(emulator)

    if screenshot is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç!")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("  1. –≠–º—É–ª—è—Ç–æ—Ä —Å –ø–æ—Ä—Ç–æ–º 5556 –∑–∞–ø—É—â–µ–Ω?")
        print("  2. ADB –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç–º—É–ª—è—Ç–æ—Ä—É?")
        print("  3. –ö–æ–º–∞–Ω–¥–∞ 'adb devices' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä?")
        return

    print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω: {screenshot.shape[1]}x{screenshot.shape[0]}")

    # ===== –®–ê–ì 3: –ü–æ–ª—É—á–∏—Ç—å OCR –∏ –≤–∫–ª—é—á–∏—Ç—å debug =====
    print("\nüîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR...")
    ocr = get_ocr_engine()
    ocr.set_debug_mode(True)
    print("‚úÖ OCR –≥–æ—Ç–æ–≤ (debug —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω)")

    # ===== –®–ê–ì 4: –ü–∞—Ä—Å–∏—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ =====
    print("\nüèóÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
    buildings = ocr.parse_navigation_panel(
        screenshot=screenshot,
        emulator_id=emulator['id']
    )

    # ===== –®–ê–ì 5: –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ =====
    print("\n" + "="*70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("="*70 + "\n")

    if not buildings:
        print("‚ö†Ô∏è OCR –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∑–¥–∞–Ω–∏—è!")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("  1. –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –∏–≥—Ä–µ")
        print("  2. –í–∫–ª–∞–¥–∫–∞ '–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π' –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        print("  3. –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Å–≤–µ—Ä–Ω—É—Ç—ã (–Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö –∑–¥–∞–Ω–∏–π)")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ debug —Å–∫—Ä–∏–Ω—à–æ—Ç:")
        print("  data/screenshots/debug/ocr/emu1_navigation_*.png")
        return

    print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∑–¥–∞–Ω–∏–π: {len(buildings)}\n")

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("‚îå" + "‚îÄ"*4 + "‚î¨" + "‚îÄ"*30 + "‚î¨" + "‚îÄ"*8 + "‚î¨" + "‚îÄ"*8 + "‚î¨" + "‚îÄ"*20 + "‚îê")
    print("‚îÇ #  ‚îÇ –ù–∞–∑–≤–∞–Ω–∏–µ                     ‚îÇ –£—Ä–æ–≤–µ–Ω—å ‚îÇ –ò–Ω–¥–µ–∫—Å ‚îÇ –ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ–π—Ç–∏'    ‚îÇ")
    print("‚îú" + "‚îÄ"*4 + "‚îº" + "‚îÄ"*30 + "‚îº" + "‚îÄ"*8 + "‚îº" + "‚îÄ"*8 + "‚îº" + "‚îÄ"*20 + "‚î§")

    for i, building in enumerate(buildings, 1):
        name = building['name'][:28]  # –û–±—Ä–µ–∑–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        level = building['level']
        index = building['index']
        button = building['button_coord']

        print(f"‚îÇ {i:<2} ‚îÇ {name:<28} ‚îÇ {level:^7} ‚îÇ {index:^6} ‚îÇ {button}     ‚îÇ")

    print("‚îî" + "‚îÄ"*4 + "‚î¥" + "‚îÄ"*30 + "‚î¥" + "‚îÄ"*8 + "‚î¥" + "‚îÄ"*8 + "‚î¥" + "‚îÄ"*20 + "‚îò")

    # ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–¥–∞–Ω–∏—è–º =====
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")

    # –ü–æ–¥—Å—á–µ—Ç –∑–¥–∞–Ω–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
    building_counts = {}
    for building in buildings:
        name = building['name']
        if name not in building_counts:
            building_counts[name] = 0
        building_counts[name] += 1

    print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–¥–∞–Ω–∏–π: {len(building_counts)}")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–¥–∞–Ω–∏–π: {len(buildings)}")

    # –ó–¥–∞–Ω–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏
    multiple_buildings = {name: count for name, count in building_counts.items() if count > 1}
    if multiple_buildings:
        print("\n  üì¶ –ó–¥–∞–Ω–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏:")
        for name, count in sorted(multiple_buildings.items(), key=lambda x: -x[1]):
            print(f"     - {name}: {count} —à—Ç")

    # ===== Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è =====
    print("\n" + "="*70)
    print("üîç DEBUG –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
    print("="*70 + "\n")

    print("üìÅ Debug —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:")
    print("   data/screenshots/debug/ocr/emu1_navigation_*.png")
    print("\n   –ù–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ:")
    print("   üü¢ –ó–µ–ª–µ–Ω—ã–π bbox = –æ—Ç–ª–∏—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (>0.9)")
    print("   üü° –ñ–µ–ª—Ç—ã–π bbox = —Ö–æ—Ä–æ—à–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (>0.7)")
    print("   üî¥ –ö—Ä–∞—Å–Ω—ã–π bbox = –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (<0.7)")

    # ===== –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ =====
    print("\n" + "="*70)
    print("üí° –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
    print("="*70 + "\n")

    if buildings:
        example = buildings[0]
        print("–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–µ—Ä–≤–æ–º—É –∑–¥–∞–Ω–∏—é:")
        print(f"  –ó–¥–∞–Ω–∏–µ: {example['name']} #{example['index']}")
        print(f"  –£—Ä–æ–≤–µ–Ω—å: {example['level']}")
        print(f"  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–Ω–æ–ø–∫–∏: {example['button_coord']}")
        print(f"\n  –ö–æ–¥:")
        print(f"  tap(emulator, {example['button_coord'][0]}, {example['button_coord'][1]})")

    print("\n" + "="*70)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("="*70 + "\n")


if __name__ == "__main__":
    try:
        test_ocr_on_emulator()
    except KeyboardInterrupt:
        print("\n\n‚è∏Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        logger.exception(e)
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("  1. PaddleOCR —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω? (pip install paddleocr)")
        print("  2. –≠–º—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω?")
        print("  3. ADB –ø–æ–¥–∫–ª—é—á–µ–Ω?")