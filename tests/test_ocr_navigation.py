"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OCREngine —Å GPU –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —ç–º—É–ª—è—Ç–æ—Ä–µ

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –≠–º—É–ª—è—Ç–æ—Ä —Å –ø–æ—Ä—Ç–æ–º 5556 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω
- –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –∏–≥—Ä–µ
- –í–∫–ª–∞–¥–∫–∞ "–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞
"""

import time
from utils.ocr_engine import get_ocr_engine
from utils.image_recognition import get_screenshot
from utils.logger import logger


def print_separator(char="=", length=70):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
    print("\n" + char * length)


def test_ocr_on_emulator():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç OCR –Ω–∞ —ç–º—É–ª—è—Ç–æ—Ä–µ —Å GPU

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é OCR —Å GPU
    2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    3. –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    4. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    5. –¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    """

    print_separator()
    print("üß™ –¢–ï–°–¢ OCREngine - GPU –≤–µ—Ä—Å–∏—è")
    print_separator()

    # ===== –®–ê–ì 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ =====
    print("\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï")
    print_separator("-")

    # –≠–º—É–ª—è—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
    emulator = {
        'id': 1,
        'name': 'LDPlayer-Test',
        'port': 5556
    }

    logger.info(f"–≠–º—É–ª—è—Ç–æ—Ä: {emulator['name']} (port: {emulator['port']})")

    # ===== –®–ê–ì 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR =====
    print("\nüîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø OCR")
    print_separator("-")

    print("–°–æ–∑–¥–∞–Ω–∏–µ OCR Engine...")
    ocr = get_ocr_engine()

    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    device_info = ocr.get_device_info()

    print(f"\n‚úÖ OCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_info['device']}")

    if device_info['use_gpu']:
        print(f"   üéÆ GPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω!")
        print(f"   GPU Count: {device_info.get('gpu_count', 'N/A')}")
        print(f"   GPU Name: {device_info.get('gpu_name', 'N/A')}")
        print(f"   CUDA Version: {device_info.get('cuda_version', 'N/A')}")
        print(f"   cuDNN Version: {device_info.get('cudnn_version', 'N/A')}")
    else:
        print(f"   üíª –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")

    # –í–∫–ª—é—á–∏—Ç—å debug —Ä–µ–∂–∏–º
    ocr.set_debug_mode(True)
    print("   Debug —Ä–µ–∂–∏–º: –í–ö–õ")

    # ===== –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ =====
    print("\nüì∏ –ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–†–ò–ù–®–û–¢–ê")
    print_separator("-")

    print("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞...")
    screenshot = get_screenshot(emulator)

    if screenshot is None:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç!")
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("  1. –≠–º—É–ª—è—Ç–æ—Ä —Å –ø–æ—Ä—Ç–æ–º 5556 –∑–∞–ø—É—â–µ–Ω?")
        print("  2. ADB –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç–º—É–ª—è—Ç–æ—Ä—É?")
        print("  3. –ö–æ–º–∞–Ω–¥–∞ 'adb devices' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä?")
        return False

    print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω: {screenshot.shape[1]}x{screenshot.shape[0]} px")

    # ===== –®–ê–ì 4: –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ =====
    print("\n‚ö° –ë–ï–ù–ß–ú–ê–†–ö –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print_separator("-")

    # –ü—Ä–æ–≥—Ä–µ–≤ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
    print("–ü—Ä–æ–≥—Ä–µ–≤ GPU...")
    _ = ocr.parse_navigation_panel(screenshot, emulator['id'])
    print("‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω")

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç (3 –ø—Ä–æ–≥–æ–Ω–∞)
    times = []
    num_runs = 3

    print(f"\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {num_runs} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–≥–æ–Ω–æ–≤...")

    for i in range(num_runs):
        start_time = time.time()
        buildings = ocr.parse_navigation_panel(screenshot, emulator['id'])
        elapsed = time.time() - start_time
        times.append(elapsed)
        print(f"  –ü—Ä–æ–≥–æ–Ω {i+1}: {elapsed*1000:.2f} –º—Å ({len(buildings)} –∑–¥–∞–Ω–∏–π)")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    avg_time = sum(times) / len(times)
    min_time = min(times)
    max_time = max(times)

    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time*1000:.2f} –º—Å")
    print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ:   {min_time*1000:.2f} –º—Å")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ:  {max_time*1000:.2f} –º—Å")

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å CPU baseline
    cpu_baseline = 2500  # ~2.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ CPU
    speedup = cpu_baseline / (avg_time * 1000)

    if device_info['use_gpu']:
        print(f"\nüöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ vs CPU: {speedup:.1f}x")
        if speedup >= 4.0:
            print("   üèÜ –û–¢–õ–ò–ß–ù–û! GPU —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ–ª–Ω—É—é!")
        elif speedup >= 2.0:
            print("   ‚úÖ –•–û–†–û–®–û! GPU —É—Å–∫–æ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É")
        else:
            print("   ‚ö†Ô∏è  GPU –º–µ–¥–ª–µ–Ω–Ω–µ–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    # ===== –®–ê–ì 5: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è =====
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø")
    print_separator("-")

    if not buildings:
        print("‚ö†Ô∏è  OCR –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∑–¥–∞–Ω–∏—è!")
        print("\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("  1. –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –∏–≥—Ä–µ")
        print("  2. –í–∫–ª–∞–¥–∫–∞ '–°–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π' –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        print("  3. –Ø–∑—ã–∫ –∏–≥—Ä—ã –Ω–µ —Ä—É—Å—Å–∫–∏–π")
        print("  4. –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ 540x960")
        return False

    print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∑–¥–∞–Ω–∏–π: {len(buildings)}")
    print(f"\n{'‚Ññ':<4} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<25} {'–£—Ä–æ–≤–µ–Ω—å':<8} {'–ò–Ω–¥–µ–∫—Å':<7} {'Y-coord':<8}")
    print("-" * 70)

    for i, building in enumerate(buildings[:15], 1):  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 15
        name = building['name'][:24]  # –û–±—Ä–µ–∑–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        level = building['level']
        index = building['index']
        y_coord = building['y_coord']

        print(f"{i:<4} {name:<25} Lv.{level:<5} #{index:<6} {y_coord:<8}")

    if len(buildings) > 15:
        print(f"... –∏ –µ—â—ë {len(buildings) - 15} –∑–¥–∞–Ω–∏–π")

    # ===== –®–ê–ì 6: –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è =====
    print("\nüí° –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
    print_separator("-")

    if buildings:
        example = buildings[0]
        print(f"–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–¥–∞–Ω–∏—é '{example['name']}':")
        print(f"  –£—Ä–æ–≤–µ–Ω—å: {example['level']}")
        print(f"  –ò–Ω–¥–µ–∫—Å: #{example['index']}")
        print(f"  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–Ω–æ–ø–∫–∏: {example['button_coord']}")
        print(f"\n  Python –∫–æ–¥:")
        print(f"  tap(emulator, {example['button_coord'][0]}, {example['button_coord'][1]})")

    # ===== –®–ê–ì 7: Debug —Ñ–∞–π–ª—ã =====
    print("\nüìÅ DEBUG –§–ê–ô–õ–´")
    print_separator("-")
    print("Debug —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:")
    print("  data/screenshots/debug/ocr/")
    print("\nüé® –¶–≤–µ—Ç–æ–≤–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ bbox:")
    print("   üü¢ –ó–µ–ª—ë–Ω—ã–π  = –æ—Ç–ª–∏—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (>0.9)")
    print("   üü° –ñ—ë–ª—Ç—ã–π   = —Ö–æ—Ä–æ—à–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (>0.7)")
    print("   üî¥ –ö—Ä–∞—Å–Ω—ã–π  = –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (<0.7)")

    # ===== –§–ò–ù–ê–õ =====
    print_separator()
    print("‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–Å–ù")
    print_separator()

    return True


def test_cpu_vs_gpu_comparison():
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å CPU –∏ GPU

    –¢—Ä–µ–±—É–µ—Ç 2 –ø—Ä–æ–≥–æ–Ω–∞ —Ç–µ—Å—Ç–∞:
    1. –° GPU (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    2. –° CPU (force_cpu=True)
    """
    print_separator("=")
    print("‚öîÔ∏è  CPU vs GPU –°–†–ê–í–ù–ï–ù–ò–ï")
    print_separator("=")

    emulator = {
        'id': 1,
        'name': 'LDPlayer-Test',
        'port': 5556
    }

    # –ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
    screenshot = get_screenshot(emulator)
    if screenshot is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
        return

    results = {}

    # –¢–µ—Å—Ç 1: GPU
    print("\nüéÆ –¢–µ—Å—Ç 1: GPU —Ä–µ–∂–∏–º")
    print("-" * 70)
    ocr_gpu = get_ocr_engine(force_cpu=False)

    times_gpu = []
    for i in range(3):
        start = time.time()
        _ = ocr_gpu.parse_navigation_panel(screenshot, emulator['id'])
        elapsed = time.time() - start
        times_gpu.append(elapsed)

    results['gpu'] = sum(times_gpu) / len(times_gpu)
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (GPU): {results['gpu']*1000:.2f} –º—Å")

    # –¢–µ—Å—Ç 2: CPU
    print("\nüíª –¢–µ—Å—Ç 2: CPU —Ä–µ–∂–∏–º")
    print("-" * 70)

    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å OCR –¥–ª—è CPU (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º singleton)
    from utils.ocr_engine import OCREngine
    ocr_cpu = OCREngine(force_cpu=True)

    times_cpu = []
    for i in range(3):
        start = time.time()
        _ = ocr_cpu.parse_navigation_panel(screenshot, emulator['id'])
        elapsed = time.time() - start
        times_cpu.append(elapsed)

    results['cpu'] = sum(times_cpu) / len(times_cpu)
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (CPU): {results['cpu']*1000:.2f} –º—Å")

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print("\nüìä –ò–¢–û–ì–û–í–û–ï –°–†–ê–í–ù–ï–ù–ò–ï")
    print_separator("-")
    speedup = results['cpu'] / results['gpu']
    print(f"GPU:     {results['gpu']*1000:.2f} –º—Å")
    print(f"CPU:     {results['cpu']*1000:.2f} –º—Å")
    print(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.2f}x")

    if speedup >= 4.0:
        print("\nüèÜ GPU –¥–∞—ë—Ç –æ—Ç–ª–∏—á–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ!")
    elif speedup >= 2.0:
        print("\n‚úÖ GPU –¥–∞—ë—Ç —Ö–æ—Ä–æ—à–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
    elif speedup >= 1.2:
        print("\n‚ö†Ô∏è  GPU –¥–∞—ë—Ç –Ω–µ–±–æ–ª—å—à–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
    else:
        print("\n‚ùå GPU –Ω–µ –¥–∞—ë—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è (–ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π)")

    print_separator("=")


if __name__ == "__main__":
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        success = test_ocr_on_emulator()

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ CPU vs GPU
        # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        # if success:
        #     test_cpu_vs_gpu_comparison()

    except KeyboardInterrupt:
        print("\n\n‚è∏Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        logger.exception(e)
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("  1. PaddlePaddle GPU —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω?")
        print("  2. CUDA Toolkit 12 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω?")
        print("  3. cuDNN —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–∞–ø–∫—É CUDA?")
        print("  4. –≠–º—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ADB?")