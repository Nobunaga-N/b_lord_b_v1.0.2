"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ PaddleX 3.2.x API

–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
"""

import numpy as np
import cv2
from paddlex import create_pipeline

# –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
def create_test_image():
    """–°–æ–∑–¥–∞—Ç—å –±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —á—ë—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
    img = np.ones((200, 600, 3), dtype=np.uint8) * 255

    # –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
    cv2.putText(img, "Logovo Travoyazhnyh Lv.10", (50, 50),
                cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 0), 2)
    cv2.putText(img, "Logovo Plotoyadnyh Lv.9", (50, 100),
                cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 0), 2)
    cv2.putText(img, "Logovo Vseyadnyh Lv.5", (50, 150),
                cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 0), 2)

    return img

def main():
    print("=" * 60)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PADDLEX 3.2.x API")
    print("=" * 60)

    # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    test_img = create_test_image()
    print(f"   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {test_img.shape}")

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    cv2.imwrite("test_image.png", test_img)
    print("   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: test_image.png")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR
    print("\n2Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR pipeline...")
    pipeline = create_pipeline(pipeline="OCR", device="gpu:0")
    print("   ‚úÖ Pipeline —Å–æ–∑–¥–∞–Ω")

    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    print("\n3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
    result = pipeline.predict(test_img)

    # –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    print("\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
    print(f"   üîç Type: {type(result)}")
    print(f"   üîç Is generator: {hasattr(result, '__iter__') and not isinstance(result, (list, dict, str))}")

    # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ø–∏—Å–æ–∫
    if hasattr(result, '__iter__') and not isinstance(result, (list, dict, str)):
        print("   üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫...")
        result = list(result)
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(result)}")

    # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if isinstance(result, list):
        print(f"\n5Ô∏è‚É£ –°–¢–†–£–ö–¢–£–†–ê –°–ü–ò–°–ö–ê:")
        print(f"   üì¶ –î–ª–∏–Ω–∞: {len(result)}")

        if len(result) > 0:
            first_item = result[0]
            print(f"\n6Ô∏è‚É£ –ü–ï–†–í–´–ô –≠–õ–ï–ú–ï–ù–¢:")
            print(f"   üîç Type: {type(first_item)}")
            print(f"   üîç Module: {type(first_item).__module__}")
            print(f"   üîç Class: {type(first_item).__name__}")

            # –í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            print(f"\n7Ô∏è‚É£ –ê–¢–†–ò–ë–£–¢–´ (–ø—É–±–ª–∏—á–Ω—ã–µ):")
            public_attrs = [attr for attr in dir(first_item) if not attr.startswith('_')]
            for attr in public_attrs[:10]:  # –ü–µ—Ä–≤—ã–µ 10
                print(f"   - {attr}")

            # –ï—Å–ª–∏ —ç—Ç–æ dict-like –æ–±—ä–µ–∫—Ç, –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–∏
            print(f"\n8Ô∏è‚É£ DICT KEYS (–µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å):")
            if hasattr(first_item, 'keys'):
                try:
                    keys = list(first_item.keys())
                    print(f"   ‚úÖ –≠—Ç–æ dict-like –æ–±—ä–µ–∫—Ç!")
                    print(f"   üì¶ –ö–ª—é—á–∏: {keys}")

                    # –ü–æ–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π
                    print(f"\n   üìä –ó–ù–ê–ß–ï–ù–ò–Ø –ö–õ–Æ–ß–ï–ô:")
                    for key in keys:
                        value = first_item[key]
                        print(f"   {key:20} : type={type(value).__name__}")

                        if hasattr(value, '__len__') and not isinstance(value, str):
                            print(f"   {' '*20}   len={len(value)}")

                            if len(value) > 0 and len(value) < 10:
                                print(f"   {' '*20}   data={value}")
                            elif len(value) > 0:
                                print(f"   {' '*20}   first={value[0]}")
                        elif isinstance(value, str):
                            print(f"   {' '*20}   value='{value[:50]}'")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–ª—é—á–µ–π: {e}")
            else:
                print(f"   ‚ùå –ù–µ dict-like –æ–±—ä–µ–∫—Ç")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            print(f"\n9Ô∏è‚É£ –ö–õ–Æ–ß–ï–í–´–ï –ê–¢–†–ò–ë–£–¢–´:")
            for attr in ['dt_polys', 'rec_text', 'rec_score', 'boxes', 'texts', 'scores']:
                has_attr = hasattr(first_item, attr)
                print(f"   {attr:15} : {has_attr}")

                if has_attr:
                    value = getattr(first_item, attr)
                    print(f"      ‚îî‚îÄ type: {type(value)}")

                    if hasattr(value, '__len__'):
                        print(f"      ‚îî‚îÄ len: {len(value)}")

                        if len(value) > 0:
                            print(f"      ‚îî‚îÄ first: {value[0]}")

            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å to_dict()
            print(f"\nüîü –ú–ï–¢–û–î–´ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø:")
            if hasattr(first_item, 'to_dict'):
                try:
                    data_dict = first_item.to_dict()
                    print(f"   ‚úÖ to_dict() —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    print(f"      Keys: {list(data_dict.keys())}")
                except Exception as e:
                    print(f"   ‚ùå to_dict() failed: {e}")
            else:
                print(f"   ‚ùå to_dict() –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å json()
            if hasattr(first_item, 'json'):
                try:
                    import json
                    json_str = first_item.json()
                    data_dict = json.loads(json_str)
                    print(f"   ‚úÖ json() —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    print(f"      Keys: {list(data_dict.keys())}")

                    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤)
                    print(f"\n1Ô∏è‚É£1Ô∏è‚É£ JSON –°–û–î–ï–†–ñ–ò–ú–û–ï (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):")
                    print(f"   {json_str[:1000]}")
                except Exception as e:
                    print(f"   ‚ùå json() failed: {e}")
            else:
                print(f"   ‚ùå json() –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å __dict__
            if hasattr(first_item, '__dict__'):
                print(f"\n   üì¶ __dict__ keys: {list(first_item.__dict__.keys())}")

    print("\n" + "=" * 60)
    print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)

if __name__ == "__main__":
    main()