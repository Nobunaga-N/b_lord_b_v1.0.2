"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–æ–≥–æ, —á—Ç–æ ONNX —Ä–µ–∞–ª—å–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç
"""

from utils.ocr_engine_onnx import get_ocr_engine_onnx
from utils.image_recognition import get_screenshot
from utils.logger import logger


def test_onnx_raw():
    print("\n" + "=" * 70)
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –í–´–í–û–î ONNX OCR")
    print("=" * 70 + "\n")

    # –≠–º—É–ª—è—Ç–æ—Ä
    emulator = {'id': 1, 'name': 'Test', 'port': 5556}

    # –°–∫—Ä–∏–Ω—à–æ—Ç
    print("üì∏ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")
    screenshot = get_screenshot(emulator)

    if screenshot is None:
        print("‚ùå –û—à–∏–±–∫–∞!\n")
        return

    print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot.shape[1]}x{screenshot.shape[0]}\n")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR
    print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ONNX OCR...")
    ocr = get_ocr_engine_onnx()
    ocr.set_debug_mode(True)
    print()

    # ===== 1. RAW —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (–±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞) =====
    print("=" * 70)
    print("üìù RAW –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï (—á—Ç–æ –≤–∏–¥–∏—Ç ONNX)")
    print("=" * 70 + "\n")

    elements = ocr.recognize_text(screenshot, min_confidence=0.5)

    if not elements:
        print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!\n")
        return

    print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(elements)}\n")

    for i, elem in enumerate(elements, 1):
        print(f"{i:2}. '{elem['text']:<30}' (conf: {elem['confidence']:.2f}, y: {elem['y']:3})")

    # ===== 2. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º =====
    print("\n" + "=" * 70)
    print("üìã –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –°–¢–†–û–ö–ê–ú")
    print("=" * 70 + "\n")

    rows = ocr.group_by_rows(elements, y_threshold=20)

    print(f"–°—Ç—Ä–æ–∫: {len(rows)}\n")

    for i, row in enumerate(rows, 1):
        full_text = ' '.join([elem['text'] for elem in row])
        y_coord = int(sum([elem['y'] for elem in row]) / len(row))
        print(f"{i:2}. (y={y_coord:3}) '{full_text}'")

    # ===== 3. –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω–µ–π =====
    print("\n" + "=" * 70)
    print("üîç –ü–ê–†–°–ò–ù–ì –£–†–û–í–ù–ï–ô")
    print("=" * 70 + "\n")

    for i, row in enumerate(rows, 1):
        full_text = ' '.join([elem['text'] for elem in row])

        level = ocr.parse_level(full_text)
        building_name = ocr.parse_building_name(full_text)

        print(f"–°—Ç—Ä–æ–∫–∞ {i}:")
        print(f"  Raw:  '{full_text}'")
        print(f"  Name: '{building_name}'")
        print(f"  Level: {level}")

        if level is not None and len(building_name) >= 3:
            print(f"  ‚úÖ –†–ê–°–ü–û–ó–ù–ê–ù–û!")
        else:
            print(f"  ‚ùå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ (level={level}, len(name)={len(building_name)})")
        print()

    # ===== 4. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç parse_navigation_panel =====
    print("=" * 70)
    print("üèóÔ∏è –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ (parse_navigation_panel)")
    print("=" * 70 + "\n")

    buildings = ocr.parse_navigation_panel(screenshot, emulator['id'])

    if buildings:
        print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∑–¥–∞–Ω–∏–π: {len(buildings)}\n")
        for b in buildings:
            print(f"  ‚Ä¢ {b['name']} Lv.{b['level']} (#{b['index']})")
    else:
        print("‚ùå –ó–¥–∞–Ω–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã!\n")

    print("\n" + "=" * 70)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù")
    print("=" * 70 + "\n")

    # –ü–æ–¥—Å–∫–∞–∑–∫–∞
    print("üìÅ –ü—Ä–æ–≤–µ—Ä—å debug —Å–∫—Ä–∏–Ω—à–æ—Ç:")
    print("   data/screenshots/debug/ocr/emu1_navigation_*.png")
    print("   –¢–∞–º –≤–∏–¥–Ω–æ —á—Ç–æ OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª (bbox —Å —Ç–µ–∫—Å—Ç–æ–º)\n")


if __name__ == "__main__":
    try:
        test_onnx_raw()
    except KeyboardInterrupt:
        print("\n‚è∏Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.exception(e)