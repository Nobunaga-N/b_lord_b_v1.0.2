"""
–¢–µ—Å—Ç –º–æ–¥—É–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤—ã—Ö –∑–¥–∞–Ω–∏–π
–ó–∞–ø—É—Å–∫: python tests/test_building_construction.py

–í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É–±–µ–¥–∏—Å—å —á—Ç–æ:
1. –≠–º—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω
2. –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
3. –ù–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ (–∫–∞—Ä—Ç–∞ –º–∏—Ä–∞)
"""

import sys
import time
from utils.logger import logger
from functions.building.building_construction import BuildingConstruction
from functions.building.navigation_panel import NavigationPanel
from functions.building.building_database import BuildingDatabase

# –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()
logger.add(
    sys.stderr,
    format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
    level="INFO"
)


def test_single_building():
    """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –æ–¥–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è"""

    # ========== –ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–°–¢–ê ==========
    emulator = {
        'id': 1,
        'name': 'LDPlayer',
        'port': 5556
    }

    # =====================================

    logger.info("=" * 80)
    logger.info("üß™ –¢–ï–°–¢ –ü–û–°–¢–†–û–ô–ö–ò –ù–û–í–û–ì–û –ó–î–ê–ù–ò–Ø")
    logger.info("=" * 80)
    logger.info(f"üìç –≠–º—É–ª—è—Ç–æ—Ä: {emulator['name']} (ID: {emulator['id']})")
    logger.info("=" * 80)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    construction = BuildingConstruction()
    panel = NavigationPanel()
    db = BuildingDatabase()

    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–¥–∞–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏
    logger.info("\nüèóÔ∏è –î–û–°–¢–£–ü–ù–´–ï –ó–î–ê–ù–ò–Ø –î–õ–Ø –ü–û–°–¢–†–û–ô–ö–ò:")
    logger.info("1. –ñ–∏–ª–∏—â–µ –õ–µ–º—É—Ä–æ–≤ IV (—Ç—Ä–µ–±—É–µ—Ç –õ–æ—Ä–¥ ‚â•13)")
    logger.info("2. –¶–µ–Ω—Ç—Ä –°–±–æ—Ä–∞ II (—Ç—Ä–µ–±—É–µ—Ç –õ–æ—Ä–¥ ‚â•13)")
    logger.info("3. –¶–µ–Ω—Ç—Ä –°–±–æ—Ä–∞ III (—Ç—Ä–µ–±—É–µ—Ç –õ–æ—Ä–¥ ‚â•18)")
    logger.info("4. –°–∫–ª–∞–¥ –§—Ä—É–∫—Ç–æ–≤ II (—Ç—Ä–µ–±—É–µ—Ç –õ–æ—Ä–¥ ‚â•13 –∏ –°–∫–ª–∞–¥ –§—Ä—É–∫—Ç–æ–≤ ‚â•10)")
    logger.info("5. –°–∫–ª–∞–¥ –õ–∏—Å—Ç—å–µ–≤ II (—Ç—Ä–µ–±—É–µ—Ç –õ–æ—Ä–¥ ‚â•13 –∏ –°–∫–ª–∞–¥ –õ–∏—Å—Ç—å–µ–≤ ‚â•10)")
    logger.info("6. –°–∫–ª–∞–¥ –ì—Ä—É–Ω—Ç–∞ II (—Ç—Ä–µ–±—É–µ—Ç –õ–æ—Ä–¥ ‚â•13 –∏ –°–∫–ª–∞–¥ –ì—Ä—É–Ω—Ç–∞ ‚â•10)")
    logger.info("7. –°–∫–ª–∞–¥ –ü–µ—Å–∫–∞ II (—Ç—Ä–µ–±—É–µ—Ç –õ–æ—Ä–¥ ‚â•13 –∏ –°–∫–ª–∞–¥ –ü–µ—Å–∫–∞ ‚â•10)")
    logger.info("8. –ñ–∏–ª–∏—â–µ –î–µ—Ç–µ–Ω—ã—à–µ–π (5-–µ) (—Ç—Ä–µ–±—É–µ—Ç –õ–æ—Ä–¥ ‚â•14)")

    choice = input("\n–í—ã–±–µ—Ä–∏ –∑–¥–∞–Ω–∏–µ (1-8): ").strip()

    # –ú–∞–ø–ø–∏–Ω–≥ –≤—ã–±–æ—Ä–∞
    buildings_map = {
        '1': '–ñ–∏–ª–∏—â–µ –õ–µ–º—É—Ä–æ–≤ IV',
        '2': '–¶–µ–Ω—Ç—Ä –°–±–æ—Ä–∞ II',
        '3': '–¶–µ–Ω—Ç—Ä –°–±–æ—Ä–∞ III',
        '4': '–°–∫–ª–∞–¥ –§—Ä—É–∫—Ç–æ–≤ II',
        '5': '–°–∫–ª–∞–¥ –õ–∏—Å—Ç—å–µ–≤ II',
        '6': '–°–∫–ª–∞–¥ –ì—Ä—É–Ω—Ç–∞ II',
        '7': '–°–∫–ª–∞–¥ –ü–µ—Å–∫–∞ II',
        '8': '–ñ–∏–ª–∏—â–µ –î–µ—Ç–µ–Ω—ã—à–µ–π'
    }

    if choice not in buildings_map:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        return

    test_building_name = buildings_map[choice]

    logger.info(f"\nüéØ –í—ã–±—Ä–∞–Ω–æ –∑–¥–∞–Ω–∏–µ: {test_building_name}")
    logger.info("=" * 80)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞
    emulator_id = emulator.get('id', 0)
    lord_level = db.get_lord_level(emulator_id)

    if lord_level == 0:
        logger.warning("‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞?")
        logger.info("‚ÑπÔ∏è –ó–∞–ø—É—Å—Ç–∏ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î")
        input("\n–ù–∞–∂–º–∏ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ...")
    else:
        logger.info(f"üìä –£—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞: {lord_level}")

    input("\n‚úÖ –£–±–µ–¥–∏—Å—å —á—Ç–æ –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ. –ù–∞–∂–º–∏ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞...")

    # –®–ê–ì 1: –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –∑–¥–∞–Ω–∏—è
    logger.info(f"\nüìå –®–ê–ì 1: –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –∑–¥–∞–Ω–∏—è '{test_building_name}'...")
    logger.info("=" * 80)

    success = construction.construct_building(
        emulator,
        test_building_name,
        building_index=None
    )

    if success:
        logger.success(f"‚úÖ –ó–¥–∞–Ω–∏–µ '{test_building_name}' —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ!")

        # –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        logger.info(f"\nüìå –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–¥–∞–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
        time.sleep(3)  # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –∏–≥—Ä–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å

        if panel.open_navigation_panel(emulator):
            logger.success("‚úÖ –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∞")

            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∑–¥–∞–Ω–∏–µ
            if panel.navigate_to_building(emulator, test_building_name):
                logger.success(f"‚úÖ –ó–¥–∞–Ω–∏–µ '{test_building_name}' –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–Ω–µ–ª–∏!")
                logger.info("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
            else:
                logger.warning(f"‚ö†Ô∏è –ó–¥–∞–Ω–∏–µ '{test_building_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–Ω–µ–ª–∏")
                logger.info("‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ –ø–∞–Ω–µ–ª—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç—Å—è")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

    else:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–∞–Ω–∏–µ '{test_building_name}'")
        logger.warning("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.warning("  1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤")
        logger.warning("  2. –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π")
        logger.warning("  3. –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (—É—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞ –∏–ª–∏ –±–∞–∑–æ–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è)")
        logger.warning("  4. –ó–¥–∞–Ω–∏–µ —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ")

    logger.info("\n" + "=" * 80)
    logger.success("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù!")
    logger.info("=" * 80)


def test_multiple_buildings():
    """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–¥–∞–Ω–∏–π –ø–æ–¥—Ä—è–¥"""

    # ========== –ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–°–¢–ê ==========
    emulator = {
        'id': 0,
        'name': 'LDPlayer',
        'port': 5556
    }

    # –°–ü–ò–°–û–ö –ó–î–ê–ù–ò–ô –î–õ–Ø –ü–û–°–¢–†–û–ô–ö–ò (–ò–ó–ú–ï–ù–ò –ù–ê –ù–£–ñ–ù–´–ï!)
    buildings_to_construct = [
        "–°–∫–ª–∞–¥ –ì—Ä—É–Ω—Ç–∞ II",
        "–°–∫–ª–∞–¥ –ü–µ—Å–∫–∞ II",
        "–¶–µ–Ω—Ç—Ä –°–±–æ—Ä–∞ II",
    ]

    # =====================================

    logger.info("=" * 80)
    logger.info("üß™ –¢–ï–°–¢ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ô –ü–û–°–¢–†–û–ô–ö–ò –ó–î–ê–ù–ò–ô")
    logger.info("=" * 80)
    logger.info(f"üìç –≠–º—É–ª—è—Ç–æ—Ä: {emulator['name']} (ID: {emulator['id']})")
    logger.info(f"üèóÔ∏è –ó–¥–∞–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ: {len(buildings_to_construct)}")
    logger.info("=" * 80)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    construction = BuildingConstruction()
    db = BuildingDatabase()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞
    emulator_id = emulator.get('id', 0)
    lord_level = db.get_lord_level(emulator_id)

    if lord_level > 0:
        logger.info(f"üìä –£—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞: {lord_level}")
    else:
        logger.warning("‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –õ–æ—Ä–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")

    input("\n‚úÖ –£–±–µ–¥–∏—Å—å —á—Ç–æ –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞...")

    # –°—á–µ—Ç—á–∏–∫–∏
    success_count = 0
    failed_count = 0

    for idx, building_name in enumerate(buildings_to_construct, 1):
        logger.info(f"\n{'=' * 80}")
        logger.info(f"üìç –ó–î–ê–ù–ò–ï {idx}/{len(buildings_to_construct)}: {building_name}")
        logger.info(f"{'=' * 80}")

        # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å
        success = construction.construct_building(emulator, building_name)

        if success:
            success_count += 1
            logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {building_name}")
        else:
            failed_count += 1
            logger.error(f"‚ùå –ü—Ä–æ–≤–∞–ª: {building_name}")

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–¥–∞–Ω–∏—è–º–∏
        if idx < len(buildings_to_construct):
            logger.info("‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–¥–∞–Ω–∏–µ–º...")
            time.sleep(5)

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 80)
    logger.info("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
    logger.info("=" * 80)
    logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ: {success_count}")
    logger.error(f"‚ùå –ü—Ä–æ–≤–∞–ª–æ–≤: {failed_count}")

    if len(buildings_to_construct) > 0:
        success_rate = success_count / len(buildings_to_construct) * 100
        logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")

    logger.info("=" * 80)


if __name__ == "__main__":
    print("\nüéØ –í–´–ë–ï–†–ò –†–ï–ñ–ò–ú –¢–ï–°–¢–ê:")
    print("1. –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è (—Å —Ä—É—á–Ω—ã–º –≤—ã–±–æ—Ä–æ–º)")
    print("2. –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–∞–Ω–∏–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
    print()

    choice = input("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()

    if choice == "1":
        test_single_building()
    elif choice == "2":
        test_multiple_buildings()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")