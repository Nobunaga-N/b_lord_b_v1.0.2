"""
–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞ Beast Lord Bot v3.0
–° –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (Recovery System)

–í–µ—Ä—Å–∏—è: 1.1
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-01-06
–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 2025-01-16 (–¥–æ–±–∞–≤–ª–µ–Ω–∞ Recovery System)
"""

import time
import threading
from utils.logger import logger
from utils.config_manager import load_config
from utils.adb_controller import wait_for_adb
from utils.recovery_manager import recovery_manager
from core.emulator_manager import EmulatorManager
from core.game_launcher import GameLauncher
from core.function_executor import execute_functions


class BotOrchestrator:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–º —Ü–∏–∫–ª–æ–º –±–æ—Ç–∞

    –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏ (max_concurrent)
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    - Graceful shutdown –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Recovery System –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    """

    def __init__(self, gui_callback=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

        Args:
            gui_callback: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                         –§–æ—Ä–º–∞—Ç: callback(bot_state)
        """
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.thread = None
        self.gui_callback = gui_callback

        # –î–∞–Ω–Ω—ã–µ
        self.queue = []
        self.active_slots = []  # [(emulator, thread), ...]
        self.max_concurrent = 3

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.emulator_manager = EmulatorManager()

        logger.debug("BotOrchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""

        if self.is_running:
            logger.warning("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False

        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥
        self.is_running = True

        # –°–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫
        self.thread = threading.Thread(target=self._main_loop, daemon=False)
        self.thread.start()

        logger.success("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        return True

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç gracefully"""

        if not self.is_running:
            logger.warning("–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return

        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")

        # 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ (–≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ)
        self.is_running = False

        # 2. –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        if self.thread and self.thread.is_alive():
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞...")
            self.thread.join()  # –ë–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞!

        # 3. –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
        for emulator, thread in self.active_slots[:]:
            if thread.is_alive():
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {emulator['name']}...")
                thread.join()  # –ë–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞!

        # 4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ —ç–º—É–ª—è—Ç–æ—Ä—ã (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        for emulator, _ in self.active_slots:
            logger.info(f"–ó–∞–∫—Ä—ã—Ç–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞: {emulator['name']}")
            self.emulator_manager.stop_emulator(emulator['id'])

        # 5. –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        self.active_slots = []
        self.queue = []

        logger.success("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self._update_gui()

    def _main_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""

        logger.info("–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞...")

        try:
            # 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥
            enabled_emulators, self.max_concurrent, active_functions = self._load_config()

            if not enabled_emulators:
                logger.warning("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
                self.is_running = False
                self._update_gui()
                return

            # 2. –°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å
            self.queue = enabled_emulators.copy()
            self.active_slots = []

            logger.info(f"–í—Å–µ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {len(self.queue)}, –º–∞–∫—Å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {self.max_concurrent}")
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {active_functions if active_functions else '–ù–ï–¢'}")

            # 3. –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
            while self.is_running and (self.queue or self.active_slots):

                # 3a. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
                self._check_restart_requests()

                # 3b. –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏ –¥–æ max_concurrent
                while len(self.active_slots) < self.max_concurrent and self.queue and self.is_running:
                    emulator = self.queue.pop(0)

                    logger.info(f"–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {emulator['name']} (—Å–ª–æ—Ç {len(self.active_slots)+1}/{self.max_concurrent})")

                    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    thread = threading.Thread(
                        target=self._process_emulator,
                        args=(emulator, active_functions),
                        daemon=False
                    )
                    thread.start()

                    self.active_slots.append((emulator, thread))
                    self._update_gui()

                # 3c. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
                for emulator, thread in self.active_slots[:]:
                    if not thread.is_alive():
                        logger.success(f"–°–ª–æ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω: {emulator['name']}")
                        self.active_slots.remove((emulator, thread))
                        self._update_gui()

                # 3d. –ü–∞—É–∑–∞
                time.sleep(1)

            # 4. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            logger.info("–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω")
            self.is_running = False
            self._update_gui()

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            logger.exception(e)
            self.is_running = False
            self._update_gui()

    def _check_restart_requests(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤

        –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞,
        –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ _process_emulator)
        """
        for emulator, thread in self.active_slots[:]:
            emulator_id = emulator.get('id')

            if recovery_manager.has_restart_request(emulator_id) and thread.is_alive():
                reason = recovery_manager.get_restart_reason(emulator_id)
                logger.warning(f"üîÑ –≠–º—É–ª—è—Ç–æ—Ä {emulator['name']} –∏–º–µ–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: {reason}")
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...")

    def _process_emulator(self, emulator, active_functions):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —ç–º—É–ª—è—Ç–æ—Ä
        –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Recovery System

        Args:
            emulator: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞
            active_functions: —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        """
        emulator_name = emulator.get('name', 'Unknown')
        emulator_id = emulator.get('id')

        try:
            logger.info(f"\n{'='*50}")
            logger.info(f"üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞: {emulator_name}")
            logger.info(f"{'='*50}")

            # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            if recovery_manager.has_restart_request(emulator_id):
                reason = recovery_manager.get_restart_reason(emulator_id)
                logger.warning(f"[{emulator_name}] üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: {reason}")

                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
                success = self._restart_emulator(emulator)

                if success:
                    logger.success(f"[{emulator_name}] ‚úÖ –≠–º—É–ª—è—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                    recovery_manager.clear_restart_request(emulator_id)
                else:
                    logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä")
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —ç–º—É–ª—è—Ç–æ—Ä –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ
                    return

            # 1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä
            logger.info(f"[{emulator_name}] –ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞...")
            if not self.emulator_manager.start_emulator(emulator_id):
                logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä")
                return

            # 2. –î–æ–∂–¥–∞—Ç—å—Å—è ADB
            logger.info(f"[{emulator_name}] –û–∂–∏–¥–∞–Ω–∏–µ ADB...")
            if not wait_for_adb(emulator['port']):
                logger.error(f"[{emulator_name}] ‚ùå ADB –Ω–µ –≥–æ—Ç–æ–≤")
                self.emulator_manager.stop_emulator(emulator)
                return

            # 3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏
            game_launcher = GameLauncher(emulator)
            if not game_launcher.launch_and_wait():
                logger.error(f"[{emulator_name}] ‚ùå –ò–≥—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å")

                # –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã
                recovery_manager.handle_stuck_state(emulator, context="–ò–≥—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å")
                self.emulator_manager.stop_emulator(emulator)
                return

            # 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if not active_functions:
                logger.info(f"[{emulator_name}] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                return

            # 5. –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
            logger.info(f"[{emulator_name}] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π: {active_functions}")

            try:
                execute_functions(emulator, active_functions)
                logger.success(f"[{emulator_name}] ‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            except Exception as func_error:
                logger.error(f"[{emulator_name}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π: {func_error}")

                # –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
                recovery_manager.handle_stuck_state(emulator, context=f"–û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π: {func_error}")

        except Exception as e:
            logger.error(f"[{emulator_name}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            logger.exception(e)

            # –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
            recovery_manager.handle_stuck_state(emulator, context=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

        finally:
            # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã—Ç—å —ç–º—É–ª—è—Ç–æ—Ä
            logger.info(f"[{emulator_name}] –ó–∞–∫—Ä—ã—Ç–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞...")
            try:
                self.emulator_manager.stop_emulator(emulator['id'])
            except Exception as close_error:
                logger.error(f"[{emulator_name}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞: {close_error}")

            logger.info(f"[{emulator_name}] üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")

    def _restart_emulator(self, emulator) -> bool:
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ + –∑–∞–ø—É—Å–∫)

        Args:
            emulator: –æ–±—ä–µ–∫—Ç —ç–º—É–ª—è—Ç–æ—Ä–∞

        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω
        """
        emulator_name = emulator.get('name', 'Unknown')

        logger.info(f"[{emulator_name}] üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞...")

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        logger.info(f"[{emulator_name}] –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        stop_success = self.emulator_manager.stop_emulator(emulator['id'])
        if not stop_success:
            logger.warning(f"[{emulator_name}] ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ, –ø—Ä–æ–¥–æ–ª–∂–∞—é...")

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏ –∑–∞–ø—É—Å–∫–æ–º
        time.sleep(5)

        # –ó–∞–ø—É—Å–∫
        logger.info(f"[{emulator_name}] –ó–∞–ø—É—Å–∫...")
        start_success = self.emulator_manager.start_emulator(emulator['id'])
        if not start_success:
            logger.error(f"[{emulator_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä")
            return False

        # –û–∂–∏–¥–∞–Ω–∏–µ ADB
        logger.info(f"[{emulator_name}] –û–∂–∏–¥–∞–Ω–∏–µ ADB...")
        adb_ready = wait_for_adb(emulator['port'], timeout=90)

        if not adb_ready:
            logger.error(f"[{emulator_name}] ‚ùå ADB –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
            return False

        logger.success(f"[{emulator_name}] ‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω")
        return True

    def _load_config(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞

        Returns:
            tuple: (enabled_emulators, max_concurrent, active_functions)
                - enabled_emulators: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏
                - max_concurrent: int, –º–∞–∫—Å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
                - active_functions: —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        """

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å gui_config.yaml
        gui_config = load_config("configs/gui_config.yaml")

        if not gui_config:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å gui_config.yaml")
            return [], 3, []

        # –ü–æ–ª—É—á–∏—Ç—å ID –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
        enabled_ids = gui_config.get('emulators', {}).get('enabled', [])

        # –ü–æ–ª—É—á–∏—Ç—å max_concurrent
        max_concurrent = gui_config.get('settings', {}).get('max_concurrent', 3)

        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        functions_config = gui_config.get('functions', {})
        active_functions = [name for name, enabled in functions_config.items() if enabled]

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å emulators.yaml
        emulators_config = load_config("configs/emulators.yaml")

        if not emulators_config or 'emulators' not in emulators_config:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å emulators.yaml")
            return [], max_concurrent, active_functions

        all_emulators = emulators_config['emulators']

        # –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ
        enabled_emulators = [emu for emu in all_emulators if emu['id'] in enabled_ids]

        logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {len(enabled_emulators)}, –º–∞–∫—Å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {max_concurrent}")
        logger.debug(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {active_functions}")

        return enabled_emulators, max_concurrent, active_functions

    def _update_gui(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç GUI —á–µ—Ä–µ–∑ callback"""

        if not self.gui_callback:
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        bot_state = {
            "is_running": self.is_running,
            "active_count": len(self.active_slots),
            "max_concurrent": self.max_concurrent,
            "active_emulators": [
                {"id": emu['id'], "name": emu['name']}
                for emu, _ in self.active_slots
            ]
        }

        # –í—ã–∑—ã–≤–∞–µ–º callback
        try:
            self.gui_callback(bot_state)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ GUI: {e}")